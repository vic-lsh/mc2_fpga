// avmm_ic_altera_mm_interconnect_1920_twrql5y.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.1 115

`timescale 1 ps / 1 ps
module avmm_ic_altera_mm_interconnect_1920_twrql5y (
		input  wire [31:0] ccl_master_m0_address,                                             //                                               ccl_master_m0.address
		output wire        ccl_master_m0_waitrequest,                                         //                                                            .waitrequest
		input  wire [0:0]  ccl_master_m0_burstcount,                                          //                                                            .burstcount
		input  wire [7:0]  ccl_master_m0_byteenable,                                          //                                                            .byteenable
		input  wire        ccl_master_m0_read,                                                //                                                            .read
		output wire [63:0] ccl_master_m0_readdata,                                            //                                                            .readdata
		output wire        ccl_master_m0_readdatavalid,                                       //                                                            .readdatavalid
		input  wire        ccl_master_m0_write,                                               //                                                            .write
		input  wire [63:0] ccl_master_m0_writedata,                                           //                                                            .writedata
		input  wire        ccl_master_m0_debugaccess,                                         //                                                            .debugaccess
		input  wire [31:0] usr_access_master_m0_address,                                      //                                        usr_access_master_m0.address
		output wire        usr_access_master_m0_waitrequest,                                  //                                                            .waitrequest
		input  wire [0:0]  usr_access_master_m0_burstcount,                                   //                                                            .burstcount
		input  wire [3:0]  usr_access_master_m0_byteenable,                                   //                                                            .byteenable
		input  wire        usr_access_master_m0_read,                                         //                                                            .read
		output wire [31:0] usr_access_master_m0_readdata,                                     //                                                            .readdata
		output wire        usr_access_master_m0_readdatavalid,                                //                                                            .readdatavalid
		input  wire        usr_access_master_m0_write,                                        //                                                            .write
		input  wire [31:0] usr_access_master_m0_writedata,                                    //                                                            .writedata
		input  wire        usr_access_master_m0_debugaccess,                                  //                                                            .debugaccess
		input  wire [31:0] debug_master_m0_address,                                           //                                             debug_master_m0.address
		output wire        debug_master_m0_waitrequest,                                       //                                                            .waitrequest
		input  wire [0:0]  debug_master_m0_burstcount,                                        //                                                            .burstcount
		input  wire [3:0]  debug_master_m0_byteenable,                                        //                                                            .byteenable
		input  wire        debug_master_m0_read,                                              //                                                            .read
		output wire [31:0] debug_master_m0_readdata,                                          //                                                            .readdata
		output wire        debug_master_m0_readdatavalid,                                     //                                                            .readdatavalid
		input  wire        debug_master_m0_write,                                             //                                                            .write
		input  wire [31:0] debug_master_m0_writedata,                                         //                                                            .writedata
		input  wire        debug_master_m0_debugaccess,                                       //                                                            .debugaccess
		input  wire [31:0] ccl_mirror_master_m0_address,                                      //                                        ccl_mirror_master_m0.address
		output wire        ccl_mirror_master_m0_waitrequest,                                  //                                                            .waitrequest
		input  wire [0:0]  ccl_mirror_master_m0_burstcount,                                   //                                                            .burstcount
		input  wire [3:0]  ccl_mirror_master_m0_byteenable,                                   //                                                            .byteenable
		input  wire        ccl_mirror_master_m0_read,                                         //                                                            .read
		output wire [31:0] ccl_mirror_master_m0_readdata,                                     //                                                            .readdata
		output wire        ccl_mirror_master_m0_readdatavalid,                                //                                                            .readdatavalid
		input  wire        ccl_mirror_master_m0_write,                                        //                                                            .write
		input  wire [31:0] ccl_mirror_master_m0_writedata,                                    //                                                            .writedata
		input  wire        ccl_mirror_master_m0_debugaccess,                                  //                                                            .debugaccess
		output wire [23:0] afu_slave_s0_address,                                              //                                                afu_slave_s0.address
		output wire        afu_slave_s0_write,                                                //                                                            .write
		output wire        afu_slave_s0_read,                                                 //                                                            .read
		input  wire [63:0] afu_slave_s0_readdata,                                             //                                                            .readdata
		output wire [63:0] afu_slave_s0_writedata,                                            //                                                            .writedata
		output wire [0:0]  afu_slave_s0_burstcount,                                           //                                                            .burstcount
		output wire [7:0]  afu_slave_s0_byteenable,                                           //                                                            .byteenable
		input  wire        afu_slave_s0_readdatavalid,                                        //                                                            .readdatavalid
		input  wire        afu_slave_s0_waitrequest,                                          //                                                            .waitrequest
		output wire        afu_slave_s0_debugaccess,                                          //                                                            .debugaccess
		output wire [23:0] bbs_slave_s0_address,                                              //                                                bbs_slave_s0.address
		output wire        bbs_slave_s0_write,                                                //                                                            .write
		output wire        bbs_slave_s0_read,                                                 //                                                            .read
		input  wire [63:0] bbs_slave_s0_readdata,                                             //                                                            .readdata
		output wire [63:0] bbs_slave_s0_writedata,                                            //                                                            .writedata
		output wire [0:0]  bbs_slave_s0_burstcount,                                           //                                                            .burstcount
		output wire [7:0]  bbs_slave_s0_byteenable,                                           //                                                            .byteenable
		input  wire        bbs_slave_s0_readdatavalid,                                        //                                                            .readdatavalid
		input  wire        bbs_slave_s0_waitrequest,                                          //                                                            .waitrequest
		output wire        bbs_slave_s0_debugaccess,                                          //                                                            .debugaccess
		output wire [23:0] ccl_csb2wire_csr_s0_address,                                       //                                         ccl_csb2wire_csr_s0.address
		output wire        ccl_csb2wire_csr_s0_write,                                         //                                                            .write
		output wire        ccl_csb2wire_csr_s0_read,                                          //                                                            .read
		input  wire [31:0] ccl_csb2wire_csr_s0_readdata,                                      //                                                            .readdata
		output wire [31:0] ccl_csb2wire_csr_s0_writedata,                                     //                                                            .writedata
		output wire [0:0]  ccl_csb2wire_csr_s0_burstcount,                                    //                                                            .burstcount
		output wire [3:0]  ccl_csb2wire_csr_s0_byteenable,                                    //                                                            .byteenable
		input  wire        ccl_csb2wire_csr_s0_readdatavalid,                                 //                                                            .readdatavalid
		input  wire        ccl_csb2wire_csr_s0_waitrequest,                                   //                                                            .waitrequest
		output wire        ccl_csb2wire_csr_s0_debugaccess,                                   //                                                            .debugaccess
		output wire [23:0] ccl_slave_s0_address,                                              //                                                ccl_slave_s0.address
		output wire        ccl_slave_s0_write,                                                //                                                            .write
		output wire        ccl_slave_s0_read,                                                 //                                                            .read
		input  wire [31:0] ccl_slave_s0_readdata,                                             //                                                            .readdata
		output wire [31:0] ccl_slave_s0_writedata,                                            //                                                            .writedata
		output wire [0:0]  ccl_slave_s0_burstcount,                                           //                                                            .burstcount
		output wire [3:0]  ccl_slave_s0_byteenable,                                           //                                                            .byteenable
		input  wire        ccl_slave_s0_readdatavalid,                                        //                                                            .readdatavalid
		input  wire        ccl_slave_s0_waitrequest,                                          //                                                            .waitrequest
		output wire        ccl_slave_s0_debugaccess,                                          //                                                            .debugaccess
		output wire [23:0] ccv_afu_s0_address,                                                //                                                  ccv_afu_s0.address
		output wire        ccv_afu_s0_write,                                                  //                                                            .write
		output wire        ccv_afu_s0_read,                                                   //                                                            .read
		input  wire [63:0] ccv_afu_s0_readdata,                                               //                                                            .readdata
		output wire [63:0] ccv_afu_s0_writedata,                                              //                                                            .writedata
		output wire [0:0]  ccv_afu_s0_burstcount,                                             //                                                            .burstcount
		output wire [7:0]  ccv_afu_s0_byteenable,                                             //                                                            .byteenable
		input  wire        ccv_afu_s0_readdatavalid,                                          //                                                            .readdatavalid
		input  wire        ccv_afu_s0_waitrequest,                                            //                                                            .waitrequest
		output wire        ccv_afu_s0_debugaccess,                                            //                                                            .debugaccess
		output wire [23:0] cmb2avst_slave_s0_address,                                         //                                           cmb2avst_slave_s0.address
		output wire        cmb2avst_slave_s0_write,                                           //                                                            .write
		output wire        cmb2avst_slave_s0_read,                                            //                                                            .read
		input  wire [31:0] cmb2avst_slave_s0_readdata,                                        //                                                            .readdata
		output wire [31:0] cmb2avst_slave_s0_writedata,                                       //                                                            .writedata
		output wire [0:0]  cmb2avst_slave_s0_burstcount,                                      //                                                            .burstcount
		output wire [3:0]  cmb2avst_slave_s0_byteenable,                                      //                                                            .byteenable
		input  wire        cmb2avst_slave_s0_readdatavalid,                                   //                                                            .readdatavalid
		input  wire        cmb2avst_slave_s0_waitrequest,                                     //                                                            .waitrequest
		output wire        cmb2avst_slave_s0_debugaccess,                                     //                                                            .debugaccess
		output wire [23:0] hip_recfg_slave_s0_address,                                        //                                          hip_recfg_slave_s0.address
		output wire        hip_recfg_slave_s0_write,                                          //                                                            .write
		output wire        hip_recfg_slave_s0_read,                                           //                                                            .read
		input  wire [7:0]  hip_recfg_slave_s0_readdata,                                       //                                                            .readdata
		output wire [7:0]  hip_recfg_slave_s0_writedata,                                      //                                                            .writedata
		output wire [0:0]  hip_recfg_slave_s0_burstcount,                                     //                                                            .burstcount
		output wire [0:0]  hip_recfg_slave_s0_byteenable,                                     //                                                            .byteenable
		input  wire        hip_recfg_slave_s0_readdatavalid,                                  //                                                            .readdatavalid
		input  wire        hip_recfg_slave_s0_waitrequest,                                    //                                                            .waitrequest
		output wire        hip_recfg_slave_s0_debugaccess,                                    //                                                            .debugaccess
		output wire [23:0] usr_avmm_slave_s0_address,                                         //                                           usr_avmm_slave_s0.address
		output wire        usr_avmm_slave_s0_write,                                           //                                                            .write
		output wire        usr_avmm_slave_s0_read,                                            //                                                            .read
		input  wire [7:0]  usr_avmm_slave_s0_readdata,                                        //                                                            .readdata
		output wire [7:0]  usr_avmm_slave_s0_writedata,                                       //                                                            .writedata
		output wire [0:0]  usr_avmm_slave_s0_burstcount,                                      //                                                            .burstcount
		output wire [0:0]  usr_avmm_slave_s0_byteenable,                                      //                                                            .byteenable
		input  wire        usr_avmm_slave_s0_readdatavalid,                                   //                                                            .readdatavalid
		input  wire        usr_avmm_slave_s0_waitrequest,                                     //                                                            .waitrequest
		output wire        usr_avmm_slave_s0_debugaccess,                                     //                                                            .debugaccess
		input  wire        ccl_master_m0_reset_reset_bridge_in_reset_reset,                   //                   ccl_master_m0_reset_reset_bridge_in_reset.reset,        Reset Input
		input  wire        afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset, // afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset.reset,        Reset Input
		input  wire        interconnect_clock_in_out_clk_clk                                  //                               interconnect_clock_in_out_clk.clk,          Clock Input
	);

	wire          ccl_master_m0_translator_avalon_universal_master_0_waitrequest;                 // ccl_master_m0_agent:av_waitrequest -> ccl_master_m0_translator:uav_waitrequest
	wire   [63:0] ccl_master_m0_translator_avalon_universal_master_0_readdata;                    // ccl_master_m0_agent:av_readdata -> ccl_master_m0_translator:uav_readdata
	wire          ccl_master_m0_translator_avalon_universal_master_0_debugaccess;                 // ccl_master_m0_translator:uav_debugaccess -> ccl_master_m0_agent:av_debugaccess
	wire   [31:0] ccl_master_m0_translator_avalon_universal_master_0_address;                     // ccl_master_m0_translator:uav_address -> ccl_master_m0_agent:av_address
	wire          ccl_master_m0_translator_avalon_universal_master_0_read;                        // ccl_master_m0_translator:uav_read -> ccl_master_m0_agent:av_read
	wire    [7:0] ccl_master_m0_translator_avalon_universal_master_0_byteenable;                  // ccl_master_m0_translator:uav_byteenable -> ccl_master_m0_agent:av_byteenable
	wire          ccl_master_m0_translator_avalon_universal_master_0_readdatavalid;               // ccl_master_m0_agent:av_readdatavalid -> ccl_master_m0_translator:uav_readdatavalid
	wire          ccl_master_m0_translator_avalon_universal_master_0_lock;                        // ccl_master_m0_translator:uav_lock -> ccl_master_m0_agent:av_lock
	wire          ccl_master_m0_translator_avalon_universal_master_0_write;                       // ccl_master_m0_translator:uav_write -> ccl_master_m0_agent:av_write
	wire   [63:0] ccl_master_m0_translator_avalon_universal_master_0_writedata;                   // ccl_master_m0_translator:uav_writedata -> ccl_master_m0_agent:av_writedata
	wire    [3:0] ccl_master_m0_translator_avalon_universal_master_0_burstcount;                  // ccl_master_m0_translator:uav_burstcount -> ccl_master_m0_agent:av_burstcount
	wire          usr_access_master_m0_translator_avalon_universal_master_0_waitrequest;          // usr_access_master_m0_agent:av_waitrequest -> usr_access_master_m0_translator:uav_waitrequest
	wire   [31:0] usr_access_master_m0_translator_avalon_universal_master_0_readdata;             // usr_access_master_m0_agent:av_readdata -> usr_access_master_m0_translator:uav_readdata
	wire          usr_access_master_m0_translator_avalon_universal_master_0_debugaccess;          // usr_access_master_m0_translator:uav_debugaccess -> usr_access_master_m0_agent:av_debugaccess
	wire   [31:0] usr_access_master_m0_translator_avalon_universal_master_0_address;              // usr_access_master_m0_translator:uav_address -> usr_access_master_m0_agent:av_address
	wire          usr_access_master_m0_translator_avalon_universal_master_0_read;                 // usr_access_master_m0_translator:uav_read -> usr_access_master_m0_agent:av_read
	wire    [3:0] usr_access_master_m0_translator_avalon_universal_master_0_byteenable;           // usr_access_master_m0_translator:uav_byteenable -> usr_access_master_m0_agent:av_byteenable
	wire          usr_access_master_m0_translator_avalon_universal_master_0_readdatavalid;        // usr_access_master_m0_agent:av_readdatavalid -> usr_access_master_m0_translator:uav_readdatavalid
	wire          usr_access_master_m0_translator_avalon_universal_master_0_lock;                 // usr_access_master_m0_translator:uav_lock -> usr_access_master_m0_agent:av_lock
	wire          usr_access_master_m0_translator_avalon_universal_master_0_write;                // usr_access_master_m0_translator:uav_write -> usr_access_master_m0_agent:av_write
	wire   [31:0] usr_access_master_m0_translator_avalon_universal_master_0_writedata;            // usr_access_master_m0_translator:uav_writedata -> usr_access_master_m0_agent:av_writedata
	wire    [2:0] usr_access_master_m0_translator_avalon_universal_master_0_burstcount;           // usr_access_master_m0_translator:uav_burstcount -> usr_access_master_m0_agent:av_burstcount
	wire          debug_master_m0_translator_avalon_universal_master_0_waitrequest;               // debug_master_m0_agent:av_waitrequest -> debug_master_m0_translator:uav_waitrequest
	wire   [31:0] debug_master_m0_translator_avalon_universal_master_0_readdata;                  // debug_master_m0_agent:av_readdata -> debug_master_m0_translator:uav_readdata
	wire          debug_master_m0_translator_avalon_universal_master_0_debugaccess;               // debug_master_m0_translator:uav_debugaccess -> debug_master_m0_agent:av_debugaccess
	wire   [31:0] debug_master_m0_translator_avalon_universal_master_0_address;                   // debug_master_m0_translator:uav_address -> debug_master_m0_agent:av_address
	wire          debug_master_m0_translator_avalon_universal_master_0_read;                      // debug_master_m0_translator:uav_read -> debug_master_m0_agent:av_read
	wire    [3:0] debug_master_m0_translator_avalon_universal_master_0_byteenable;                // debug_master_m0_translator:uav_byteenable -> debug_master_m0_agent:av_byteenable
	wire          debug_master_m0_translator_avalon_universal_master_0_readdatavalid;             // debug_master_m0_agent:av_readdatavalid -> debug_master_m0_translator:uav_readdatavalid
	wire          debug_master_m0_translator_avalon_universal_master_0_lock;                      // debug_master_m0_translator:uav_lock -> debug_master_m0_agent:av_lock
	wire          debug_master_m0_translator_avalon_universal_master_0_write;                     // debug_master_m0_translator:uav_write -> debug_master_m0_agent:av_write
	wire   [31:0] debug_master_m0_translator_avalon_universal_master_0_writedata;                 // debug_master_m0_translator:uav_writedata -> debug_master_m0_agent:av_writedata
	wire    [2:0] debug_master_m0_translator_avalon_universal_master_0_burstcount;                // debug_master_m0_translator:uav_burstcount -> debug_master_m0_agent:av_burstcount
	wire          ccl_mirror_master_m0_translator_avalon_universal_master_0_waitrequest;          // ccl_mirror_master_m0_agent:av_waitrequest -> ccl_mirror_master_m0_translator:uav_waitrequest
	wire   [31:0] ccl_mirror_master_m0_translator_avalon_universal_master_0_readdata;             // ccl_mirror_master_m0_agent:av_readdata -> ccl_mirror_master_m0_translator:uav_readdata
	wire          ccl_mirror_master_m0_translator_avalon_universal_master_0_debugaccess;          // ccl_mirror_master_m0_translator:uav_debugaccess -> ccl_mirror_master_m0_agent:av_debugaccess
	wire   [31:0] ccl_mirror_master_m0_translator_avalon_universal_master_0_address;              // ccl_mirror_master_m0_translator:uav_address -> ccl_mirror_master_m0_agent:av_address
	wire          ccl_mirror_master_m0_translator_avalon_universal_master_0_read;                 // ccl_mirror_master_m0_translator:uav_read -> ccl_mirror_master_m0_agent:av_read
	wire    [3:0] ccl_mirror_master_m0_translator_avalon_universal_master_0_byteenable;           // ccl_mirror_master_m0_translator:uav_byteenable -> ccl_mirror_master_m0_agent:av_byteenable
	wire          ccl_mirror_master_m0_translator_avalon_universal_master_0_readdatavalid;        // ccl_mirror_master_m0_agent:av_readdatavalid -> ccl_mirror_master_m0_translator:uav_readdatavalid
	wire          ccl_mirror_master_m0_translator_avalon_universal_master_0_lock;                 // ccl_mirror_master_m0_translator:uav_lock -> ccl_mirror_master_m0_agent:av_lock
	wire          ccl_mirror_master_m0_translator_avalon_universal_master_0_write;                // ccl_mirror_master_m0_translator:uav_write -> ccl_mirror_master_m0_agent:av_write
	wire   [31:0] ccl_mirror_master_m0_translator_avalon_universal_master_0_writedata;            // ccl_mirror_master_m0_translator:uav_writedata -> ccl_mirror_master_m0_agent:av_writedata
	wire    [2:0] ccl_mirror_master_m0_translator_avalon_universal_master_0_burstcount;           // ccl_mirror_master_m0_translator:uav_burstcount -> ccl_mirror_master_m0_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                          // rsp_mux_003:src_valid -> ccl_mirror_master_m0_agent:rp_valid
	wire  [130:0] rsp_mux_003_src_data;                                                           // rsp_mux_003:src_data -> ccl_mirror_master_m0_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                          // ccl_mirror_master_m0_agent:rp_ready -> rsp_mux_003:src_ready
	wire    [7:0] rsp_mux_003_src_channel;                                                        // rsp_mux_003:src_channel -> ccl_mirror_master_m0_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                  // rsp_mux_003:src_startofpacket -> ccl_mirror_master_m0_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                    // rsp_mux_003:src_endofpacket -> ccl_mirror_master_m0_agent:rp_endofpacket
	wire   [63:0] afu_slave_s0_agent_m0_readdata;                                                 // afu_slave_s0_translator:uav_readdata -> afu_slave_s0_agent:m0_readdata
	wire          afu_slave_s0_agent_m0_waitrequest;                                              // afu_slave_s0_translator:uav_waitrequest -> afu_slave_s0_agent:m0_waitrequest
	wire          afu_slave_s0_agent_m0_debugaccess;                                              // afu_slave_s0_agent:m0_debugaccess -> afu_slave_s0_translator:uav_debugaccess
	wire   [31:0] afu_slave_s0_agent_m0_address;                                                  // afu_slave_s0_agent:m0_address -> afu_slave_s0_translator:uav_address
	wire    [7:0] afu_slave_s0_agent_m0_byteenable;                                               // afu_slave_s0_agent:m0_byteenable -> afu_slave_s0_translator:uav_byteenable
	wire          afu_slave_s0_agent_m0_read;                                                     // afu_slave_s0_agent:m0_read -> afu_slave_s0_translator:uav_read
	wire          afu_slave_s0_agent_m0_readdatavalid;                                            // afu_slave_s0_translator:uav_readdatavalid -> afu_slave_s0_agent:m0_readdatavalid
	wire          afu_slave_s0_agent_m0_lock;                                                     // afu_slave_s0_agent:m0_lock -> afu_slave_s0_translator:uav_lock
	wire   [63:0] afu_slave_s0_agent_m0_writedata;                                                // afu_slave_s0_agent:m0_writedata -> afu_slave_s0_translator:uav_writedata
	wire          afu_slave_s0_agent_m0_write;                                                    // afu_slave_s0_agent:m0_write -> afu_slave_s0_translator:uav_write
	wire    [3:0] afu_slave_s0_agent_m0_burstcount;                                               // afu_slave_s0_agent:m0_burstcount -> afu_slave_s0_translator:uav_burstcount
	wire          afu_slave_s0_agent_rf_source_valid;                                             // afu_slave_s0_agent:rf_source_valid -> afu_slave_s0_agent_rsp_fifo:in_valid
	wire  [167:0] afu_slave_s0_agent_rf_source_data;                                              // afu_slave_s0_agent:rf_source_data -> afu_slave_s0_agent_rsp_fifo:in_data
	wire          afu_slave_s0_agent_rf_source_ready;                                             // afu_slave_s0_agent_rsp_fifo:in_ready -> afu_slave_s0_agent:rf_source_ready
	wire          afu_slave_s0_agent_rf_source_startofpacket;                                     // afu_slave_s0_agent:rf_source_startofpacket -> afu_slave_s0_agent_rsp_fifo:in_startofpacket
	wire          afu_slave_s0_agent_rf_source_endofpacket;                                       // afu_slave_s0_agent:rf_source_endofpacket -> afu_slave_s0_agent_rsp_fifo:in_endofpacket
	wire          afu_slave_s0_agent_rsp_fifo_out_valid;                                          // afu_slave_s0_agent_rsp_fifo:out_valid -> afu_slave_s0_agent:rf_sink_valid
	wire  [167:0] afu_slave_s0_agent_rsp_fifo_out_data;                                           // afu_slave_s0_agent_rsp_fifo:out_data -> afu_slave_s0_agent:rf_sink_data
	wire          afu_slave_s0_agent_rsp_fifo_out_ready;                                          // afu_slave_s0_agent:rf_sink_ready -> afu_slave_s0_agent_rsp_fifo:out_ready
	wire          afu_slave_s0_agent_rsp_fifo_out_startofpacket;                                  // afu_slave_s0_agent_rsp_fifo:out_startofpacket -> afu_slave_s0_agent:rf_sink_startofpacket
	wire          afu_slave_s0_agent_rsp_fifo_out_endofpacket;                                    // afu_slave_s0_agent_rsp_fifo:out_endofpacket -> afu_slave_s0_agent:rf_sink_endofpacket
	wire          afu_slave_s0_agent_rdata_fifo_src_valid;                                        // afu_slave_s0_agent:rdata_fifo_src_valid -> afu_slave_s0_agent:rdata_fifo_sink_valid
	wire   [65:0] afu_slave_s0_agent_rdata_fifo_src_data;                                         // afu_slave_s0_agent:rdata_fifo_src_data -> afu_slave_s0_agent:rdata_fifo_sink_data
	wire          afu_slave_s0_agent_rdata_fifo_src_ready;                                        // afu_slave_s0_agent:rdata_fifo_sink_ready -> afu_slave_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                              // cmd_mux:src_valid -> afu_slave_s0_agent:cp_valid
	wire  [166:0] cmd_mux_src_data;                                                               // cmd_mux:src_data -> afu_slave_s0_agent:cp_data
	wire          cmd_mux_src_ready;                                                              // afu_slave_s0_agent:cp_ready -> cmd_mux:src_ready
	wire    [7:0] cmd_mux_src_channel;                                                            // cmd_mux:src_channel -> afu_slave_s0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                      // cmd_mux:src_startofpacket -> afu_slave_s0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                        // cmd_mux:src_endofpacket -> afu_slave_s0_agent:cp_endofpacket
	wire   [63:0] bbs_slave_s0_agent_m0_readdata;                                                 // bbs_slave_s0_translator:uav_readdata -> bbs_slave_s0_agent:m0_readdata
	wire          bbs_slave_s0_agent_m0_waitrequest;                                              // bbs_slave_s0_translator:uav_waitrequest -> bbs_slave_s0_agent:m0_waitrequest
	wire          bbs_slave_s0_agent_m0_debugaccess;                                              // bbs_slave_s0_agent:m0_debugaccess -> bbs_slave_s0_translator:uav_debugaccess
	wire   [31:0] bbs_slave_s0_agent_m0_address;                                                  // bbs_slave_s0_agent:m0_address -> bbs_slave_s0_translator:uav_address
	wire    [7:0] bbs_slave_s0_agent_m0_byteenable;                                               // bbs_slave_s0_agent:m0_byteenable -> bbs_slave_s0_translator:uav_byteenable
	wire          bbs_slave_s0_agent_m0_read;                                                     // bbs_slave_s0_agent:m0_read -> bbs_slave_s0_translator:uav_read
	wire          bbs_slave_s0_agent_m0_readdatavalid;                                            // bbs_slave_s0_translator:uav_readdatavalid -> bbs_slave_s0_agent:m0_readdatavalid
	wire          bbs_slave_s0_agent_m0_lock;                                                     // bbs_slave_s0_agent:m0_lock -> bbs_slave_s0_translator:uav_lock
	wire   [63:0] bbs_slave_s0_agent_m0_writedata;                                                // bbs_slave_s0_agent:m0_writedata -> bbs_slave_s0_translator:uav_writedata
	wire          bbs_slave_s0_agent_m0_write;                                                    // bbs_slave_s0_agent:m0_write -> bbs_slave_s0_translator:uav_write
	wire    [3:0] bbs_slave_s0_agent_m0_burstcount;                                               // bbs_slave_s0_agent:m0_burstcount -> bbs_slave_s0_translator:uav_burstcount
	wire          bbs_slave_s0_agent_rf_source_valid;                                             // bbs_slave_s0_agent:rf_source_valid -> bbs_slave_s0_agent_rsp_fifo:in_valid
	wire  [167:0] bbs_slave_s0_agent_rf_source_data;                                              // bbs_slave_s0_agent:rf_source_data -> bbs_slave_s0_agent_rsp_fifo:in_data
	wire          bbs_slave_s0_agent_rf_source_ready;                                             // bbs_slave_s0_agent_rsp_fifo:in_ready -> bbs_slave_s0_agent:rf_source_ready
	wire          bbs_slave_s0_agent_rf_source_startofpacket;                                     // bbs_slave_s0_agent:rf_source_startofpacket -> bbs_slave_s0_agent_rsp_fifo:in_startofpacket
	wire          bbs_slave_s0_agent_rf_source_endofpacket;                                       // bbs_slave_s0_agent:rf_source_endofpacket -> bbs_slave_s0_agent_rsp_fifo:in_endofpacket
	wire          bbs_slave_s0_agent_rsp_fifo_out_valid;                                          // bbs_slave_s0_agent_rsp_fifo:out_valid -> bbs_slave_s0_agent:rf_sink_valid
	wire  [167:0] bbs_slave_s0_agent_rsp_fifo_out_data;                                           // bbs_slave_s0_agent_rsp_fifo:out_data -> bbs_slave_s0_agent:rf_sink_data
	wire          bbs_slave_s0_agent_rsp_fifo_out_ready;                                          // bbs_slave_s0_agent:rf_sink_ready -> bbs_slave_s0_agent_rsp_fifo:out_ready
	wire          bbs_slave_s0_agent_rsp_fifo_out_startofpacket;                                  // bbs_slave_s0_agent_rsp_fifo:out_startofpacket -> bbs_slave_s0_agent:rf_sink_startofpacket
	wire          bbs_slave_s0_agent_rsp_fifo_out_endofpacket;                                    // bbs_slave_s0_agent_rsp_fifo:out_endofpacket -> bbs_slave_s0_agent:rf_sink_endofpacket
	wire          bbs_slave_s0_agent_rdata_fifo_src_valid;                                        // bbs_slave_s0_agent:rdata_fifo_src_valid -> bbs_slave_s0_agent:rdata_fifo_sink_valid
	wire   [65:0] bbs_slave_s0_agent_rdata_fifo_src_data;                                         // bbs_slave_s0_agent:rdata_fifo_src_data -> bbs_slave_s0_agent:rdata_fifo_sink_data
	wire          bbs_slave_s0_agent_rdata_fifo_src_ready;                                        // bbs_slave_s0_agent:rdata_fifo_sink_ready -> bbs_slave_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_valid;                                                          // cmd_mux_001:src_valid -> bbs_slave_s0_agent:cp_valid
	wire  [166:0] cmd_mux_001_src_data;                                                           // cmd_mux_001:src_data -> bbs_slave_s0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                          // bbs_slave_s0_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [7:0] cmd_mux_001_src_channel;                                                        // cmd_mux_001:src_channel -> bbs_slave_s0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                  // cmd_mux_001:src_startofpacket -> bbs_slave_s0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                    // cmd_mux_001:src_endofpacket -> bbs_slave_s0_agent:cp_endofpacket
	wire   [31:0] ccl_csb2wire_csr_s0_agent_m0_readdata;                                          // ccl_csb2wire_csr_s0_translator:uav_readdata -> ccl_csb2wire_csr_s0_agent:m0_readdata
	wire          ccl_csb2wire_csr_s0_agent_m0_waitrequest;                                       // ccl_csb2wire_csr_s0_translator:uav_waitrequest -> ccl_csb2wire_csr_s0_agent:m0_waitrequest
	wire          ccl_csb2wire_csr_s0_agent_m0_debugaccess;                                       // ccl_csb2wire_csr_s0_agent:m0_debugaccess -> ccl_csb2wire_csr_s0_translator:uav_debugaccess
	wire   [31:0] ccl_csb2wire_csr_s0_agent_m0_address;                                           // ccl_csb2wire_csr_s0_agent:m0_address -> ccl_csb2wire_csr_s0_translator:uav_address
	wire    [3:0] ccl_csb2wire_csr_s0_agent_m0_byteenable;                                        // ccl_csb2wire_csr_s0_agent:m0_byteenable -> ccl_csb2wire_csr_s0_translator:uav_byteenable
	wire          ccl_csb2wire_csr_s0_agent_m0_read;                                              // ccl_csb2wire_csr_s0_agent:m0_read -> ccl_csb2wire_csr_s0_translator:uav_read
	wire          ccl_csb2wire_csr_s0_agent_m0_readdatavalid;                                     // ccl_csb2wire_csr_s0_translator:uav_readdatavalid -> ccl_csb2wire_csr_s0_agent:m0_readdatavalid
	wire          ccl_csb2wire_csr_s0_agent_m0_lock;                                              // ccl_csb2wire_csr_s0_agent:m0_lock -> ccl_csb2wire_csr_s0_translator:uav_lock
	wire   [31:0] ccl_csb2wire_csr_s0_agent_m0_writedata;                                         // ccl_csb2wire_csr_s0_agent:m0_writedata -> ccl_csb2wire_csr_s0_translator:uav_writedata
	wire          ccl_csb2wire_csr_s0_agent_m0_write;                                             // ccl_csb2wire_csr_s0_agent:m0_write -> ccl_csb2wire_csr_s0_translator:uav_write
	wire    [2:0] ccl_csb2wire_csr_s0_agent_m0_burstcount;                                        // ccl_csb2wire_csr_s0_agent:m0_burstcount -> ccl_csb2wire_csr_s0_translator:uav_burstcount
	wire          ccl_csb2wire_csr_s0_agent_rf_source_valid;                                      // ccl_csb2wire_csr_s0_agent:rf_source_valid -> ccl_csb2wire_csr_s0_agent_rsp_fifo:in_valid
	wire  [131:0] ccl_csb2wire_csr_s0_agent_rf_source_data;                                       // ccl_csb2wire_csr_s0_agent:rf_source_data -> ccl_csb2wire_csr_s0_agent_rsp_fifo:in_data
	wire          ccl_csb2wire_csr_s0_agent_rf_source_ready;                                      // ccl_csb2wire_csr_s0_agent_rsp_fifo:in_ready -> ccl_csb2wire_csr_s0_agent:rf_source_ready
	wire          ccl_csb2wire_csr_s0_agent_rf_source_startofpacket;                              // ccl_csb2wire_csr_s0_agent:rf_source_startofpacket -> ccl_csb2wire_csr_s0_agent_rsp_fifo:in_startofpacket
	wire          ccl_csb2wire_csr_s0_agent_rf_source_endofpacket;                                // ccl_csb2wire_csr_s0_agent:rf_source_endofpacket -> ccl_csb2wire_csr_s0_agent_rsp_fifo:in_endofpacket
	wire          ccl_csb2wire_csr_s0_agent_rsp_fifo_out_valid;                                   // ccl_csb2wire_csr_s0_agent_rsp_fifo:out_valid -> ccl_csb2wire_csr_s0_agent:rf_sink_valid
	wire  [131:0] ccl_csb2wire_csr_s0_agent_rsp_fifo_out_data;                                    // ccl_csb2wire_csr_s0_agent_rsp_fifo:out_data -> ccl_csb2wire_csr_s0_agent:rf_sink_data
	wire          ccl_csb2wire_csr_s0_agent_rsp_fifo_out_ready;                                   // ccl_csb2wire_csr_s0_agent:rf_sink_ready -> ccl_csb2wire_csr_s0_agent_rsp_fifo:out_ready
	wire          ccl_csb2wire_csr_s0_agent_rsp_fifo_out_startofpacket;                           // ccl_csb2wire_csr_s0_agent_rsp_fifo:out_startofpacket -> ccl_csb2wire_csr_s0_agent:rf_sink_startofpacket
	wire          ccl_csb2wire_csr_s0_agent_rsp_fifo_out_endofpacket;                             // ccl_csb2wire_csr_s0_agent_rsp_fifo:out_endofpacket -> ccl_csb2wire_csr_s0_agent:rf_sink_endofpacket
	wire          ccl_csb2wire_csr_s0_agent_rdata_fifo_src_valid;                                 // ccl_csb2wire_csr_s0_agent:rdata_fifo_src_valid -> ccl_csb2wire_csr_s0_agent_rdata_fifo:in_valid
	wire   [33:0] ccl_csb2wire_csr_s0_agent_rdata_fifo_src_data;                                  // ccl_csb2wire_csr_s0_agent:rdata_fifo_src_data -> ccl_csb2wire_csr_s0_agent_rdata_fifo:in_data
	wire          ccl_csb2wire_csr_s0_agent_rdata_fifo_src_ready;                                 // ccl_csb2wire_csr_s0_agent_rdata_fifo:in_ready -> ccl_csb2wire_csr_s0_agent:rdata_fifo_src_ready
	wire          ccl_csb2wire_csr_s0_agent_rdata_fifo_out_valid;                                 // ccl_csb2wire_csr_s0_agent_rdata_fifo:out_valid -> ccl_csb2wire_csr_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] ccl_csb2wire_csr_s0_agent_rdata_fifo_out_data;                                  // ccl_csb2wire_csr_s0_agent_rdata_fifo:out_data -> ccl_csb2wire_csr_s0_agent:rdata_fifo_sink_data
	wire          ccl_csb2wire_csr_s0_agent_rdata_fifo_out_ready;                                 // ccl_csb2wire_csr_s0_agent:rdata_fifo_sink_ready -> ccl_csb2wire_csr_s0_agent_rdata_fifo:out_ready
	wire   [31:0] ccl_slave_s0_agent_m0_readdata;                                                 // ccl_slave_s0_translator:uav_readdata -> ccl_slave_s0_agent:m0_readdata
	wire          ccl_slave_s0_agent_m0_waitrequest;                                              // ccl_slave_s0_translator:uav_waitrequest -> ccl_slave_s0_agent:m0_waitrequest
	wire          ccl_slave_s0_agent_m0_debugaccess;                                              // ccl_slave_s0_agent:m0_debugaccess -> ccl_slave_s0_translator:uav_debugaccess
	wire   [31:0] ccl_slave_s0_agent_m0_address;                                                  // ccl_slave_s0_agent:m0_address -> ccl_slave_s0_translator:uav_address
	wire    [3:0] ccl_slave_s0_agent_m0_byteenable;                                               // ccl_slave_s0_agent:m0_byteenable -> ccl_slave_s0_translator:uav_byteenable
	wire          ccl_slave_s0_agent_m0_read;                                                     // ccl_slave_s0_agent:m0_read -> ccl_slave_s0_translator:uav_read
	wire          ccl_slave_s0_agent_m0_readdatavalid;                                            // ccl_slave_s0_translator:uav_readdatavalid -> ccl_slave_s0_agent:m0_readdatavalid
	wire          ccl_slave_s0_agent_m0_lock;                                                     // ccl_slave_s0_agent:m0_lock -> ccl_slave_s0_translator:uav_lock
	wire   [31:0] ccl_slave_s0_agent_m0_writedata;                                                // ccl_slave_s0_agent:m0_writedata -> ccl_slave_s0_translator:uav_writedata
	wire          ccl_slave_s0_agent_m0_write;                                                    // ccl_slave_s0_agent:m0_write -> ccl_slave_s0_translator:uav_write
	wire    [2:0] ccl_slave_s0_agent_m0_burstcount;                                               // ccl_slave_s0_agent:m0_burstcount -> ccl_slave_s0_translator:uav_burstcount
	wire          ccl_slave_s0_agent_rf_source_valid;                                             // ccl_slave_s0_agent:rf_source_valid -> ccl_slave_s0_agent_rsp_fifo:in_valid
	wire  [131:0] ccl_slave_s0_agent_rf_source_data;                                              // ccl_slave_s0_agent:rf_source_data -> ccl_slave_s0_agent_rsp_fifo:in_data
	wire          ccl_slave_s0_agent_rf_source_ready;                                             // ccl_slave_s0_agent_rsp_fifo:in_ready -> ccl_slave_s0_agent:rf_source_ready
	wire          ccl_slave_s0_agent_rf_source_startofpacket;                                     // ccl_slave_s0_agent:rf_source_startofpacket -> ccl_slave_s0_agent_rsp_fifo:in_startofpacket
	wire          ccl_slave_s0_agent_rf_source_endofpacket;                                       // ccl_slave_s0_agent:rf_source_endofpacket -> ccl_slave_s0_agent_rsp_fifo:in_endofpacket
	wire          ccl_slave_s0_agent_rsp_fifo_out_valid;                                          // ccl_slave_s0_agent_rsp_fifo:out_valid -> ccl_slave_s0_agent:rf_sink_valid
	wire  [131:0] ccl_slave_s0_agent_rsp_fifo_out_data;                                           // ccl_slave_s0_agent_rsp_fifo:out_data -> ccl_slave_s0_agent:rf_sink_data
	wire          ccl_slave_s0_agent_rsp_fifo_out_ready;                                          // ccl_slave_s0_agent:rf_sink_ready -> ccl_slave_s0_agent_rsp_fifo:out_ready
	wire          ccl_slave_s0_agent_rsp_fifo_out_startofpacket;                                  // ccl_slave_s0_agent_rsp_fifo:out_startofpacket -> ccl_slave_s0_agent:rf_sink_startofpacket
	wire          ccl_slave_s0_agent_rsp_fifo_out_endofpacket;                                    // ccl_slave_s0_agent_rsp_fifo:out_endofpacket -> ccl_slave_s0_agent:rf_sink_endofpacket
	wire          ccl_slave_s0_agent_rdata_fifo_src_valid;                                        // ccl_slave_s0_agent:rdata_fifo_src_valid -> ccl_slave_s0_agent_rdata_fifo:in_valid
	wire   [33:0] ccl_slave_s0_agent_rdata_fifo_src_data;                                         // ccl_slave_s0_agent:rdata_fifo_src_data -> ccl_slave_s0_agent_rdata_fifo:in_data
	wire          ccl_slave_s0_agent_rdata_fifo_src_ready;                                        // ccl_slave_s0_agent_rdata_fifo:in_ready -> ccl_slave_s0_agent:rdata_fifo_src_ready
	wire          ccl_slave_s0_agent_rdata_fifo_out_valid;                                        // ccl_slave_s0_agent_rdata_fifo:out_valid -> ccl_slave_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] ccl_slave_s0_agent_rdata_fifo_out_data;                                         // ccl_slave_s0_agent_rdata_fifo:out_data -> ccl_slave_s0_agent:rdata_fifo_sink_data
	wire          ccl_slave_s0_agent_rdata_fifo_out_ready;                                        // ccl_slave_s0_agent:rdata_fifo_sink_ready -> ccl_slave_s0_agent_rdata_fifo:out_ready
	wire   [63:0] ccv_afu_s0_agent_m0_readdata;                                                   // ccv_afu_s0_translator:uav_readdata -> ccv_afu_s0_agent:m0_readdata
	wire          ccv_afu_s0_agent_m0_waitrequest;                                                // ccv_afu_s0_translator:uav_waitrequest -> ccv_afu_s0_agent:m0_waitrequest
	wire          ccv_afu_s0_agent_m0_debugaccess;                                                // ccv_afu_s0_agent:m0_debugaccess -> ccv_afu_s0_translator:uav_debugaccess
	wire   [31:0] ccv_afu_s0_agent_m0_address;                                                    // ccv_afu_s0_agent:m0_address -> ccv_afu_s0_translator:uav_address
	wire    [7:0] ccv_afu_s0_agent_m0_byteenable;                                                 // ccv_afu_s0_agent:m0_byteenable -> ccv_afu_s0_translator:uav_byteenable
	wire          ccv_afu_s0_agent_m0_read;                                                       // ccv_afu_s0_agent:m0_read -> ccv_afu_s0_translator:uav_read
	wire          ccv_afu_s0_agent_m0_readdatavalid;                                              // ccv_afu_s0_translator:uav_readdatavalid -> ccv_afu_s0_agent:m0_readdatavalid
	wire          ccv_afu_s0_agent_m0_lock;                                                       // ccv_afu_s0_agent:m0_lock -> ccv_afu_s0_translator:uav_lock
	wire   [63:0] ccv_afu_s0_agent_m0_writedata;                                                  // ccv_afu_s0_agent:m0_writedata -> ccv_afu_s0_translator:uav_writedata
	wire          ccv_afu_s0_agent_m0_write;                                                      // ccv_afu_s0_agent:m0_write -> ccv_afu_s0_translator:uav_write
	wire    [3:0] ccv_afu_s0_agent_m0_burstcount;                                                 // ccv_afu_s0_agent:m0_burstcount -> ccv_afu_s0_translator:uav_burstcount
	wire          ccv_afu_s0_agent_rf_source_valid;                                               // ccv_afu_s0_agent:rf_source_valid -> ccv_afu_s0_agent_rsp_fifo:in_valid
	wire  [167:0] ccv_afu_s0_agent_rf_source_data;                                                // ccv_afu_s0_agent:rf_source_data -> ccv_afu_s0_agent_rsp_fifo:in_data
	wire          ccv_afu_s0_agent_rf_source_ready;                                               // ccv_afu_s0_agent_rsp_fifo:in_ready -> ccv_afu_s0_agent:rf_source_ready
	wire          ccv_afu_s0_agent_rf_source_startofpacket;                                       // ccv_afu_s0_agent:rf_source_startofpacket -> ccv_afu_s0_agent_rsp_fifo:in_startofpacket
	wire          ccv_afu_s0_agent_rf_source_endofpacket;                                         // ccv_afu_s0_agent:rf_source_endofpacket -> ccv_afu_s0_agent_rsp_fifo:in_endofpacket
	wire          ccv_afu_s0_agent_rsp_fifo_out_valid;                                            // ccv_afu_s0_agent_rsp_fifo:out_valid -> ccv_afu_s0_agent:rf_sink_valid
	wire  [167:0] ccv_afu_s0_agent_rsp_fifo_out_data;                                             // ccv_afu_s0_agent_rsp_fifo:out_data -> ccv_afu_s0_agent:rf_sink_data
	wire          ccv_afu_s0_agent_rsp_fifo_out_ready;                                            // ccv_afu_s0_agent:rf_sink_ready -> ccv_afu_s0_agent_rsp_fifo:out_ready
	wire          ccv_afu_s0_agent_rsp_fifo_out_startofpacket;                                    // ccv_afu_s0_agent_rsp_fifo:out_startofpacket -> ccv_afu_s0_agent:rf_sink_startofpacket
	wire          ccv_afu_s0_agent_rsp_fifo_out_endofpacket;                                      // ccv_afu_s0_agent_rsp_fifo:out_endofpacket -> ccv_afu_s0_agent:rf_sink_endofpacket
	wire          ccv_afu_s0_agent_rdata_fifo_src_valid;                                          // ccv_afu_s0_agent:rdata_fifo_src_valid -> ccv_afu_s0_agent:rdata_fifo_sink_valid
	wire   [65:0] ccv_afu_s0_agent_rdata_fifo_src_data;                                           // ccv_afu_s0_agent:rdata_fifo_src_data -> ccv_afu_s0_agent:rdata_fifo_sink_data
	wire          ccv_afu_s0_agent_rdata_fifo_src_ready;                                          // ccv_afu_s0_agent:rdata_fifo_sink_ready -> ccv_afu_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                          // cmd_mux_004:src_valid -> ccv_afu_s0_agent:cp_valid
	wire  [166:0] cmd_mux_004_src_data;                                                           // cmd_mux_004:src_data -> ccv_afu_s0_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                          // ccv_afu_s0_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [7:0] cmd_mux_004_src_channel;                                                        // cmd_mux_004:src_channel -> ccv_afu_s0_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                  // cmd_mux_004:src_startofpacket -> ccv_afu_s0_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                    // cmd_mux_004:src_endofpacket -> ccv_afu_s0_agent:cp_endofpacket
	wire   [31:0] cmb2avst_slave_s0_agent_m0_readdata;                                            // cmb2avst_slave_s0_translator:uav_readdata -> cmb2avst_slave_s0_agent:m0_readdata
	wire          cmb2avst_slave_s0_agent_m0_waitrequest;                                         // cmb2avst_slave_s0_translator:uav_waitrequest -> cmb2avst_slave_s0_agent:m0_waitrequest
	wire          cmb2avst_slave_s0_agent_m0_debugaccess;                                         // cmb2avst_slave_s0_agent:m0_debugaccess -> cmb2avst_slave_s0_translator:uav_debugaccess
	wire   [31:0] cmb2avst_slave_s0_agent_m0_address;                                             // cmb2avst_slave_s0_agent:m0_address -> cmb2avst_slave_s0_translator:uav_address
	wire    [3:0] cmb2avst_slave_s0_agent_m0_byteenable;                                          // cmb2avst_slave_s0_agent:m0_byteenable -> cmb2avst_slave_s0_translator:uav_byteenable
	wire          cmb2avst_slave_s0_agent_m0_read;                                                // cmb2avst_slave_s0_agent:m0_read -> cmb2avst_slave_s0_translator:uav_read
	wire          cmb2avst_slave_s0_agent_m0_readdatavalid;                                       // cmb2avst_slave_s0_translator:uav_readdatavalid -> cmb2avst_slave_s0_agent:m0_readdatavalid
	wire          cmb2avst_slave_s0_agent_m0_lock;                                                // cmb2avst_slave_s0_agent:m0_lock -> cmb2avst_slave_s0_translator:uav_lock
	wire   [31:0] cmb2avst_slave_s0_agent_m0_writedata;                                           // cmb2avst_slave_s0_agent:m0_writedata -> cmb2avst_slave_s0_translator:uav_writedata
	wire          cmb2avst_slave_s0_agent_m0_write;                                               // cmb2avst_slave_s0_agent:m0_write -> cmb2avst_slave_s0_translator:uav_write
	wire    [2:0] cmb2avst_slave_s0_agent_m0_burstcount;                                          // cmb2avst_slave_s0_agent:m0_burstcount -> cmb2avst_slave_s0_translator:uav_burstcount
	wire          cmb2avst_slave_s0_agent_rf_source_valid;                                        // cmb2avst_slave_s0_agent:rf_source_valid -> cmb2avst_slave_s0_agent_rsp_fifo:in_valid
	wire  [131:0] cmb2avst_slave_s0_agent_rf_source_data;                                         // cmb2avst_slave_s0_agent:rf_source_data -> cmb2avst_slave_s0_agent_rsp_fifo:in_data
	wire          cmb2avst_slave_s0_agent_rf_source_ready;                                        // cmb2avst_slave_s0_agent_rsp_fifo:in_ready -> cmb2avst_slave_s0_agent:rf_source_ready
	wire          cmb2avst_slave_s0_agent_rf_source_startofpacket;                                // cmb2avst_slave_s0_agent:rf_source_startofpacket -> cmb2avst_slave_s0_agent_rsp_fifo:in_startofpacket
	wire          cmb2avst_slave_s0_agent_rf_source_endofpacket;                                  // cmb2avst_slave_s0_agent:rf_source_endofpacket -> cmb2avst_slave_s0_agent_rsp_fifo:in_endofpacket
	wire          cmb2avst_slave_s0_agent_rsp_fifo_out_valid;                                     // cmb2avst_slave_s0_agent_rsp_fifo:out_valid -> cmb2avst_slave_s0_agent:rf_sink_valid
	wire  [131:0] cmb2avst_slave_s0_agent_rsp_fifo_out_data;                                      // cmb2avst_slave_s0_agent_rsp_fifo:out_data -> cmb2avst_slave_s0_agent:rf_sink_data
	wire          cmb2avst_slave_s0_agent_rsp_fifo_out_ready;                                     // cmb2avst_slave_s0_agent:rf_sink_ready -> cmb2avst_slave_s0_agent_rsp_fifo:out_ready
	wire          cmb2avst_slave_s0_agent_rsp_fifo_out_startofpacket;                             // cmb2avst_slave_s0_agent_rsp_fifo:out_startofpacket -> cmb2avst_slave_s0_agent:rf_sink_startofpacket
	wire          cmb2avst_slave_s0_agent_rsp_fifo_out_endofpacket;                               // cmb2avst_slave_s0_agent_rsp_fifo:out_endofpacket -> cmb2avst_slave_s0_agent:rf_sink_endofpacket
	wire          cmb2avst_slave_s0_agent_rdata_fifo_src_valid;                                   // cmb2avst_slave_s0_agent:rdata_fifo_src_valid -> cmb2avst_slave_s0_agent_rdata_fifo:in_valid
	wire   [33:0] cmb2avst_slave_s0_agent_rdata_fifo_src_data;                                    // cmb2avst_slave_s0_agent:rdata_fifo_src_data -> cmb2avst_slave_s0_agent_rdata_fifo:in_data
	wire          cmb2avst_slave_s0_agent_rdata_fifo_src_ready;                                   // cmb2avst_slave_s0_agent_rdata_fifo:in_ready -> cmb2avst_slave_s0_agent:rdata_fifo_src_ready
	wire          cmb2avst_slave_s0_agent_rdata_fifo_out_valid;                                   // cmb2avst_slave_s0_agent_rdata_fifo:out_valid -> cmb2avst_slave_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] cmb2avst_slave_s0_agent_rdata_fifo_out_data;                                    // cmb2avst_slave_s0_agent_rdata_fifo:out_data -> cmb2avst_slave_s0_agent:rdata_fifo_sink_data
	wire          cmb2avst_slave_s0_agent_rdata_fifo_out_ready;                                   // cmb2avst_slave_s0_agent:rdata_fifo_sink_ready -> cmb2avst_slave_s0_agent_rdata_fifo:out_ready
	wire    [7:0] hip_recfg_slave_s0_agent_m0_readdata;                                           // hip_recfg_slave_s0_translator:uav_readdata -> hip_recfg_slave_s0_agent:m0_readdata
	wire          hip_recfg_slave_s0_agent_m0_waitrequest;                                        // hip_recfg_slave_s0_translator:uav_waitrequest -> hip_recfg_slave_s0_agent:m0_waitrequest
	wire          hip_recfg_slave_s0_agent_m0_debugaccess;                                        // hip_recfg_slave_s0_agent:m0_debugaccess -> hip_recfg_slave_s0_translator:uav_debugaccess
	wire   [31:0] hip_recfg_slave_s0_agent_m0_address;                                            // hip_recfg_slave_s0_agent:m0_address -> hip_recfg_slave_s0_translator:uav_address
	wire    [0:0] hip_recfg_slave_s0_agent_m0_byteenable;                                         // hip_recfg_slave_s0_agent:m0_byteenable -> hip_recfg_slave_s0_translator:uav_byteenable
	wire          hip_recfg_slave_s0_agent_m0_read;                                               // hip_recfg_slave_s0_agent:m0_read -> hip_recfg_slave_s0_translator:uav_read
	wire          hip_recfg_slave_s0_agent_m0_readdatavalid;                                      // hip_recfg_slave_s0_translator:uav_readdatavalid -> hip_recfg_slave_s0_agent:m0_readdatavalid
	wire          hip_recfg_slave_s0_agent_m0_lock;                                               // hip_recfg_slave_s0_agent:m0_lock -> hip_recfg_slave_s0_translator:uav_lock
	wire    [7:0] hip_recfg_slave_s0_agent_m0_writedata;                                          // hip_recfg_slave_s0_agent:m0_writedata -> hip_recfg_slave_s0_translator:uav_writedata
	wire          hip_recfg_slave_s0_agent_m0_write;                                              // hip_recfg_slave_s0_agent:m0_write -> hip_recfg_slave_s0_translator:uav_write
	wire    [0:0] hip_recfg_slave_s0_agent_m0_burstcount;                                         // hip_recfg_slave_s0_agent:m0_burstcount -> hip_recfg_slave_s0_translator:uav_burstcount
	wire          hip_recfg_slave_s0_agent_rf_source_valid;                                       // hip_recfg_slave_s0_agent:rf_source_valid -> hip_recfg_slave_s0_agent_rsp_fifo:in_valid
	wire  [104:0] hip_recfg_slave_s0_agent_rf_source_data;                                        // hip_recfg_slave_s0_agent:rf_source_data -> hip_recfg_slave_s0_agent_rsp_fifo:in_data
	wire          hip_recfg_slave_s0_agent_rf_source_ready;                                       // hip_recfg_slave_s0_agent_rsp_fifo:in_ready -> hip_recfg_slave_s0_agent:rf_source_ready
	wire          hip_recfg_slave_s0_agent_rf_source_startofpacket;                               // hip_recfg_slave_s0_agent:rf_source_startofpacket -> hip_recfg_slave_s0_agent_rsp_fifo:in_startofpacket
	wire          hip_recfg_slave_s0_agent_rf_source_endofpacket;                                 // hip_recfg_slave_s0_agent:rf_source_endofpacket -> hip_recfg_slave_s0_agent_rsp_fifo:in_endofpacket
	wire          hip_recfg_slave_s0_agent_rsp_fifo_out_valid;                                    // hip_recfg_slave_s0_agent_rsp_fifo:out_valid -> hip_recfg_slave_s0_agent:rf_sink_valid
	wire  [104:0] hip_recfg_slave_s0_agent_rsp_fifo_out_data;                                     // hip_recfg_slave_s0_agent_rsp_fifo:out_data -> hip_recfg_slave_s0_agent:rf_sink_data
	wire          hip_recfg_slave_s0_agent_rsp_fifo_out_ready;                                    // hip_recfg_slave_s0_agent:rf_sink_ready -> hip_recfg_slave_s0_agent_rsp_fifo:out_ready
	wire          hip_recfg_slave_s0_agent_rsp_fifo_out_startofpacket;                            // hip_recfg_slave_s0_agent_rsp_fifo:out_startofpacket -> hip_recfg_slave_s0_agent:rf_sink_startofpacket
	wire          hip_recfg_slave_s0_agent_rsp_fifo_out_endofpacket;                              // hip_recfg_slave_s0_agent_rsp_fifo:out_endofpacket -> hip_recfg_slave_s0_agent:rf_sink_endofpacket
	wire          hip_recfg_slave_s0_agent_rdata_fifo_src_valid;                                  // hip_recfg_slave_s0_agent:rdata_fifo_src_valid -> hip_recfg_slave_s0_agent_rdata_fifo:in_valid
	wire    [9:0] hip_recfg_slave_s0_agent_rdata_fifo_src_data;                                   // hip_recfg_slave_s0_agent:rdata_fifo_src_data -> hip_recfg_slave_s0_agent_rdata_fifo:in_data
	wire          hip_recfg_slave_s0_agent_rdata_fifo_src_ready;                                  // hip_recfg_slave_s0_agent_rdata_fifo:in_ready -> hip_recfg_slave_s0_agent:rdata_fifo_src_ready
	wire          hip_recfg_slave_s0_agent_rdata_fifo_out_valid;                                  // hip_recfg_slave_s0_agent_rdata_fifo:out_valid -> hip_recfg_slave_s0_agent:rdata_fifo_sink_valid
	wire    [9:0] hip_recfg_slave_s0_agent_rdata_fifo_out_data;                                   // hip_recfg_slave_s0_agent_rdata_fifo:out_data -> hip_recfg_slave_s0_agent:rdata_fifo_sink_data
	wire          hip_recfg_slave_s0_agent_rdata_fifo_out_ready;                                  // hip_recfg_slave_s0_agent:rdata_fifo_sink_ready -> hip_recfg_slave_s0_agent_rdata_fifo:out_ready
	wire    [7:0] usr_avmm_slave_s0_agent_m0_readdata;                                            // usr_avmm_slave_s0_translator:uav_readdata -> usr_avmm_slave_s0_agent:m0_readdata
	wire          usr_avmm_slave_s0_agent_m0_waitrequest;                                         // usr_avmm_slave_s0_translator:uav_waitrequest -> usr_avmm_slave_s0_agent:m0_waitrequest
	wire          usr_avmm_slave_s0_agent_m0_debugaccess;                                         // usr_avmm_slave_s0_agent:m0_debugaccess -> usr_avmm_slave_s0_translator:uav_debugaccess
	wire   [31:0] usr_avmm_slave_s0_agent_m0_address;                                             // usr_avmm_slave_s0_agent:m0_address -> usr_avmm_slave_s0_translator:uav_address
	wire    [0:0] usr_avmm_slave_s0_agent_m0_byteenable;                                          // usr_avmm_slave_s0_agent:m0_byteenable -> usr_avmm_slave_s0_translator:uav_byteenable
	wire          usr_avmm_slave_s0_agent_m0_read;                                                // usr_avmm_slave_s0_agent:m0_read -> usr_avmm_slave_s0_translator:uav_read
	wire          usr_avmm_slave_s0_agent_m0_readdatavalid;                                       // usr_avmm_slave_s0_translator:uav_readdatavalid -> usr_avmm_slave_s0_agent:m0_readdatavalid
	wire          usr_avmm_slave_s0_agent_m0_lock;                                                // usr_avmm_slave_s0_agent:m0_lock -> usr_avmm_slave_s0_translator:uav_lock
	wire    [7:0] usr_avmm_slave_s0_agent_m0_writedata;                                           // usr_avmm_slave_s0_agent:m0_writedata -> usr_avmm_slave_s0_translator:uav_writedata
	wire          usr_avmm_slave_s0_agent_m0_write;                                               // usr_avmm_slave_s0_agent:m0_write -> usr_avmm_slave_s0_translator:uav_write
	wire    [0:0] usr_avmm_slave_s0_agent_m0_burstcount;                                          // usr_avmm_slave_s0_agent:m0_burstcount -> usr_avmm_slave_s0_translator:uav_burstcount
	wire          usr_avmm_slave_s0_agent_rf_source_valid;                                        // usr_avmm_slave_s0_agent:rf_source_valid -> usr_avmm_slave_s0_agent_rsp_fifo:in_valid
	wire  [104:0] usr_avmm_slave_s0_agent_rf_source_data;                                         // usr_avmm_slave_s0_agent:rf_source_data -> usr_avmm_slave_s0_agent_rsp_fifo:in_data
	wire          usr_avmm_slave_s0_agent_rf_source_ready;                                        // usr_avmm_slave_s0_agent_rsp_fifo:in_ready -> usr_avmm_slave_s0_agent:rf_source_ready
	wire          usr_avmm_slave_s0_agent_rf_source_startofpacket;                                // usr_avmm_slave_s0_agent:rf_source_startofpacket -> usr_avmm_slave_s0_agent_rsp_fifo:in_startofpacket
	wire          usr_avmm_slave_s0_agent_rf_source_endofpacket;                                  // usr_avmm_slave_s0_agent:rf_source_endofpacket -> usr_avmm_slave_s0_agent_rsp_fifo:in_endofpacket
	wire          usr_avmm_slave_s0_agent_rsp_fifo_out_valid;                                     // usr_avmm_slave_s0_agent_rsp_fifo:out_valid -> usr_avmm_slave_s0_agent:rf_sink_valid
	wire  [104:0] usr_avmm_slave_s0_agent_rsp_fifo_out_data;                                      // usr_avmm_slave_s0_agent_rsp_fifo:out_data -> usr_avmm_slave_s0_agent:rf_sink_data
	wire          usr_avmm_slave_s0_agent_rsp_fifo_out_ready;                                     // usr_avmm_slave_s0_agent:rf_sink_ready -> usr_avmm_slave_s0_agent_rsp_fifo:out_ready
	wire          usr_avmm_slave_s0_agent_rsp_fifo_out_startofpacket;                             // usr_avmm_slave_s0_agent_rsp_fifo:out_startofpacket -> usr_avmm_slave_s0_agent:rf_sink_startofpacket
	wire          usr_avmm_slave_s0_agent_rsp_fifo_out_endofpacket;                               // usr_avmm_slave_s0_agent_rsp_fifo:out_endofpacket -> usr_avmm_slave_s0_agent:rf_sink_endofpacket
	wire          usr_avmm_slave_s0_agent_rdata_fifo_src_valid;                                   // usr_avmm_slave_s0_agent:rdata_fifo_src_valid -> usr_avmm_slave_s0_agent_rdata_fifo:in_valid
	wire    [9:0] usr_avmm_slave_s0_agent_rdata_fifo_src_data;                                    // usr_avmm_slave_s0_agent:rdata_fifo_src_data -> usr_avmm_slave_s0_agent_rdata_fifo:in_data
	wire          usr_avmm_slave_s0_agent_rdata_fifo_src_ready;                                   // usr_avmm_slave_s0_agent_rdata_fifo:in_ready -> usr_avmm_slave_s0_agent:rdata_fifo_src_ready
	wire          usr_avmm_slave_s0_agent_rdata_fifo_out_valid;                                   // usr_avmm_slave_s0_agent_rdata_fifo:out_valid -> usr_avmm_slave_s0_agent:rdata_fifo_sink_valid
	wire    [9:0] usr_avmm_slave_s0_agent_rdata_fifo_out_data;                                    // usr_avmm_slave_s0_agent_rdata_fifo:out_data -> usr_avmm_slave_s0_agent:rdata_fifo_sink_data
	wire          usr_avmm_slave_s0_agent_rdata_fifo_out_ready;                                   // usr_avmm_slave_s0_agent:rdata_fifo_sink_ready -> usr_avmm_slave_s0_agent_rdata_fifo:out_ready
	wire          ccl_master_m0_agent_cp_valid;                                                   // ccl_master_m0_agent:cp_valid -> router:sink_valid
	wire  [166:0] ccl_master_m0_agent_cp_data;                                                    // ccl_master_m0_agent:cp_data -> router:sink_data
	wire          ccl_master_m0_agent_cp_ready;                                                   // router:sink_ready -> ccl_master_m0_agent:cp_ready
	wire          ccl_master_m0_agent_cp_startofpacket;                                           // ccl_master_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          ccl_master_m0_agent_cp_endofpacket;                                             // ccl_master_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          usr_access_master_m0_agent_cp_valid;                                            // usr_access_master_m0_agent:cp_valid -> router_001:sink_valid
	wire  [130:0] usr_access_master_m0_agent_cp_data;                                             // usr_access_master_m0_agent:cp_data -> router_001:sink_data
	wire          usr_access_master_m0_agent_cp_ready;                                            // router_001:sink_ready -> usr_access_master_m0_agent:cp_ready
	wire          usr_access_master_m0_agent_cp_startofpacket;                                    // usr_access_master_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          usr_access_master_m0_agent_cp_endofpacket;                                      // usr_access_master_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          debug_master_m0_agent_cp_valid;                                                 // debug_master_m0_agent:cp_valid -> router_002:sink_valid
	wire  [130:0] debug_master_m0_agent_cp_data;                                                  // debug_master_m0_agent:cp_data -> router_002:sink_data
	wire          debug_master_m0_agent_cp_ready;                                                 // router_002:sink_ready -> debug_master_m0_agent:cp_ready
	wire          debug_master_m0_agent_cp_startofpacket;                                         // debug_master_m0_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          debug_master_m0_agent_cp_endofpacket;                                           // debug_master_m0_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          ccl_mirror_master_m0_agent_cp_valid;                                            // ccl_mirror_master_m0_agent:cp_valid -> router_003:sink_valid
	wire  [130:0] ccl_mirror_master_m0_agent_cp_data;                                             // ccl_mirror_master_m0_agent:cp_data -> router_003:sink_data
	wire          ccl_mirror_master_m0_agent_cp_ready;                                            // router_003:sink_ready -> ccl_mirror_master_m0_agent:cp_ready
	wire          ccl_mirror_master_m0_agent_cp_startofpacket;                                    // ccl_mirror_master_m0_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          ccl_mirror_master_m0_agent_cp_endofpacket;                                      // ccl_mirror_master_m0_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                           // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [130:0] router_003_src_data;                                                            // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                           // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [7:0] router_003_src_channel;                                                         // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                   // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                     // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          afu_slave_s0_agent_rp_valid;                                                    // afu_slave_s0_agent:rp_valid -> router_004:sink_valid
	wire  [166:0] afu_slave_s0_agent_rp_data;                                                     // afu_slave_s0_agent:rp_data -> router_004:sink_data
	wire          afu_slave_s0_agent_rp_ready;                                                    // router_004:sink_ready -> afu_slave_s0_agent:rp_ready
	wire          afu_slave_s0_agent_rp_startofpacket;                                            // afu_slave_s0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          afu_slave_s0_agent_rp_endofpacket;                                              // afu_slave_s0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                           // router_004:src_valid -> rsp_demux:sink_valid
	wire  [166:0] router_004_src_data;                                                            // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                           // rsp_demux:sink_ready -> router_004:src_ready
	wire    [7:0] router_004_src_channel;                                                         // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                                   // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                                     // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          bbs_slave_s0_agent_rp_valid;                                                    // bbs_slave_s0_agent:rp_valid -> router_005:sink_valid
	wire  [166:0] bbs_slave_s0_agent_rp_data;                                                     // bbs_slave_s0_agent:rp_data -> router_005:sink_data
	wire          bbs_slave_s0_agent_rp_ready;                                                    // router_005:sink_ready -> bbs_slave_s0_agent:rp_ready
	wire          bbs_slave_s0_agent_rp_startofpacket;                                            // bbs_slave_s0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          bbs_slave_s0_agent_rp_endofpacket;                                              // bbs_slave_s0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                           // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [166:0] router_005_src_data;                                                            // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                           // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [7:0] router_005_src_channel;                                                         // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                                   // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                                     // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          ccl_csb2wire_csr_s0_agent_rp_valid;                                             // ccl_csb2wire_csr_s0_agent:rp_valid -> router_006:sink_valid
	wire  [130:0] ccl_csb2wire_csr_s0_agent_rp_data;                                              // ccl_csb2wire_csr_s0_agent:rp_data -> router_006:sink_data
	wire          ccl_csb2wire_csr_s0_agent_rp_ready;                                             // router_006:sink_ready -> ccl_csb2wire_csr_s0_agent:rp_ready
	wire          ccl_csb2wire_csr_s0_agent_rp_startofpacket;                                     // ccl_csb2wire_csr_s0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          ccl_csb2wire_csr_s0_agent_rp_endofpacket;                                       // ccl_csb2wire_csr_s0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                           // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [130:0] router_006_src_data;                                                            // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                           // rsp_demux_002:sink_ready -> router_006:src_ready
	wire    [7:0] router_006_src_channel;                                                         // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                                   // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                                     // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          ccl_slave_s0_agent_rp_valid;                                                    // ccl_slave_s0_agent:rp_valid -> router_007:sink_valid
	wire  [130:0] ccl_slave_s0_agent_rp_data;                                                     // ccl_slave_s0_agent:rp_data -> router_007:sink_data
	wire          ccl_slave_s0_agent_rp_ready;                                                    // router_007:sink_ready -> ccl_slave_s0_agent:rp_ready
	wire          ccl_slave_s0_agent_rp_startofpacket;                                            // ccl_slave_s0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          ccl_slave_s0_agent_rp_endofpacket;                                              // ccl_slave_s0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                           // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [130:0] router_007_src_data;                                                            // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                           // rsp_demux_003:sink_ready -> router_007:src_ready
	wire    [7:0] router_007_src_channel;                                                         // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                                   // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                                     // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          ccv_afu_s0_agent_rp_valid;                                                      // ccv_afu_s0_agent:rp_valid -> router_008:sink_valid
	wire  [166:0] ccv_afu_s0_agent_rp_data;                                                       // ccv_afu_s0_agent:rp_data -> router_008:sink_data
	wire          ccv_afu_s0_agent_rp_ready;                                                      // router_008:sink_ready -> ccv_afu_s0_agent:rp_ready
	wire          ccv_afu_s0_agent_rp_startofpacket;                                              // ccv_afu_s0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          ccv_afu_s0_agent_rp_endofpacket;                                                // ccv_afu_s0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                           // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [166:0] router_008_src_data;                                                            // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                                           // rsp_demux_004:sink_ready -> router_008:src_ready
	wire    [7:0] router_008_src_channel;                                                         // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                                   // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                                     // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          cmb2avst_slave_s0_agent_rp_valid;                                               // cmb2avst_slave_s0_agent:rp_valid -> router_009:sink_valid
	wire  [130:0] cmb2avst_slave_s0_agent_rp_data;                                                // cmb2avst_slave_s0_agent:rp_data -> router_009:sink_data
	wire          cmb2avst_slave_s0_agent_rp_ready;                                               // router_009:sink_ready -> cmb2avst_slave_s0_agent:rp_ready
	wire          cmb2avst_slave_s0_agent_rp_startofpacket;                                       // cmb2avst_slave_s0_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          cmb2avst_slave_s0_agent_rp_endofpacket;                                         // cmb2avst_slave_s0_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                           // router_009:src_valid -> rsp_demux_005:sink_valid
	wire  [130:0] router_009_src_data;                                                            // router_009:src_data -> rsp_demux_005:sink_data
	wire          router_009_src_ready;                                                           // rsp_demux_005:sink_ready -> router_009:src_ready
	wire    [7:0] router_009_src_channel;                                                         // router_009:src_channel -> rsp_demux_005:sink_channel
	wire          router_009_src_startofpacket;                                                   // router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_009_src_endofpacket;                                                     // router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          hip_recfg_slave_s0_agent_rp_valid;                                              // hip_recfg_slave_s0_agent:rp_valid -> router_010:sink_valid
	wire  [103:0] hip_recfg_slave_s0_agent_rp_data;                                               // hip_recfg_slave_s0_agent:rp_data -> router_010:sink_data
	wire          hip_recfg_slave_s0_agent_rp_ready;                                              // router_010:sink_ready -> hip_recfg_slave_s0_agent:rp_ready
	wire          hip_recfg_slave_s0_agent_rp_startofpacket;                                      // hip_recfg_slave_s0_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          hip_recfg_slave_s0_agent_rp_endofpacket;                                        // hip_recfg_slave_s0_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                           // router_010:src_valid -> rsp_demux_006:sink_valid
	wire  [103:0] router_010_src_data;                                                            // router_010:src_data -> rsp_demux_006:sink_data
	wire          router_010_src_ready;                                                           // rsp_demux_006:sink_ready -> router_010:src_ready
	wire    [7:0] router_010_src_channel;                                                         // router_010:src_channel -> rsp_demux_006:sink_channel
	wire          router_010_src_startofpacket;                                                   // router_010:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_010_src_endofpacket;                                                     // router_010:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          usr_avmm_slave_s0_agent_rp_valid;                                               // usr_avmm_slave_s0_agent:rp_valid -> router_011:sink_valid
	wire  [103:0] usr_avmm_slave_s0_agent_rp_data;                                                // usr_avmm_slave_s0_agent:rp_data -> router_011:sink_data
	wire          usr_avmm_slave_s0_agent_rp_ready;                                               // router_011:sink_ready -> usr_avmm_slave_s0_agent:rp_ready
	wire          usr_avmm_slave_s0_agent_rp_startofpacket;                                       // usr_avmm_slave_s0_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          usr_avmm_slave_s0_agent_rp_endofpacket;                                         // usr_avmm_slave_s0_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                           // router_011:src_valid -> rsp_demux_007:sink_valid
	wire  [103:0] router_011_src_data;                                                            // router_011:src_data -> rsp_demux_007:sink_data
	wire          router_011_src_ready;                                                           // rsp_demux_007:sink_ready -> router_011:src_ready
	wire    [7:0] router_011_src_channel;                                                         // router_011:src_channel -> rsp_demux_007:sink_channel
	wire          router_011_src_startofpacket;                                                   // router_011:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_011_src_endofpacket;                                                     // router_011:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_src_valid;                                                               // router:src_valid -> ccl_master_m0_limiter:cmd_sink_valid
	wire  [166:0] router_src_data;                                                                // router:src_data -> ccl_master_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                               // ccl_master_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [7:0] router_src_channel;                                                             // router:src_channel -> ccl_master_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                       // router:src_startofpacket -> ccl_master_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                         // router:src_endofpacket -> ccl_master_m0_limiter:cmd_sink_endofpacket
	wire  [166:0] ccl_master_m0_limiter_cmd_src_data;                                             // ccl_master_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          ccl_master_m0_limiter_cmd_src_ready;                                            // cmd_demux:sink_ready -> ccl_master_m0_limiter:cmd_src_ready
	wire    [7:0] ccl_master_m0_limiter_cmd_src_channel;                                          // ccl_master_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          ccl_master_m0_limiter_cmd_src_startofpacket;                                    // ccl_master_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          ccl_master_m0_limiter_cmd_src_endofpacket;                                      // ccl_master_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                              // rsp_mux:src_valid -> ccl_master_m0_limiter:rsp_sink_valid
	wire  [166:0] rsp_mux_src_data;                                                               // rsp_mux:src_data -> ccl_master_m0_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                              // ccl_master_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [7:0] rsp_mux_src_channel;                                                            // rsp_mux:src_channel -> ccl_master_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                      // rsp_mux:src_startofpacket -> ccl_master_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                        // rsp_mux:src_endofpacket -> ccl_master_m0_limiter:rsp_sink_endofpacket
	wire          ccl_master_m0_limiter_rsp_src_valid;                                            // ccl_master_m0_limiter:rsp_src_valid -> ccl_master_m0_agent:rp_valid
	wire  [166:0] ccl_master_m0_limiter_rsp_src_data;                                             // ccl_master_m0_limiter:rsp_src_data -> ccl_master_m0_agent:rp_data
	wire          ccl_master_m0_limiter_rsp_src_ready;                                            // ccl_master_m0_agent:rp_ready -> ccl_master_m0_limiter:rsp_src_ready
	wire    [7:0] ccl_master_m0_limiter_rsp_src_channel;                                          // ccl_master_m0_limiter:rsp_src_channel -> ccl_master_m0_agent:rp_channel
	wire          ccl_master_m0_limiter_rsp_src_startofpacket;                                    // ccl_master_m0_limiter:rsp_src_startofpacket -> ccl_master_m0_agent:rp_startofpacket
	wire          ccl_master_m0_limiter_rsp_src_endofpacket;                                      // ccl_master_m0_limiter:rsp_src_endofpacket -> ccl_master_m0_agent:rp_endofpacket
	wire          router_001_src_valid;                                                           // router_001:src_valid -> usr_access_master_m0_limiter:cmd_sink_valid
	wire  [130:0] router_001_src_data;                                                            // router_001:src_data -> usr_access_master_m0_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                           // usr_access_master_m0_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [7:0] router_001_src_channel;                                                         // router_001:src_channel -> usr_access_master_m0_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                   // router_001:src_startofpacket -> usr_access_master_m0_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                     // router_001:src_endofpacket -> usr_access_master_m0_limiter:cmd_sink_endofpacket
	wire  [130:0] usr_access_master_m0_limiter_cmd_src_data;                                      // usr_access_master_m0_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          usr_access_master_m0_limiter_cmd_src_ready;                                     // cmd_demux_001:sink_ready -> usr_access_master_m0_limiter:cmd_src_ready
	wire    [7:0] usr_access_master_m0_limiter_cmd_src_channel;                                   // usr_access_master_m0_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          usr_access_master_m0_limiter_cmd_src_startofpacket;                             // usr_access_master_m0_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          usr_access_master_m0_limiter_cmd_src_endofpacket;                               // usr_access_master_m0_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                          // rsp_mux_001:src_valid -> usr_access_master_m0_limiter:rsp_sink_valid
	wire  [130:0] rsp_mux_001_src_data;                                                           // rsp_mux_001:src_data -> usr_access_master_m0_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                          // usr_access_master_m0_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [7:0] rsp_mux_001_src_channel;                                                        // rsp_mux_001:src_channel -> usr_access_master_m0_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                  // rsp_mux_001:src_startofpacket -> usr_access_master_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                    // rsp_mux_001:src_endofpacket -> usr_access_master_m0_limiter:rsp_sink_endofpacket
	wire          usr_access_master_m0_limiter_rsp_src_valid;                                     // usr_access_master_m0_limiter:rsp_src_valid -> usr_access_master_m0_agent:rp_valid
	wire  [130:0] usr_access_master_m0_limiter_rsp_src_data;                                      // usr_access_master_m0_limiter:rsp_src_data -> usr_access_master_m0_agent:rp_data
	wire          usr_access_master_m0_limiter_rsp_src_ready;                                     // usr_access_master_m0_agent:rp_ready -> usr_access_master_m0_limiter:rsp_src_ready
	wire    [7:0] usr_access_master_m0_limiter_rsp_src_channel;                                   // usr_access_master_m0_limiter:rsp_src_channel -> usr_access_master_m0_agent:rp_channel
	wire          usr_access_master_m0_limiter_rsp_src_startofpacket;                             // usr_access_master_m0_limiter:rsp_src_startofpacket -> usr_access_master_m0_agent:rp_startofpacket
	wire          usr_access_master_m0_limiter_rsp_src_endofpacket;                               // usr_access_master_m0_limiter:rsp_src_endofpacket -> usr_access_master_m0_agent:rp_endofpacket
	wire          router_002_src_valid;                                                           // router_002:src_valid -> debug_master_m0_limiter:cmd_sink_valid
	wire  [130:0] router_002_src_data;                                                            // router_002:src_data -> debug_master_m0_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                           // debug_master_m0_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [7:0] router_002_src_channel;                                                         // router_002:src_channel -> debug_master_m0_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                   // router_002:src_startofpacket -> debug_master_m0_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                     // router_002:src_endofpacket -> debug_master_m0_limiter:cmd_sink_endofpacket
	wire  [130:0] debug_master_m0_limiter_cmd_src_data;                                           // debug_master_m0_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          debug_master_m0_limiter_cmd_src_ready;                                          // cmd_demux_002:sink_ready -> debug_master_m0_limiter:cmd_src_ready
	wire    [7:0] debug_master_m0_limiter_cmd_src_channel;                                        // debug_master_m0_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          debug_master_m0_limiter_cmd_src_startofpacket;                                  // debug_master_m0_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          debug_master_m0_limiter_cmd_src_endofpacket;                                    // debug_master_m0_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                          // rsp_mux_002:src_valid -> debug_master_m0_limiter:rsp_sink_valid
	wire  [130:0] rsp_mux_002_src_data;                                                           // rsp_mux_002:src_data -> debug_master_m0_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                          // debug_master_m0_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [7:0] rsp_mux_002_src_channel;                                                        // rsp_mux_002:src_channel -> debug_master_m0_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                  // rsp_mux_002:src_startofpacket -> debug_master_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                    // rsp_mux_002:src_endofpacket -> debug_master_m0_limiter:rsp_sink_endofpacket
	wire          debug_master_m0_limiter_rsp_src_valid;                                          // debug_master_m0_limiter:rsp_src_valid -> debug_master_m0_agent:rp_valid
	wire  [130:0] debug_master_m0_limiter_rsp_src_data;                                           // debug_master_m0_limiter:rsp_src_data -> debug_master_m0_agent:rp_data
	wire          debug_master_m0_limiter_rsp_src_ready;                                          // debug_master_m0_agent:rp_ready -> debug_master_m0_limiter:rsp_src_ready
	wire    [7:0] debug_master_m0_limiter_rsp_src_channel;                                        // debug_master_m0_limiter:rsp_src_channel -> debug_master_m0_agent:rp_channel
	wire          debug_master_m0_limiter_rsp_src_startofpacket;                                  // debug_master_m0_limiter:rsp_src_startofpacket -> debug_master_m0_agent:rp_startofpacket
	wire          debug_master_m0_limiter_rsp_src_endofpacket;                                    // debug_master_m0_limiter:rsp_src_endofpacket -> debug_master_m0_agent:rp_endofpacket
	wire          cmd_mux_002_src_valid;                                                          // cmd_mux_002:src_valid -> ccl_csb2wire_csr_s0_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_002_src_data;                                                           // cmd_mux_002:src_data -> ccl_csb2wire_csr_s0_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                          // ccl_csb2wire_csr_s0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [7:0] cmd_mux_002_src_channel;                                                        // cmd_mux_002:src_channel -> ccl_csb2wire_csr_s0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                  // cmd_mux_002:src_startofpacket -> ccl_csb2wire_csr_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                    // cmd_mux_002:src_endofpacket -> ccl_csb2wire_csr_s0_burst_adapter:sink0_endofpacket
	wire          ccl_csb2wire_csr_s0_burst_adapter_source0_valid;                                // ccl_csb2wire_csr_s0_burst_adapter:source0_valid -> ccl_csb2wire_csr_s0_agent:cp_valid
	wire  [130:0] ccl_csb2wire_csr_s0_burst_adapter_source0_data;                                 // ccl_csb2wire_csr_s0_burst_adapter:source0_data -> ccl_csb2wire_csr_s0_agent:cp_data
	wire          ccl_csb2wire_csr_s0_burst_adapter_source0_ready;                                // ccl_csb2wire_csr_s0_agent:cp_ready -> ccl_csb2wire_csr_s0_burst_adapter:source0_ready
	wire    [7:0] ccl_csb2wire_csr_s0_burst_adapter_source0_channel;                              // ccl_csb2wire_csr_s0_burst_adapter:source0_channel -> ccl_csb2wire_csr_s0_agent:cp_channel
	wire          ccl_csb2wire_csr_s0_burst_adapter_source0_startofpacket;                        // ccl_csb2wire_csr_s0_burst_adapter:source0_startofpacket -> ccl_csb2wire_csr_s0_agent:cp_startofpacket
	wire          ccl_csb2wire_csr_s0_burst_adapter_source0_endofpacket;                          // ccl_csb2wire_csr_s0_burst_adapter:source0_endofpacket -> ccl_csb2wire_csr_s0_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                          // cmd_mux_003:src_valid -> ccl_slave_s0_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_003_src_data;                                                           // cmd_mux_003:src_data -> ccl_slave_s0_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                          // ccl_slave_s0_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [7:0] cmd_mux_003_src_channel;                                                        // cmd_mux_003:src_channel -> ccl_slave_s0_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                  // cmd_mux_003:src_startofpacket -> ccl_slave_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                    // cmd_mux_003:src_endofpacket -> ccl_slave_s0_burst_adapter:sink0_endofpacket
	wire          ccl_slave_s0_burst_adapter_source0_valid;                                       // ccl_slave_s0_burst_adapter:source0_valid -> ccl_slave_s0_agent:cp_valid
	wire  [130:0] ccl_slave_s0_burst_adapter_source0_data;                                        // ccl_slave_s0_burst_adapter:source0_data -> ccl_slave_s0_agent:cp_data
	wire          ccl_slave_s0_burst_adapter_source0_ready;                                       // ccl_slave_s0_agent:cp_ready -> ccl_slave_s0_burst_adapter:source0_ready
	wire    [7:0] ccl_slave_s0_burst_adapter_source0_channel;                                     // ccl_slave_s0_burst_adapter:source0_channel -> ccl_slave_s0_agent:cp_channel
	wire          ccl_slave_s0_burst_adapter_source0_startofpacket;                               // ccl_slave_s0_burst_adapter:source0_startofpacket -> ccl_slave_s0_agent:cp_startofpacket
	wire          ccl_slave_s0_burst_adapter_source0_endofpacket;                                 // ccl_slave_s0_burst_adapter:source0_endofpacket -> ccl_slave_s0_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                          // cmd_mux_005:src_valid -> cmb2avst_slave_s0_burst_adapter:sink0_valid
	wire  [130:0] cmd_mux_005_src_data;                                                           // cmd_mux_005:src_data -> cmb2avst_slave_s0_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                          // cmb2avst_slave_s0_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [7:0] cmd_mux_005_src_channel;                                                        // cmd_mux_005:src_channel -> cmb2avst_slave_s0_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                  // cmd_mux_005:src_startofpacket -> cmb2avst_slave_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                    // cmd_mux_005:src_endofpacket -> cmb2avst_slave_s0_burst_adapter:sink0_endofpacket
	wire          cmb2avst_slave_s0_burst_adapter_source0_valid;                                  // cmb2avst_slave_s0_burst_adapter:source0_valid -> cmb2avst_slave_s0_agent:cp_valid
	wire  [130:0] cmb2avst_slave_s0_burst_adapter_source0_data;                                   // cmb2avst_slave_s0_burst_adapter:source0_data -> cmb2avst_slave_s0_agent:cp_data
	wire          cmb2avst_slave_s0_burst_adapter_source0_ready;                                  // cmb2avst_slave_s0_agent:cp_ready -> cmb2avst_slave_s0_burst_adapter:source0_ready
	wire    [7:0] cmb2avst_slave_s0_burst_adapter_source0_channel;                                // cmb2avst_slave_s0_burst_adapter:source0_channel -> cmb2avst_slave_s0_agent:cp_channel
	wire          cmb2avst_slave_s0_burst_adapter_source0_startofpacket;                          // cmb2avst_slave_s0_burst_adapter:source0_startofpacket -> cmb2avst_slave_s0_agent:cp_startofpacket
	wire          cmb2avst_slave_s0_burst_adapter_source0_endofpacket;                            // cmb2avst_slave_s0_burst_adapter:source0_endofpacket -> cmb2avst_slave_s0_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                          // cmd_mux_006:src_valid -> hip_recfg_slave_s0_burst_adapter:sink0_valid
	wire  [103:0] cmd_mux_006_src_data;                                                           // cmd_mux_006:src_data -> hip_recfg_slave_s0_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                          // hip_recfg_slave_s0_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire    [7:0] cmd_mux_006_src_channel;                                                        // cmd_mux_006:src_channel -> hip_recfg_slave_s0_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                  // cmd_mux_006:src_startofpacket -> hip_recfg_slave_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                    // cmd_mux_006:src_endofpacket -> hip_recfg_slave_s0_burst_adapter:sink0_endofpacket
	wire          hip_recfg_slave_s0_burst_adapter_source0_valid;                                 // hip_recfg_slave_s0_burst_adapter:source0_valid -> hip_recfg_slave_s0_agent:cp_valid
	wire  [103:0] hip_recfg_slave_s0_burst_adapter_source0_data;                                  // hip_recfg_slave_s0_burst_adapter:source0_data -> hip_recfg_slave_s0_agent:cp_data
	wire          hip_recfg_slave_s0_burst_adapter_source0_ready;                                 // hip_recfg_slave_s0_agent:cp_ready -> hip_recfg_slave_s0_burst_adapter:source0_ready
	wire    [7:0] hip_recfg_slave_s0_burst_adapter_source0_channel;                               // hip_recfg_slave_s0_burst_adapter:source0_channel -> hip_recfg_slave_s0_agent:cp_channel
	wire          hip_recfg_slave_s0_burst_adapter_source0_startofpacket;                         // hip_recfg_slave_s0_burst_adapter:source0_startofpacket -> hip_recfg_slave_s0_agent:cp_startofpacket
	wire          hip_recfg_slave_s0_burst_adapter_source0_endofpacket;                           // hip_recfg_slave_s0_burst_adapter:source0_endofpacket -> hip_recfg_slave_s0_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                          // cmd_mux_007:src_valid -> usr_avmm_slave_s0_burst_adapter:sink0_valid
	wire  [103:0] cmd_mux_007_src_data;                                                           // cmd_mux_007:src_data -> usr_avmm_slave_s0_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                          // usr_avmm_slave_s0_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire    [7:0] cmd_mux_007_src_channel;                                                        // cmd_mux_007:src_channel -> usr_avmm_slave_s0_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                  // cmd_mux_007:src_startofpacket -> usr_avmm_slave_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                    // cmd_mux_007:src_endofpacket -> usr_avmm_slave_s0_burst_adapter:sink0_endofpacket
	wire          usr_avmm_slave_s0_burst_adapter_source0_valid;                                  // usr_avmm_slave_s0_burst_adapter:source0_valid -> usr_avmm_slave_s0_agent:cp_valid
	wire  [103:0] usr_avmm_slave_s0_burst_adapter_source0_data;                                   // usr_avmm_slave_s0_burst_adapter:source0_data -> usr_avmm_slave_s0_agent:cp_data
	wire          usr_avmm_slave_s0_burst_adapter_source0_ready;                                  // usr_avmm_slave_s0_agent:cp_ready -> usr_avmm_slave_s0_burst_adapter:source0_ready
	wire    [7:0] usr_avmm_slave_s0_burst_adapter_source0_channel;                                // usr_avmm_slave_s0_burst_adapter:source0_channel -> usr_avmm_slave_s0_agent:cp_channel
	wire          usr_avmm_slave_s0_burst_adapter_source0_startofpacket;                          // usr_avmm_slave_s0_burst_adapter:source0_startofpacket -> usr_avmm_slave_s0_agent:cp_startofpacket
	wire          usr_avmm_slave_s0_burst_adapter_source0_endofpacket;                            // usr_avmm_slave_s0_burst_adapter:source0_endofpacket -> usr_avmm_slave_s0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [166:0] cmd_demux_src0_data;                                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [7:0] cmd_demux_src0_channel;                                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                           // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [166:0] cmd_demux_src1_data;                                                            // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                           // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [7:0] cmd_demux_src1_channel;                                                         // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                   // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                     // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                           // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [166:0] cmd_demux_src4_data;                                                            // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                           // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [7:0] cmd_demux_src4_channel;                                                         // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                   // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                     // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                       // cmd_demux_001:src2_valid -> cmd_mux_003:sink1_valid
	wire  [130:0] cmd_demux_001_src2_data;                                                        // cmd_demux_001:src2_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src2_ready;                                                       // cmd_mux_003:sink1_ready -> cmd_demux_001:src2_ready
	wire    [7:0] cmd_demux_001_src2_channel;                                                     // cmd_demux_001:src2_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                               // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                 // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                       // cmd_demux_002:src1_valid -> cmd_mux_002:sink1_valid
	wire  [130:0] cmd_demux_002_src1_data;                                                        // cmd_demux_002:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_002_src1_ready;                                                       // cmd_mux_002:sink1_ready -> cmd_demux_002:src1_ready
	wire    [7:0] cmd_demux_002_src1_channel;                                                     // cmd_demux_002:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_002_src1_startofpacket;                                               // cmd_demux_002:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                 // cmd_demux_002:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_002_src2_valid;                                                       // cmd_demux_002:src2_valid -> cmd_mux_003:sink2_valid
	wire  [130:0] cmd_demux_002_src2_data;                                                        // cmd_demux_002:src2_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src2_ready;                                                       // cmd_mux_003:sink2_ready -> cmd_demux_002:src2_ready
	wire    [7:0] cmd_demux_002_src2_channel;                                                     // cmd_demux_002:src2_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src2_startofpacket;                                               // cmd_demux_002:src2_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                 // cmd_demux_002:src2_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [166:0] rsp_demux_src0_data;                                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [7:0] rsp_demux_src0_channel;                                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                       // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [166:0] rsp_demux_001_src0_data;                                                        // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                       // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [7:0] rsp_demux_001_src0_channel;                                                     // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                               // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                 // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                                       // rsp_demux_002:src1_valid -> rsp_mux_002:sink1_valid
	wire  [130:0] rsp_demux_002_src1_data;                                                        // rsp_demux_002:src1_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_002_src1_ready;                                                       // rsp_mux_002:sink1_ready -> rsp_demux_002:src1_ready
	wire    [7:0] rsp_demux_002_src1_channel;                                                     // rsp_demux_002:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                               // rsp_demux_002:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                 // rsp_demux_002:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_003_src1_valid;                                                       // rsp_demux_003:src1_valid -> rsp_mux_001:sink2_valid
	wire  [130:0] rsp_demux_003_src1_data;                                                        // rsp_demux_003:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_003_src1_ready;                                                       // rsp_mux_001:sink2_ready -> rsp_demux_003:src1_ready
	wire    [7:0] rsp_demux_003_src1_channel;                                                     // rsp_demux_003:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_003_src1_startofpacket;                                               // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                 // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src2_valid;                                                       // rsp_demux_003:src2_valid -> rsp_mux_002:sink2_valid
	wire  [130:0] rsp_demux_003_src2_data;                                                        // rsp_demux_003:src2_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_003_src2_ready;                                                       // rsp_mux_002:sink2_ready -> rsp_demux_003:src2_ready
	wire    [7:0] rsp_demux_003_src2_channel;                                                     // rsp_demux_003:src2_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_003_src2_startofpacket;                                               // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                 // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_004_src0_valid;                                                       // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [166:0] rsp_demux_004_src0_data;                                                        // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                       // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [7:0] rsp_demux_004_src0_channel;                                                     // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                               // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                 // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          cmd_demux_src2_valid;                                                           // cmd_demux:src2_valid -> ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_src2_data;                                                            // cmd_demux:src2_data -> ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:in_data
	wire          cmd_demux_src2_ready;                                                           // ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:in_ready -> cmd_demux:src2_ready
	wire    [7:0] cmd_demux_src2_channel;                                                         // cmd_demux:src2_channel -> ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_src2_startofpacket;                                                   // cmd_demux:src2_startofpacket -> ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                     // cmd_demux:src2_endofpacket -> ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:in_endofpacket
	wire          ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_valid;               // ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:out_valid -> cmd_mux_002:sink0_valid
	wire  [130:0] ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_data;                // ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:out_data -> cmd_mux_002:sink0_data
	wire          ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_ready;               // cmd_mux_002:sink0_ready -> ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:out_ready
	wire    [7:0] ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_channel;             // ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:out_channel -> cmd_mux_002:sink0_channel
	wire          ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_startofpacket;       // ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_endofpacket;         // ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                           // cmd_demux:src3_valid -> ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_src3_data;                                                            // cmd_demux:src3_data -> ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_src3_ready;                                                           // ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:in_ready -> cmd_demux:src3_ready
	wire    [7:0] cmd_demux_src3_channel;                                                         // cmd_demux:src3_channel -> ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_src3_startofpacket;                                                   // cmd_demux:src3_startofpacket -> ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                     // cmd_demux:src3_endofpacket -> ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:in_endofpacket
	wire          ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_valid;                      // ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire  [130:0] ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_data;                       // ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_ready;                      // cmd_mux_003:sink0_ready -> ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_channel;                    // ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_startofpacket;              // ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_endofpacket;                // ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                           // cmd_demux:src5_valid -> ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_src5_data;                                                            // cmd_demux:src5_data -> ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_src5_ready;                                                           // ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:in_ready -> cmd_demux:src5_ready
	wire    [7:0] cmd_demux_src5_channel;                                                         // cmd_demux:src5_channel -> ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_src5_startofpacket;                                                   // cmd_demux:src5_startofpacket -> ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                     // cmd_demux:src5_endofpacket -> ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:in_endofpacket
	wire          ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_valid;                 // ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_005:sink0_valid
	wire  [130:0] ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_data;                  // ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:out_data -> cmd_mux_005:sink0_data
	wire          ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_ready;                 // cmd_mux_005:sink0_ready -> ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_channel;               // ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_005:sink0_channel
	wire          ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_startofpacket;         // ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_endofpacket;           // ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                           // cmd_demux:src6_valid -> ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_valid
	wire  [166:0] cmd_demux_src6_data;                                                            // cmd_demux:src6_data -> ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_src6_ready;                                                           // ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_ready -> cmd_demux:src6_ready
	wire    [7:0] cmd_demux_src6_channel;                                                         // cmd_demux:src6_channel -> ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_src6_startofpacket;                                                   // cmd_demux:src6_startofpacket -> ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                     // cmd_demux:src6_endofpacket -> ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_endofpacket
	wire          ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid;                // ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_006:sink0_valid
	wire  [103:0] ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data;                 // ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_data -> cmd_mux_006:sink0_data
	wire          ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready;                // cmd_mux_006:sink0_ready -> ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel;              // ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_006:sink0_channel
	wire          ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket;        // ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket;          // ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                       // cmd_demux_001:src0_valid -> usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_001_src0_data;                                                        // cmd_demux_001:src0_data -> usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                       // usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [7:0] cmd_demux_001_src0_channel;                                                     // cmd_demux_001:src0_channel -> usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                               // cmd_demux_001:src0_startofpacket -> usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                 // cmd_demux_001:src0_endofpacket -> usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:in_endofpacket
	wire          usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_valid;               // usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire  [166:0] usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_data;                // usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_ready;               // cmd_mux:sink1_ready -> usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_channel;             // usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_startofpacket;       // usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_endofpacket;         // usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                       // cmd_demux_001:src1_valid -> usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_001_src1_data;                                                        // cmd_demux_001:src1_data -> usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                       // usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire    [7:0] cmd_demux_001_src1_channel;                                                     // cmd_demux_001:src1_channel -> usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                               // cmd_demux_001:src1_startofpacket -> usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                 // cmd_demux_001:src1_endofpacket -> usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_endofpacket
	wire          usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_valid;               // usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_001:sink1_valid
	wire  [166:0] usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_data;                // usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_data -> cmd_mux_001:sink1_data
	wire          usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_ready;               // cmd_mux_001:sink1_ready -> usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_channel;             // usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_001:sink1_channel
	wire          usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_startofpacket;       // usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_endofpacket;         // usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                       // cmd_demux_001:src3_valid -> usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_001_src3_data;                                                        // cmd_demux_001:src3_data -> usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_data
	wire          cmd_demux_001_src3_ready;                                                       // usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_ready -> cmd_demux_001:src3_ready
	wire    [7:0] cmd_demux_001_src3_channel;                                                     // cmd_demux_001:src3_channel -> usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                               // cmd_demux_001:src3_startofpacket -> usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                 // cmd_demux_001:src3_endofpacket -> usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_endofpacket
	wire          usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_valid;                 // usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_valid -> cmd_mux_004:sink1_valid
	wire  [166:0] usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_data;                  // usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_data -> cmd_mux_004:sink1_data
	wire          usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_ready;                 // cmd_mux_004:sink1_ready -> usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_ready
	wire    [7:0] usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_channel;               // usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_channel -> cmd_mux_004:sink1_channel
	wire          usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_startofpacket;         // usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_endofpacket;           // usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                       // cmd_demux_001:src4_valid -> usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_001_src4_data;                                                        // cmd_demux_001:src4_data -> usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_001_src4_ready;                                                       // usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_ready -> cmd_demux_001:src4_ready
	wire    [7:0] cmd_demux_001_src4_channel;                                                     // cmd_demux_001:src4_channel -> usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                               // cmd_demux_001:src4_startofpacket -> usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                 // cmd_demux_001:src4_endofpacket -> usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_endofpacket
	wire          usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid;         // usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_006:sink1_valid
	wire  [103:0] usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data;          // usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_data -> cmd_mux_006:sink1_data
	wire          usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready;         // cmd_mux_006:sink1_ready -> usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel;       // usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_006:sink1_channel
	wire          usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket; // usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket;   // usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                       // cmd_demux_001:src5_valid -> usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_001_src5_data;                                                        // cmd_demux_001:src5_data -> usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_001_src5_ready;                                                       // usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_ready -> cmd_demux_001:src5_ready
	wire    [7:0] cmd_demux_001_src5_channel;                                                     // cmd_demux_001:src5_channel -> usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                               // cmd_demux_001:src5_startofpacket -> usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                 // cmd_demux_001:src5_endofpacket -> usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_endofpacket
	wire          usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_valid;          // usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_007:sink0_valid
	wire  [103:0] usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_data;           // usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_data -> cmd_mux_007:sink0_data
	wire          usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_ready;          // cmd_mux_007:sink0_ready -> usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_channel;        // usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_007:sink0_channel
	wire          usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_startofpacket;  // usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_endofpacket;    // usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                       // cmd_demux_002:src0_valid -> debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_002_src0_data;                                                        // cmd_demux_002:src0_data -> debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_002_src0_ready;                                                       // debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_ready -> cmd_demux_002:src0_ready
	wire    [7:0] cmd_demux_002_src0_channel;                                                     // cmd_demux_002:src0_channel -> debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                               // cmd_demux_002:src0_startofpacket -> debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                 // cmd_demux_002:src0_endofpacket -> debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:in_endofpacket
	wire          debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_valid;                    // debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_001:sink2_valid
	wire  [166:0] debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_data;                     // debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_data -> cmd_mux_001:sink2_data
	wire          debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_ready;                    // cmd_mux_001:sink2_ready -> debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_channel;                  // debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_001:sink2_channel
	wire          debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_startofpacket;            // debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_endofpacket;              // debug_master_m0_to_bbs_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                       // cmd_demux_002:src3_valid -> debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_002_src3_data;                                                        // cmd_demux_002:src3_data -> debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_data
	wire          cmd_demux_002_src3_ready;                                                       // debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_ready -> cmd_demux_002:src3_ready
	wire    [7:0] cmd_demux_002_src3_channel;                                                     // cmd_demux_002:src3_channel -> debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src3_startofpacket;                                               // cmd_demux_002:src3_startofpacket -> debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                 // cmd_demux_002:src3_endofpacket -> debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:in_endofpacket
	wire          debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_valid;                      // debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_valid -> cmd_mux_004:sink2_valid
	wire  [166:0] debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_data;                       // debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_data -> cmd_mux_004:sink2_data
	wire          debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_ready;                      // cmd_mux_004:sink2_ready -> debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_ready
	wire    [7:0] debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_channel;                    // debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_channel -> cmd_mux_004:sink2_channel
	wire          debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_startofpacket;              // debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_endofpacket;                // debug_master_m0_to_ccv_afu_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src4_valid;                                                       // cmd_demux_002:src4_valid -> debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_002_src4_data;                                                        // cmd_demux_002:src4_data -> debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_002_src4_ready;                                                       // debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_ready -> cmd_demux_002:src4_ready
	wire    [7:0] cmd_demux_002_src4_channel;                                                     // cmd_demux_002:src4_channel -> debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src4_startofpacket;                                               // cmd_demux_002:src4_startofpacket -> debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                 // cmd_demux_002:src4_endofpacket -> debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_endofpacket
	wire          debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid;              // debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_006:sink2_valid
	wire  [103:0] debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data;               // debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_data -> cmd_mux_006:sink2_data
	wire          debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready;              // cmd_mux_006:sink2_ready -> debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel;            // debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_006:sink2_channel
	wire          debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket;      // debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket;        // debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_002_src5_valid;                                                       // cmd_demux_002:src5_valid -> debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_002_src5_data;                                                        // cmd_demux_002:src5_data -> debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_002_src5_ready;                                                       // debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_ready -> cmd_demux_002:src5_ready
	wire    [7:0] cmd_demux_002_src5_channel;                                                     // cmd_demux_002:src5_channel -> debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src5_startofpacket;                                               // cmd_demux_002:src5_startofpacket -> debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                 // cmd_demux_002:src5_endofpacket -> debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:in_endofpacket
	wire          debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_valid;               // debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_007:sink1_valid
	wire  [103:0] debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_data;                // debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_data -> cmd_mux_007:sink1_data
	wire          debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_ready;               // cmd_mux_007:sink1_ready -> debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_channel;             // debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_007:sink1_channel
	wire          debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_startofpacket;       // debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_endofpacket;         // debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_003_src0_valid;                                                       // cmd_demux_003:src0_valid -> ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_valid
	wire  [130:0] cmd_demux_003_src0_data;                                                        // cmd_demux_003:src0_data -> ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_data
	wire          cmd_demux_003_src0_ready;                                                       // ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_ready -> cmd_demux_003:src0_ready
	wire    [7:0] cmd_demux_003_src0_channel;                                                     // cmd_demux_003:src0_channel -> ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                               // cmd_demux_003:src0_startofpacket -> ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                 // cmd_demux_003:src0_endofpacket -> ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:in_endofpacket
	wire          ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid;         // ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_valid -> cmd_mux_006:sink3_valid
	wire  [103:0] ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data;          // ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_data -> cmd_mux_006:sink3_data
	wire          ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready;         // cmd_mux_006:sink3_ready -> ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_ready
	wire    [7:0] ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel;       // ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_channel -> cmd_mux_006:sink3_channel
	wire          ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket; // ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_startofpacket -> cmd_mux_006:sink3_startofpacket
	wire          ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket;   // ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter:out_endofpacket -> cmd_mux_006:sink3_endofpacket
	wire          rsp_demux_src1_valid;                                                           // rsp_demux:src1_valid -> afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_valid
	wire  [166:0] rsp_demux_src1_data;                                                            // rsp_demux:src1_data -> afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                           // afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire    [7:0] rsp_demux_src1_channel;                                                         // rsp_demux:src1_channel -> afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                   // rsp_demux:src1_startofpacket -> afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                     // rsp_demux:src1_endofpacket -> afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_endofpacket
	wire          afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid;               // afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [130:0] afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data;                // afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready;               // rsp_mux_001:sink0_ready -> afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel;             // afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket;       // afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket;         // afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                       // rsp_demux_001:src1_valid -> bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_valid
	wire  [166:0] rsp_demux_001_src1_data;                                                        // rsp_demux_001:src1_data -> bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_001_src1_ready;                                                       // bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_ready -> rsp_demux_001:src1_ready
	wire    [7:0] rsp_demux_001_src1_channel;                                                     // rsp_demux_001:src1_channel -> bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                               // rsp_demux_001:src1_startofpacket -> bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                 // rsp_demux_001:src1_endofpacket -> bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_endofpacket
	wire          bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid;               // bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [130:0] bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data;                // bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready;               // rsp_mux_001:sink1_ready -> bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel;             // bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket;       // bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket;         // bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                                       // rsp_demux_001:src2_valid -> bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:in_valid
	wire  [166:0] rsp_demux_001_src2_data;                                                        // rsp_demux_001:src2_data -> bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_001_src2_ready;                                                       // bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:in_ready -> rsp_demux_001:src2_ready
	wire    [7:0] rsp_demux_001_src2_channel;                                                     // rsp_demux_001:src2_channel -> bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src2_startofpacket;                                               // rsp_demux_001:src2_startofpacket -> bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                 // rsp_demux_001:src2_endofpacket -> bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:in_endofpacket
	wire          bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_valid;                    // bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:out_valid -> rsp_mux_002:sink0_valid
	wire  [130:0] bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_data;                     // bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:out_data -> rsp_mux_002:sink0_data
	wire          bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_ready;                    // rsp_mux_002:sink0_ready -> bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_channel;                  // bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:out_channel -> rsp_mux_002:sink0_channel
	wire          bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket;            // bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket;              // bbs_slave_s0_to_debug_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                       // rsp_demux_002:src0_valid -> ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:in_valid
	wire  [130:0] rsp_demux_002_src0_data;                                                        // rsp_demux_002:src0_data -> ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_002_src0_ready;                                                       // ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:in_ready -> rsp_demux_002:src0_ready
	wire    [7:0] rsp_demux_002_src0_channel;                                                     // rsp_demux_002:src0_channel -> ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                               // rsp_demux_002:src0_startofpacket -> ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                 // rsp_demux_002:src0_endofpacket -> ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:in_endofpacket
	wire          ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_valid;               // ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:out_valid -> rsp_mux:sink2_valid
	wire  [166:0] ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_data;                // ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:out_data -> rsp_mux:sink2_data
	wire          ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_ready;               // rsp_mux:sink2_ready -> ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_channel;             // ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:out_channel -> rsp_mux:sink2_channel
	wire          ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket;       // ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket;         // ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                       // rsp_demux_003:src0_valid -> ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_valid
	wire  [130:0] rsp_demux_003_src0_data;                                                        // rsp_demux_003:src0_data -> ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_003_src0_ready;                                                       // ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire    [7:0] rsp_demux_003_src0_channel;                                                     // rsp_demux_003:src0_channel -> ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                               // rsp_demux_003:src0_startofpacket -> ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                 // rsp_demux_003:src0_endofpacket -> ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_endofpacket
	wire          ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_valid;                      // ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_valid -> rsp_mux:sink3_valid
	wire  [166:0] ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_data;                       // ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_data -> rsp_mux:sink3_data
	wire          ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_ready;                      // rsp_mux:sink3_ready -> ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_channel;                    // ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_channel -> rsp_mux:sink3_channel
	wire          ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket;              // ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket;                // ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src1_valid;                                                       // rsp_demux_004:src1_valid -> ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:in_valid
	wire  [166:0] rsp_demux_004_src1_data;                                                        // rsp_demux_004:src1_data -> ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_004_src1_ready;                                                       // ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:in_ready -> rsp_demux_004:src1_ready
	wire    [7:0] rsp_demux_004_src1_channel;                                                     // rsp_demux_004:src1_channel -> ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                               // rsp_demux_004:src1_startofpacket -> ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                 // rsp_demux_004:src1_endofpacket -> ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:in_endofpacket
	wire          ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid;                 // ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:out_valid -> rsp_mux_001:sink3_valid
	wire  [130:0] ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_data;                  // ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:out_data -> rsp_mux_001:sink3_data
	wire          ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready;                 // rsp_mux_001:sink3_ready -> ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel;               // ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:out_channel -> rsp_mux_001:sink3_channel
	wire          ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket;         // ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket;           // ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src2_valid;                                                       // rsp_demux_004:src2_valid -> ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:in_valid
	wire  [166:0] rsp_demux_004_src2_data;                                                        // rsp_demux_004:src2_data -> ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_004_src2_ready;                                                       // ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:in_ready -> rsp_demux_004:src2_ready
	wire    [7:0] rsp_demux_004_src2_channel;                                                     // rsp_demux_004:src2_channel -> ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src2_startofpacket;                                               // rsp_demux_004:src2_startofpacket -> ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                 // rsp_demux_004:src2_endofpacket -> ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:in_endofpacket
	wire          ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_valid;                      // ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:out_valid -> rsp_mux_002:sink3_valid
	wire  [130:0] ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_data;                       // ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:out_data -> rsp_mux_002:sink3_data
	wire          ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_ready;                      // rsp_mux_002:sink3_ready -> ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_channel;                    // ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:out_channel -> rsp_mux_002:sink3_channel
	wire          ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket;              // ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket;                // ccv_afu_s0_to_debug_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_005_src0_valid;                                                       // rsp_demux_005:src0_valid -> cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_valid
	wire  [130:0] rsp_demux_005_src0_data;                                                        // rsp_demux_005:src0_data -> cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_005_src0_ready;                                                       // cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_ready -> rsp_demux_005:src0_ready
	wire    [7:0] rsp_demux_005_src0_channel;                                                     // rsp_demux_005:src0_channel -> cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                               // rsp_demux_005:src0_startofpacket -> cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                 // rsp_demux_005:src0_endofpacket -> cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_endofpacket
	wire          cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_valid;                 // cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_valid -> rsp_mux:sink5_valid
	wire  [166:0] cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_data;                  // cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_data -> rsp_mux:sink5_data
	wire          cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_ready;                 // rsp_mux:sink5_ready -> cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_channel;               // cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_channel -> rsp_mux:sink5_channel
	wire          cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket;         // cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket;           // cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                       // rsp_demux_006:src0_valid -> hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_valid
	wire  [103:0] rsp_demux_006_src0_data;                                                        // rsp_demux_006:src0_data -> hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_006_src0_ready;                                                       // hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_ready -> rsp_demux_006:src0_ready
	wire    [7:0] rsp_demux_006_src0_channel;                                                     // rsp_demux_006:src0_channel -> hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                               // rsp_demux_006:src0_startofpacket -> hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                 // rsp_demux_006:src0_endofpacket -> hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:in_endofpacket
	wire          hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_valid;                // hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_valid -> rsp_mux:sink6_valid
	wire  [166:0] hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_data;                 // hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_data -> rsp_mux:sink6_data
	wire          hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_ready;                // rsp_mux:sink6_ready -> hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_channel;              // hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_channel -> rsp_mux:sink6_channel
	wire          hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket;        // hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket;          // hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                       // rsp_demux_006:src1_valid -> hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_valid
	wire  [103:0] rsp_demux_006_src1_data;                                                        // rsp_demux_006:src1_data -> hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_006_src1_ready;                                                       // hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_ready -> rsp_demux_006:src1_ready
	wire    [7:0] rsp_demux_006_src1_channel;                                                     // rsp_demux_006:src1_channel -> hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src1_startofpacket;                                               // rsp_demux_006:src1_startofpacket -> hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                 // rsp_demux_006:src1_endofpacket -> hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_endofpacket
	wire          hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid;         // hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_valid -> rsp_mux_001:sink4_valid
	wire  [130:0] hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data;          // hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_data -> rsp_mux_001:sink4_data
	wire          hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready;         // rsp_mux_001:sink4_ready -> hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel;       // hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_channel -> rsp_mux_001:sink4_channel
	wire          hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket; // hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket;   // hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_006_src2_valid;                                                       // rsp_demux_006:src2_valid -> hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:in_valid
	wire  [103:0] rsp_demux_006_src2_data;                                                        // rsp_demux_006:src2_data -> hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_006_src2_ready;                                                       // hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:in_ready -> rsp_demux_006:src2_ready
	wire    [7:0] rsp_demux_006_src2_channel;                                                     // rsp_demux_006:src2_channel -> hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src2_startofpacket;                                               // rsp_demux_006:src2_startofpacket -> hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                 // rsp_demux_006:src2_endofpacket -> hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:in_endofpacket
	wire          hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_valid;              // hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:out_valid -> rsp_mux_002:sink4_valid
	wire  [130:0] hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_data;               // hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:out_data -> rsp_mux_002:sink4_data
	wire          hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_ready;              // rsp_mux_002:sink4_ready -> hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_channel;            // hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:out_channel -> rsp_mux_002:sink4_channel
	wire          hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket;      // hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket;        // hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_006_src3_valid;                                                       // rsp_demux_006:src3_valid -> hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:in_valid
	wire  [103:0] rsp_demux_006_src3_data;                                                        // rsp_demux_006:src3_data -> hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_006_src3_ready;                                                       // hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:in_ready -> rsp_demux_006:src3_ready
	wire    [7:0] rsp_demux_006_src3_channel;                                                     // rsp_demux_006:src3_channel -> hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_006_src3_startofpacket;                                               // rsp_demux_006:src3_startofpacket -> hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_006_src3_endofpacket;                                                 // rsp_demux_006:src3_endofpacket -> hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:in_endofpacket
	wire          hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_valid;         // hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:out_valid -> rsp_mux_003:sink0_valid
	wire  [130:0] hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_data;          // hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:out_data -> rsp_mux_003:sink0_data
	wire          hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_ready;         // rsp_mux_003:sink0_ready -> hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_channel;       // hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:out_channel -> rsp_mux_003:sink0_channel
	wire          hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_startofpacket; // hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_endofpacket;   // hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_007_src0_valid;                                                       // rsp_demux_007:src0_valid -> usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_valid
	wire  [103:0] rsp_demux_007_src0_data;                                                        // rsp_demux_007:src0_data -> usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_007_src0_ready;                                                       // usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_ready -> rsp_demux_007:src0_ready
	wire    [7:0] rsp_demux_007_src0_channel;                                                     // rsp_demux_007:src0_channel -> usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                               // rsp_demux_007:src0_startofpacket -> usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                 // rsp_demux_007:src0_endofpacket -> usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:in_endofpacket
	wire          usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid;          // usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_valid -> rsp_mux_001:sink5_valid
	wire  [130:0] usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data;           // usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_data -> rsp_mux_001:sink5_data
	wire          usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready;          // rsp_mux_001:sink5_ready -> usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel;        // usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_channel -> rsp_mux_001:sink5_channel
	wire          usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket;  // usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket;    // usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_007_src1_valid;                                                       // rsp_demux_007:src1_valid -> usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:in_valid
	wire  [103:0] rsp_demux_007_src1_data;                                                        // rsp_demux_007:src1_data -> usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:in_data
	wire          rsp_demux_007_src1_ready;                                                       // usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:in_ready -> rsp_demux_007:src1_ready
	wire    [7:0] rsp_demux_007_src1_channel;                                                     // rsp_demux_007:src1_channel -> usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_007_src1_startofpacket;                                               // rsp_demux_007:src1_startofpacket -> usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                 // rsp_demux_007:src1_endofpacket -> usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:in_endofpacket
	wire          usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_valid;               // usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:out_valid -> rsp_mux_002:sink5_valid
	wire  [130:0] usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_data;                // usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:out_data -> rsp_mux_002:sink5_data
	wire          usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_ready;               // rsp_mux_002:sink5_ready -> usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:out_ready
	wire    [7:0] usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_channel;             // usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:out_channel -> rsp_mux_002:sink5_channel
	wire          usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket;       // usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket;         // usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire    [7:0] ccl_master_m0_limiter_cmd_valid_data;                                           // ccl_master_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [7:0] usr_access_master_m0_limiter_cmd_valid_data;                                    // usr_access_master_m0_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [7:0] debug_master_m0_limiter_cmd_valid_data;                                         // debug_master_m0_limiter:cmd_src_valid -> cmd_demux_002:sink_valid

	avmm_ic_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (64),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (8),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (4),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (8),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) ccl_master_m0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),                                //   input,   width = 1,                       clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1,                     reset.reset
		.uav_address            (ccl_master_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (ccl_master_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 4,                          .burstcount
		.uav_read               (ccl_master_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (ccl_master_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (ccl_master_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (ccl_master_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (ccl_master_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 8,                          .byteenable
		.uav_readdata           (ccl_master_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 64,                          .readdata
		.uav_writedata          (ccl_master_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 64,                          .writedata
		.uav_lock               (ccl_master_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (ccl_master_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (ccl_master_m0_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (ccl_master_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (ccl_master_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (ccl_master_m0_byteenable),                                         //   input,   width = 8,                          .byteenable
		.av_read                (ccl_master_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (ccl_master_m0_readdata),                                           //  output,  width = 64,                          .readdata
		.av_readdatavalid       (ccl_master_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (ccl_master_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (ccl_master_m0_writedata),                                          //   input,  width = 64,                          .writedata
		.av_debugaccess         (ccl_master_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                             // (terminated),                                        
		.av_begintransfer       (1'b0),                                                             // (terminated),                                        
		.av_chipselect          (1'b0),                                                             // (terminated),                                        
		.av_lock                (1'b0),                                                             // (terminated),                                        
		.uav_outputenable       (1'b0),                                                             // (terminated),                                        
		.uav_clken              (),                                                                 // (terminated),                                        
		.av_clken               (1'b1),                                                             // (terminated),                                        
		.uav_response           (2'b00),                                                            // (terminated),                                        
		.av_response            (),                                                                 // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                             // (terminated),                                        
		.av_writeresponsevalid  ()                                                                  // (terminated),                                        
	);

	avmm_ic_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) usr_access_master_m0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),                                       //   input,   width = 1,                       clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset),                         //   input,   width = 1,                     reset.reset
		.uav_address            (usr_access_master_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (usr_access_master_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (usr_access_master_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (usr_access_master_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (usr_access_master_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (usr_access_master_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (usr_access_master_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (usr_access_master_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (usr_access_master_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (usr_access_master_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (usr_access_master_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (usr_access_master_m0_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (usr_access_master_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (usr_access_master_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (usr_access_master_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (usr_access_master_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (usr_access_master_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (usr_access_master_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (usr_access_master_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (usr_access_master_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (usr_access_master_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                    // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                    // (terminated),                                        
		.av_chipselect          (1'b0),                                                                    // (terminated),                                        
		.av_lock                (1'b0),                                                                    // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                    // (terminated),                                        
		.uav_clken              (),                                                                        // (terminated),                                        
		.av_clken               (1'b1),                                                                    // (terminated),                                        
		.uav_response           (2'b00),                                                                   // (terminated),                                        
		.av_response            (),                                                                        // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                    // (terminated),                                        
		.av_writeresponsevalid  ()                                                                         // (terminated),                                        
	);

	avmm_ic_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) debug_master_m0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),                                  //   input,   width = 1,                       clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset),                    //   input,   width = 1,                     reset.reset
		.uav_address            (debug_master_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (debug_master_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (debug_master_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (debug_master_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (debug_master_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (debug_master_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (debug_master_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (debug_master_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (debug_master_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (debug_master_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (debug_master_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (debug_master_m0_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (debug_master_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (debug_master_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (debug_master_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (debug_master_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (debug_master_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (debug_master_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (debug_master_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (debug_master_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (debug_master_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                               // (terminated),                                        
		.av_begintransfer       (1'b0),                                                               // (terminated),                                        
		.av_chipselect          (1'b0),                                                               // (terminated),                                        
		.av_lock                (1'b0),                                                               // (terminated),                                        
		.uav_outputenable       (1'b0),                                                               // (terminated),                                        
		.uav_clken              (),                                                                   // (terminated),                                        
		.av_clken               (1'b1),                                                               // (terminated),                                        
		.uav_response           (2'b00),                                                              // (terminated),                                        
		.av_response            (),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                               // (terminated),                                        
		.av_writeresponsevalid  ()                                                                    // (terminated),                                        
	);

	avmm_ic_altera_merlin_master_translator_192_lykd4la #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0),
		.USE_OUTPUTENABLE            (0)
	) ccl_mirror_master_m0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),                                       //   input,   width = 1,                       clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset),                         //   input,   width = 1,                     reset.reset
		.uav_address            (ccl_mirror_master_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (ccl_mirror_master_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (ccl_mirror_master_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (ccl_mirror_master_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (ccl_mirror_master_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (ccl_mirror_master_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (ccl_mirror_master_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (ccl_mirror_master_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (ccl_mirror_master_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (ccl_mirror_master_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (ccl_mirror_master_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (ccl_mirror_master_m0_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (ccl_mirror_master_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (ccl_mirror_master_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (ccl_mirror_master_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (ccl_mirror_master_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (ccl_mirror_master_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (ccl_mirror_master_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (ccl_mirror_master_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (ccl_mirror_master_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (ccl_mirror_master_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                    // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                    // (terminated),                                        
		.av_chipselect          (1'b0),                                                                    // (terminated),                                        
		.av_lock                (1'b0),                                                                    // (terminated),                                        
		.uav_outputenable       (1'b0),                                                                    // (terminated),                                        
		.uav_clken              (),                                                                        // (terminated),                                        
		.av_clken               (1'b1),                                                                    // (terminated),                                        
		.uav_response           (2'b00),                                                                   // (terminated),                                        
		.av_response            (),                                                                        // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                    // (terminated),                                        
		.av_writeresponsevalid  ()                                                                         // (terminated),                                        
	);

	avmm_ic_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) afu_slave_s0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,   width = 1,                      clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (afu_slave_s0_agent_m0_address),                   //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (afu_slave_s0_agent_m0_burstcount),                //   input,   width = 4,                         .burstcount
		.uav_read               (afu_slave_s0_agent_m0_read),                      //   input,   width = 1,                         .read
		.uav_write              (afu_slave_s0_agent_m0_write),                     //   input,   width = 1,                         .write
		.uav_waitrequest        (afu_slave_s0_agent_m0_waitrequest),               //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (afu_slave_s0_agent_m0_readdatavalid),             //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (afu_slave_s0_agent_m0_byteenable),                //   input,   width = 8,                         .byteenable
		.uav_readdata           (afu_slave_s0_agent_m0_readdata),                  //  output,  width = 64,                         .readdata
		.uav_writedata          (afu_slave_s0_agent_m0_writedata),                 //   input,  width = 64,                         .writedata
		.uav_lock               (afu_slave_s0_agent_m0_lock),                      //   input,   width = 1,                         .lock
		.uav_debugaccess        (afu_slave_s0_agent_m0_debugaccess),               //   input,   width = 1,                         .debugaccess
		.av_address             (afu_slave_s0_address),                            //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (afu_slave_s0_write),                              //  output,   width = 1,                         .write
		.av_read                (afu_slave_s0_read),                               //  output,   width = 1,                         .read
		.av_readdata            (afu_slave_s0_readdata),                           //   input,  width = 64,                         .readdata
		.av_writedata           (afu_slave_s0_writedata),                          //  output,  width = 64,                         .writedata
		.av_burstcount          (afu_slave_s0_burstcount),                         //  output,   width = 1,                         .burstcount
		.av_byteenable          (afu_slave_s0_byteenable),                         //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (afu_slave_s0_readdatavalid),                      //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (afu_slave_s0_waitrequest),                        //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (afu_slave_s0_debugaccess),                        //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.av_chipselect          (),                                                // (terminated),                                       
		.av_clken               (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	avmm_ic_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) bbs_slave_s0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,   width = 1,                      clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (bbs_slave_s0_agent_m0_address),                   //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (bbs_slave_s0_agent_m0_burstcount),                //   input,   width = 4,                         .burstcount
		.uav_read               (bbs_slave_s0_agent_m0_read),                      //   input,   width = 1,                         .read
		.uav_write              (bbs_slave_s0_agent_m0_write),                     //   input,   width = 1,                         .write
		.uav_waitrequest        (bbs_slave_s0_agent_m0_waitrequest),               //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (bbs_slave_s0_agent_m0_readdatavalid),             //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (bbs_slave_s0_agent_m0_byteenable),                //   input,   width = 8,                         .byteenable
		.uav_readdata           (bbs_slave_s0_agent_m0_readdata),                  //  output,  width = 64,                         .readdata
		.uav_writedata          (bbs_slave_s0_agent_m0_writedata),                 //   input,  width = 64,                         .writedata
		.uav_lock               (bbs_slave_s0_agent_m0_lock),                      //   input,   width = 1,                         .lock
		.uav_debugaccess        (bbs_slave_s0_agent_m0_debugaccess),               //   input,   width = 1,                         .debugaccess
		.av_address             (bbs_slave_s0_address),                            //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (bbs_slave_s0_write),                              //  output,   width = 1,                         .write
		.av_read                (bbs_slave_s0_read),                               //  output,   width = 1,                         .read
		.av_readdata            (bbs_slave_s0_readdata),                           //   input,  width = 64,                         .readdata
		.av_writedata           (bbs_slave_s0_writedata),                          //  output,  width = 64,                         .writedata
		.av_burstcount          (bbs_slave_s0_burstcount),                         //  output,   width = 1,                         .burstcount
		.av_byteenable          (bbs_slave_s0_byteenable),                         //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (bbs_slave_s0_readdatavalid),                      //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (bbs_slave_s0_waitrequest),                        //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (bbs_slave_s0_debugaccess),                        //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.av_chipselect          (),                                                // (terminated),                                       
		.av_clken               (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	avmm_ic_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) ccl_csb2wire_csr_s0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,   width = 1,                      clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ccl_csb2wire_csr_s0_agent_m0_address),            //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ccl_csb2wire_csr_s0_agent_m0_burstcount),         //   input,   width = 3,                         .burstcount
		.uav_read               (ccl_csb2wire_csr_s0_agent_m0_read),               //   input,   width = 1,                         .read
		.uav_write              (ccl_csb2wire_csr_s0_agent_m0_write),              //   input,   width = 1,                         .write
		.uav_waitrequest        (ccl_csb2wire_csr_s0_agent_m0_waitrequest),        //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ccl_csb2wire_csr_s0_agent_m0_readdatavalid),      //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ccl_csb2wire_csr_s0_agent_m0_byteenable),         //   input,   width = 4,                         .byteenable
		.uav_readdata           (ccl_csb2wire_csr_s0_agent_m0_readdata),           //  output,  width = 32,                         .readdata
		.uav_writedata          (ccl_csb2wire_csr_s0_agent_m0_writedata),          //   input,  width = 32,                         .writedata
		.uav_lock               (ccl_csb2wire_csr_s0_agent_m0_lock),               //   input,   width = 1,                         .lock
		.uav_debugaccess        (ccl_csb2wire_csr_s0_agent_m0_debugaccess),        //   input,   width = 1,                         .debugaccess
		.av_address             (ccl_csb2wire_csr_s0_address),                     //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (ccl_csb2wire_csr_s0_write),                       //  output,   width = 1,                         .write
		.av_read                (ccl_csb2wire_csr_s0_read),                        //  output,   width = 1,                         .read
		.av_readdata            (ccl_csb2wire_csr_s0_readdata),                    //   input,  width = 32,                         .readdata
		.av_writedata           (ccl_csb2wire_csr_s0_writedata),                   //  output,  width = 32,                         .writedata
		.av_burstcount          (ccl_csb2wire_csr_s0_burstcount),                  //  output,   width = 1,                         .burstcount
		.av_byteenable          (ccl_csb2wire_csr_s0_byteenable),                  //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (ccl_csb2wire_csr_s0_readdatavalid),               //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (ccl_csb2wire_csr_s0_waitrequest),                 //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (ccl_csb2wire_csr_s0_debugaccess),                 //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.av_chipselect          (),                                                // (terminated),                                       
		.av_clken               (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	avmm_ic_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) ccl_slave_s0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,   width = 1,                      clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ccl_slave_s0_agent_m0_address),                   //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ccl_slave_s0_agent_m0_burstcount),                //   input,   width = 3,                         .burstcount
		.uav_read               (ccl_slave_s0_agent_m0_read),                      //   input,   width = 1,                         .read
		.uav_write              (ccl_slave_s0_agent_m0_write),                     //   input,   width = 1,                         .write
		.uav_waitrequest        (ccl_slave_s0_agent_m0_waitrequest),               //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ccl_slave_s0_agent_m0_readdatavalid),             //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ccl_slave_s0_agent_m0_byteenable),                //   input,   width = 4,                         .byteenable
		.uav_readdata           (ccl_slave_s0_agent_m0_readdata),                  //  output,  width = 32,                         .readdata
		.uav_writedata          (ccl_slave_s0_agent_m0_writedata),                 //   input,  width = 32,                         .writedata
		.uav_lock               (ccl_slave_s0_agent_m0_lock),                      //   input,   width = 1,                         .lock
		.uav_debugaccess        (ccl_slave_s0_agent_m0_debugaccess),               //   input,   width = 1,                         .debugaccess
		.av_address             (ccl_slave_s0_address),                            //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (ccl_slave_s0_write),                              //  output,   width = 1,                         .write
		.av_read                (ccl_slave_s0_read),                               //  output,   width = 1,                         .read
		.av_readdata            (ccl_slave_s0_readdata),                           //   input,  width = 32,                         .readdata
		.av_writedata           (ccl_slave_s0_writedata),                          //  output,  width = 32,                         .writedata
		.av_burstcount          (ccl_slave_s0_burstcount),                         //  output,   width = 1,                         .burstcount
		.av_byteenable          (ccl_slave_s0_byteenable),                         //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (ccl_slave_s0_readdatavalid),                      //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (ccl_slave_s0_waitrequest),                        //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (ccl_slave_s0_debugaccess),                        //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.av_chipselect          (),                                                // (terminated),                                       
		.av_clken               (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	avmm_ic_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (4),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) ccv_afu_s0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,   width = 1,                      clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ccv_afu_s0_agent_m0_address),                     //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ccv_afu_s0_agent_m0_burstcount),                  //   input,   width = 4,                         .burstcount
		.uav_read               (ccv_afu_s0_agent_m0_read),                        //   input,   width = 1,                         .read
		.uav_write              (ccv_afu_s0_agent_m0_write),                       //   input,   width = 1,                         .write
		.uav_waitrequest        (ccv_afu_s0_agent_m0_waitrequest),                 //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ccv_afu_s0_agent_m0_readdatavalid),               //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ccv_afu_s0_agent_m0_byteenable),                  //   input,   width = 8,                         .byteenable
		.uav_readdata           (ccv_afu_s0_agent_m0_readdata),                    //  output,  width = 64,                         .readdata
		.uav_writedata          (ccv_afu_s0_agent_m0_writedata),                   //   input,  width = 64,                         .writedata
		.uav_lock               (ccv_afu_s0_agent_m0_lock),                        //   input,   width = 1,                         .lock
		.uav_debugaccess        (ccv_afu_s0_agent_m0_debugaccess),                 //   input,   width = 1,                         .debugaccess
		.av_address             (ccv_afu_s0_address),                              //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (ccv_afu_s0_write),                                //  output,   width = 1,                         .write
		.av_read                (ccv_afu_s0_read),                                 //  output,   width = 1,                         .read
		.av_readdata            (ccv_afu_s0_readdata),                             //   input,  width = 64,                         .readdata
		.av_writedata           (ccv_afu_s0_writedata),                            //  output,  width = 64,                         .writedata
		.av_burstcount          (ccv_afu_s0_burstcount),                           //  output,   width = 1,                         .burstcount
		.av_byteenable          (ccv_afu_s0_byteenable),                           //  output,   width = 8,                         .byteenable
		.av_readdatavalid       (ccv_afu_s0_readdatavalid),                        //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (ccv_afu_s0_waitrequest),                          //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (ccv_afu_s0_debugaccess),                          //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.av_chipselect          (),                                                // (terminated),                                       
		.av_clken               (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	avmm_ic_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) cmb2avst_slave_s0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,   width = 1,                      clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (cmb2avst_slave_s0_agent_m0_address),              //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (cmb2avst_slave_s0_agent_m0_burstcount),           //   input,   width = 3,                         .burstcount
		.uav_read               (cmb2avst_slave_s0_agent_m0_read),                 //   input,   width = 1,                         .read
		.uav_write              (cmb2avst_slave_s0_agent_m0_write),                //   input,   width = 1,                         .write
		.uav_waitrequest        (cmb2avst_slave_s0_agent_m0_waitrequest),          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (cmb2avst_slave_s0_agent_m0_readdatavalid),        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (cmb2avst_slave_s0_agent_m0_byteenable),           //   input,   width = 4,                         .byteenable
		.uav_readdata           (cmb2avst_slave_s0_agent_m0_readdata),             //  output,  width = 32,                         .readdata
		.uav_writedata          (cmb2avst_slave_s0_agent_m0_writedata),            //   input,  width = 32,                         .writedata
		.uav_lock               (cmb2avst_slave_s0_agent_m0_lock),                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (cmb2avst_slave_s0_agent_m0_debugaccess),          //   input,   width = 1,                         .debugaccess
		.av_address             (cmb2avst_slave_s0_address),                       //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (cmb2avst_slave_s0_write),                         //  output,   width = 1,                         .write
		.av_read                (cmb2avst_slave_s0_read),                          //  output,   width = 1,                         .read
		.av_readdata            (cmb2avst_slave_s0_readdata),                      //   input,  width = 32,                         .readdata
		.av_writedata           (cmb2avst_slave_s0_writedata),                     //  output,  width = 32,                         .writedata
		.av_burstcount          (cmb2avst_slave_s0_burstcount),                    //  output,   width = 1,                         .burstcount
		.av_byteenable          (cmb2avst_slave_s0_byteenable),                    //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (cmb2avst_slave_s0_readdatavalid),                 //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (cmb2avst_slave_s0_waitrequest),                   //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (cmb2avst_slave_s0_debugaccess),                   //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.av_chipselect          (),                                                // (terminated),                                       
		.av_clken               (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	avmm_ic_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) hip_recfg_slave_s0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,   width = 1,                      clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (hip_recfg_slave_s0_agent_m0_address),             //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (hip_recfg_slave_s0_agent_m0_burstcount),          //   input,   width = 1,                         .burstcount
		.uav_read               (hip_recfg_slave_s0_agent_m0_read),                //   input,   width = 1,                         .read
		.uav_write              (hip_recfg_slave_s0_agent_m0_write),               //   input,   width = 1,                         .write
		.uav_waitrequest        (hip_recfg_slave_s0_agent_m0_waitrequest),         //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (hip_recfg_slave_s0_agent_m0_readdatavalid),       //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (hip_recfg_slave_s0_agent_m0_byteenable),          //   input,   width = 1,                         .byteenable
		.uav_readdata           (hip_recfg_slave_s0_agent_m0_readdata),            //  output,   width = 8,                         .readdata
		.uav_writedata          (hip_recfg_slave_s0_agent_m0_writedata),           //   input,   width = 8,                         .writedata
		.uav_lock               (hip_recfg_slave_s0_agent_m0_lock),                //   input,   width = 1,                         .lock
		.uav_debugaccess        (hip_recfg_slave_s0_agent_m0_debugaccess),         //   input,   width = 1,                         .debugaccess
		.av_address             (hip_recfg_slave_s0_address),                      //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (hip_recfg_slave_s0_write),                        //  output,   width = 1,                         .write
		.av_read                (hip_recfg_slave_s0_read),                         //  output,   width = 1,                         .read
		.av_readdata            (hip_recfg_slave_s0_readdata),                     //   input,   width = 8,                         .readdata
		.av_writedata           (hip_recfg_slave_s0_writedata),                    //  output,   width = 8,                         .writedata
		.av_burstcount          (hip_recfg_slave_s0_burstcount),                   //  output,   width = 1,                         .burstcount
		.av_byteenable          (hip_recfg_slave_s0_byteenable),                   //  output,   width = 1,                         .byteenable
		.av_readdatavalid       (hip_recfg_slave_s0_readdatavalid),                //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (hip_recfg_slave_s0_waitrequest),                  //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (hip_recfg_slave_s0_debugaccess),                  //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.av_chipselect          (),                                                // (terminated),                                       
		.av_clken               (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	avmm_ic_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) usr_avmm_slave_s0_translator (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,   width = 1,                      clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (usr_avmm_slave_s0_agent_m0_address),              //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (usr_avmm_slave_s0_agent_m0_burstcount),           //   input,   width = 1,                         .burstcount
		.uav_read               (usr_avmm_slave_s0_agent_m0_read),                 //   input,   width = 1,                         .read
		.uav_write              (usr_avmm_slave_s0_agent_m0_write),                //   input,   width = 1,                         .write
		.uav_waitrequest        (usr_avmm_slave_s0_agent_m0_waitrequest),          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (usr_avmm_slave_s0_agent_m0_readdatavalid),        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (usr_avmm_slave_s0_agent_m0_byteenable),           //   input,   width = 1,                         .byteenable
		.uav_readdata           (usr_avmm_slave_s0_agent_m0_readdata),             //  output,   width = 8,                         .readdata
		.uav_writedata          (usr_avmm_slave_s0_agent_m0_writedata),            //   input,   width = 8,                         .writedata
		.uav_lock               (usr_avmm_slave_s0_agent_m0_lock),                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (usr_avmm_slave_s0_agent_m0_debugaccess),          //   input,   width = 1,                         .debugaccess
		.av_address             (usr_avmm_slave_s0_address),                       //  output,  width = 24,      avalon_anti_slave_0.address
		.av_write               (usr_avmm_slave_s0_write),                         //  output,   width = 1,                         .write
		.av_read                (usr_avmm_slave_s0_read),                          //  output,   width = 1,                         .read
		.av_readdata            (usr_avmm_slave_s0_readdata),                      //   input,   width = 8,                         .readdata
		.av_writedata           (usr_avmm_slave_s0_writedata),                     //  output,   width = 8,                         .writedata
		.av_burstcount          (usr_avmm_slave_s0_burstcount),                    //  output,   width = 1,                         .burstcount
		.av_byteenable          (usr_avmm_slave_s0_byteenable),                    //  output,   width = 1,                         .byteenable
		.av_readdatavalid       (usr_avmm_slave_s0_readdatavalid),                 //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (usr_avmm_slave_s0_waitrequest),                   //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (usr_avmm_slave_s0_debugaccess),                   //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.av_chipselect          (),                                                // (terminated),                                       
		.av_clken               (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	avmm_ic_altera_merlin_master_agent_1922_fy3n5ti #(
		.PKT_WUNIQUE               (151),
		.PKT_DOMAIN_H              (150),
		.PKT_DOMAIN_L              (149),
		.PKT_SNOOP_H               (148),
		.PKT_SNOOP_L               (145),
		.PKT_BARRIER_H             (144),
		.PKT_BARRIER_L             (143),
		.PKT_ORI_BURST_SIZE_H      (142),
		.PKT_ORI_BURST_SIZE_L      (140),
		.PKT_RESPONSE_STATUS_H     (139),
		.PKT_RESPONSE_STATUS_L     (138),
		.PKT_QOS_H                 (123),
		.PKT_QOS_L                 (123),
		.PKT_DATA_SIDEBAND_H       (121),
		.PKT_DATA_SIDEBAND_L       (121),
		.PKT_ADDR_SIDEBAND_H       (120),
		.PKT_ADDR_SIDEBAND_L       (120),
		.PKT_BURST_TYPE_H          (119),
		.PKT_BURST_TYPE_L          (118),
		.PKT_CACHE_H               (137),
		.PKT_CACHE_L               (134),
		.PKT_THREAD_ID_H           (130),
		.PKT_THREAD_ID_L           (130),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_EXCLUSIVE       (109),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (133),
		.PKT_PROTECTION_L          (131),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (126),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (129),
		.PKT_DEST_ID_L             (127),
		.PKT_POISON_H              (152),
		.PKT_POISON_L              (152),
		.PKT_DATACHK_H             (153),
		.PKT_DATACHK_L             (153),
		.PKT_ADDRCHK_H             (156),
		.PKT_ADDRCHK_L             (155),
		.PKT_SAI_H                 (157),
		.PKT_SAI_L                 (157),
		.PKT_USER_DATA_H           (154),
		.PKT_USER_DATA_L           (154),
		.ST_DATA_W                 (167),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (4),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) ccl_master_m0_agent (
		.clk                   (interconnect_clock_in_out_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset                 (ccl_master_m0_reset_reset_bridge_in_reset_reset),                  //   input,    width = 1, clk_reset.reset
		.av_address            (ccl_master_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (ccl_master_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (ccl_master_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (ccl_master_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 64,          .writedata
		.av_readdata           (ccl_master_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 64,          .readdata
		.av_waitrequest        (ccl_master_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (ccl_master_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (ccl_master_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 8,          .byteenable
		.av_burstcount         (ccl_master_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 4,          .burstcount
		.av_debugaccess        (ccl_master_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (ccl_master_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (ccl_master_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (ccl_master_m0_agent_cp_data),                                      //  output,  width = 167,          .data
		.cp_startofpacket      (ccl_master_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (ccl_master_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (ccl_master_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (ccl_master_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (ccl_master_m0_limiter_rsp_src_data),                               //   input,  width = 167,          .data
		.rp_channel            (ccl_master_m0_limiter_rsp_src_channel),                            //   input,    width = 8,          .channel
		.rp_startofpacket      (ccl_master_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (ccl_master_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (ccl_master_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                 // (terminated),                         
		.av_writeresponsevalid ()                                                                  // (terminated),                         
	);

	avmm_ic_altera_merlin_master_agent_1922_fy3n5ti #(
		.PKT_WUNIQUE               (115),
		.PKT_DOMAIN_H              (114),
		.PKT_DOMAIN_L              (113),
		.PKT_SNOOP_H               (112),
		.PKT_SNOOP_L               (109),
		.PKT_BARRIER_H             (108),
		.PKT_BARRIER_L             (107),
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (87),
		.PKT_QOS_L                 (87),
		.PKT_DATA_SIDEBAND_H       (85),
		.PKT_DATA_SIDEBAND_L       (85),
		.PKT_ADDR_SIDEBAND_H       (84),
		.PKT_ADDR_SIDEBAND_L       (84),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_POISON_H              (116),
		.PKT_POISON_L              (116),
		.PKT_DATACHK_H             (117),
		.PKT_DATACHK_L             (117),
		.PKT_ADDRCHK_H             (120),
		.PKT_ADDRCHK_L             (119),
		.PKT_SAI_H                 (121),
		.PKT_SAI_L                 (121),
		.PKT_USER_DATA_H           (118),
		.PKT_USER_DATA_L           (118),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) usr_access_master_m0_agent (
		.clk                   (interconnect_clock_in_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                 (ccl_master_m0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.av_address            (usr_access_master_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (usr_access_master_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (usr_access_master_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (usr_access_master_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (usr_access_master_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (usr_access_master_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (usr_access_master_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (usr_access_master_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (usr_access_master_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (usr_access_master_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (usr_access_master_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (usr_access_master_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (usr_access_master_m0_agent_cp_data),                                      //  output,  width = 131,          .data
		.cp_startofpacket      (usr_access_master_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (usr_access_master_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (usr_access_master_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (usr_access_master_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (usr_access_master_m0_limiter_rsp_src_data),                               //   input,  width = 131,          .data
		.rp_channel            (usr_access_master_m0_limiter_rsp_src_channel),                            //   input,    width = 8,          .channel
		.rp_startofpacket      (usr_access_master_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (usr_access_master_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (usr_access_master_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                        // (terminated),                         
		.av_writeresponsevalid ()                                                                         // (terminated),                         
	);

	avmm_ic_altera_merlin_master_agent_1922_fy3n5ti #(
		.PKT_WUNIQUE               (115),
		.PKT_DOMAIN_H              (114),
		.PKT_DOMAIN_L              (113),
		.PKT_SNOOP_H               (112),
		.PKT_SNOOP_L               (109),
		.PKT_BARRIER_H             (108),
		.PKT_BARRIER_L             (107),
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (87),
		.PKT_QOS_L                 (87),
		.PKT_DATA_SIDEBAND_H       (85),
		.PKT_DATA_SIDEBAND_L       (85),
		.PKT_ADDR_SIDEBAND_H       (84),
		.PKT_ADDR_SIDEBAND_L       (84),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_POISON_H              (116),
		.PKT_POISON_L              (116),
		.PKT_DATACHK_H             (117),
		.PKT_DATACHK_L             (117),
		.PKT_ADDRCHK_H             (120),
		.PKT_ADDRCHK_L             (119),
		.PKT_SAI_H                 (121),
		.PKT_SAI_L                 (121),
		.PKT_USER_DATA_H           (118),
		.PKT_USER_DATA_L           (118),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) debug_master_m0_agent (
		.clk                   (interconnect_clock_in_out_clk_clk),                                  //   input,    width = 1,       clk.clk
		.reset                 (ccl_master_m0_reset_reset_bridge_in_reset_reset),                    //   input,    width = 1, clk_reset.reset
		.av_address            (debug_master_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (debug_master_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (debug_master_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (debug_master_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (debug_master_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (debug_master_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (debug_master_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (debug_master_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (debug_master_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (debug_master_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (debug_master_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (debug_master_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (debug_master_m0_agent_cp_data),                                      //  output,  width = 131,          .data
		.cp_startofpacket      (debug_master_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (debug_master_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (debug_master_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (debug_master_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (debug_master_m0_limiter_rsp_src_data),                               //   input,  width = 131,          .data
		.rp_channel            (debug_master_m0_limiter_rsp_src_channel),                            //   input,    width = 8,          .channel
		.rp_startofpacket      (debug_master_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (debug_master_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (debug_master_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                   // (terminated),                         
		.av_writeresponsevalid ()                                                                    // (terminated),                         
	);

	avmm_ic_altera_merlin_master_agent_1922_fy3n5ti #(
		.PKT_WUNIQUE               (115),
		.PKT_DOMAIN_H              (114),
		.PKT_DOMAIN_L              (113),
		.PKT_SNOOP_H               (112),
		.PKT_SNOOP_L               (109),
		.PKT_BARRIER_H             (108),
		.PKT_BARRIER_L             (107),
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_QOS_H                 (87),
		.PKT_QOS_L                 (87),
		.PKT_DATA_SIDEBAND_H       (85),
		.PKT_DATA_SIDEBAND_L       (85),
		.PKT_ADDR_SIDEBAND_H       (84),
		.PKT_ADDR_SIDEBAND_L       (84),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_CACHE_H               (101),
		.PKT_CACHE_L               (98),
		.PKT_THREAD_ID_H           (94),
		.PKT_THREAD_ID_L           (94),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_POISON_H              (116),
		.PKT_POISON_L              (116),
		.PKT_DATACHK_H             (117),
		.PKT_DATACHK_L             (117),
		.PKT_ADDRCHK_H             (120),
		.PKT_ADDRCHK_L             (119),
		.PKT_SAI_H                 (121),
		.PKT_SAI_L                 (121),
		.PKT_USER_DATA_H           (118),
		.PKT_USER_DATA_L           (118),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.USE_PKT_ADDRCHK           (0),
		.ROLE_BASED_USER           (0)
	) ccl_mirror_master_m0_agent (
		.clk                   (interconnect_clock_in_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                 (ccl_master_m0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.av_address            (ccl_mirror_master_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (ccl_mirror_master_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (ccl_mirror_master_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (ccl_mirror_master_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (ccl_mirror_master_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (ccl_mirror_master_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (ccl_mirror_master_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (ccl_mirror_master_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (ccl_mirror_master_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (ccl_mirror_master_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (ccl_mirror_master_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (ccl_mirror_master_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (ccl_mirror_master_m0_agent_cp_data),                                      //  output,  width = 131,          .data
		.cp_startofpacket      (ccl_mirror_master_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (ccl_mirror_master_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (ccl_mirror_master_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                   //   input,    width = 1,        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                    //   input,  width = 131,          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                 //   input,    width = 8,          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                   //  output,    width = 1,          .ready
		.av_response           (),                                                                        // (terminated),                         
		.av_writeresponsevalid ()                                                                         // (terminated),                         
	);

	avmm_ic_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (142),
		.PKT_ORI_BURST_SIZE_L      (140),
		.PKT_RESPONSE_STATUS_H     (139),
		.PKT_RESPONSE_STATUS_L     (138),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (133),
		.PKT_PROTECTION_L          (131),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (126),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (129),
		.PKT_DEST_ID_L             (127),
		.PKT_POISON_H              (152),
		.PKT_POISON_L              (152),
		.PKT_DATACHK_H             (153),
		.PKT_DATACHK_L             (153),
		.PKT_SAI_H                 (157),
		.PKT_SAI_L                 (157),
		.PKT_ADDRCHK_H             (156),
		.PKT_ADDRCHK_L             (155),
		.PKT_USER_DATA_H           (154),
		.PKT_USER_DATA_L           (154),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (167),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) afu_slave_s0_agent (
		.clk                     (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,             clk.clk
		.reset                   (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (afu_slave_s0_agent_m0_address),                   //  output,   width = 32,              m0.address
		.m0_burstcount           (afu_slave_s0_agent_m0_burstcount),                //  output,    width = 4,                .burstcount
		.m0_byteenable           (afu_slave_s0_agent_m0_byteenable),                //  output,    width = 8,                .byteenable
		.m0_debugaccess          (afu_slave_s0_agent_m0_debugaccess),               //  output,    width = 1,                .debugaccess
		.m0_lock                 (afu_slave_s0_agent_m0_lock),                      //  output,    width = 1,                .lock
		.m0_readdata             (afu_slave_s0_agent_m0_readdata),                  //   input,   width = 64,                .readdata
		.m0_readdatavalid        (afu_slave_s0_agent_m0_readdatavalid),             //   input,    width = 1,                .readdatavalid
		.m0_read                 (afu_slave_s0_agent_m0_read),                      //  output,    width = 1,                .read
		.m0_waitrequest          (afu_slave_s0_agent_m0_waitrequest),               //   input,    width = 1,                .waitrequest
		.m0_writedata            (afu_slave_s0_agent_m0_writedata),                 //  output,   width = 64,                .writedata
		.m0_write                (afu_slave_s0_agent_m0_write),                     //  output,    width = 1,                .write
		.rp_endofpacket          (afu_slave_s0_agent_rp_endofpacket),               //  output,    width = 1,              rp.endofpacket
		.rp_ready                (afu_slave_s0_agent_rp_ready),                     //   input,    width = 1,                .ready
		.rp_valid                (afu_slave_s0_agent_rp_valid),                     //  output,    width = 1,                .valid
		.rp_data                 (afu_slave_s0_agent_rp_data),                      //  output,  width = 167,                .data
		.rp_startofpacket        (afu_slave_s0_agent_rp_startofpacket),             //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                               //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                               //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                //   input,  width = 167,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                       //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                         //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                             //   input,    width = 8,                .channel
		.rf_sink_ready           (afu_slave_s0_agent_rsp_fifo_out_ready),           //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (afu_slave_s0_agent_rsp_fifo_out_valid),           //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (afu_slave_s0_agent_rsp_fifo_out_startofpacket),   //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (afu_slave_s0_agent_rsp_fifo_out_endofpacket),     //   input,    width = 1,                .endofpacket
		.rf_sink_data            (afu_slave_s0_agent_rsp_fifo_out_data),            //   input,  width = 168,                .data
		.rf_source_ready         (afu_slave_s0_agent_rf_source_ready),              //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (afu_slave_s0_agent_rf_source_valid),              //  output,    width = 1,                .valid
		.rf_source_startofpacket (afu_slave_s0_agent_rf_source_startofpacket),      //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (afu_slave_s0_agent_rf_source_endofpacket),        //  output,    width = 1,                .endofpacket
		.rf_source_data          (afu_slave_s0_agent_rf_source_data),               //  output,  width = 168,                .data
		.rdata_fifo_sink_ready   (afu_slave_s0_agent_rdata_fifo_src_ready),         //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (afu_slave_s0_agent_rdata_fifo_src_valid),         //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (afu_slave_s0_agent_rdata_fifo_src_data),          //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (afu_slave_s0_agent_rdata_fifo_src_ready),         //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (afu_slave_s0_agent_rdata_fifo_src_valid),         //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (afu_slave_s0_agent_rdata_fifo_src_data),          //  output,   width = 66,                .data
		.m0_response             (2'b00),                                           // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                            // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                             // (terminated),                               
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (168),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) afu_slave_s0_agent_rsp_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (afu_slave_s0_agent_rf_source_data),                                 //   input,  width = 168,        in.data
		.in_valid          (afu_slave_s0_agent_rf_source_valid),                                //   input,    width = 1,          .valid
		.in_ready          (afu_slave_s0_agent_rf_source_ready),                                //  output,    width = 1,          .ready
		.in_startofpacket  (afu_slave_s0_agent_rf_source_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (afu_slave_s0_agent_rf_source_endofpacket),                          //   input,    width = 1,          .endofpacket
		.out_data          (afu_slave_s0_agent_rsp_fifo_out_data),                              //  output,  width = 168,       out.data
		.out_valid         (afu_slave_s0_agent_rsp_fifo_out_valid),                             //  output,    width = 1,          .valid
		.out_ready         (afu_slave_s0_agent_rsp_fifo_out_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket (afu_slave_s0_agent_rsp_fifo_out_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (afu_slave_s0_agent_rsp_fifo_out_endofpacket),                       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	avmm_ic_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (142),
		.PKT_ORI_BURST_SIZE_L      (140),
		.PKT_RESPONSE_STATUS_H     (139),
		.PKT_RESPONSE_STATUS_L     (138),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (133),
		.PKT_PROTECTION_L          (131),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (126),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (129),
		.PKT_DEST_ID_L             (127),
		.PKT_POISON_H              (152),
		.PKT_POISON_L              (152),
		.PKT_DATACHK_H             (153),
		.PKT_DATACHK_L             (153),
		.PKT_SAI_H                 (157),
		.PKT_SAI_L                 (157),
		.PKT_ADDRCHK_H             (156),
		.PKT_ADDRCHK_L             (155),
		.PKT_USER_DATA_H           (154),
		.PKT_USER_DATA_L           (154),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (167),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) bbs_slave_s0_agent (
		.clk                     (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,             clk.clk
		.reset                   (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (bbs_slave_s0_agent_m0_address),                   //  output,   width = 32,              m0.address
		.m0_burstcount           (bbs_slave_s0_agent_m0_burstcount),                //  output,    width = 4,                .burstcount
		.m0_byteenable           (bbs_slave_s0_agent_m0_byteenable),                //  output,    width = 8,                .byteenable
		.m0_debugaccess          (bbs_slave_s0_agent_m0_debugaccess),               //  output,    width = 1,                .debugaccess
		.m0_lock                 (bbs_slave_s0_agent_m0_lock),                      //  output,    width = 1,                .lock
		.m0_readdata             (bbs_slave_s0_agent_m0_readdata),                  //   input,   width = 64,                .readdata
		.m0_readdatavalid        (bbs_slave_s0_agent_m0_readdatavalid),             //   input,    width = 1,                .readdatavalid
		.m0_read                 (bbs_slave_s0_agent_m0_read),                      //  output,    width = 1,                .read
		.m0_waitrequest          (bbs_slave_s0_agent_m0_waitrequest),               //   input,    width = 1,                .waitrequest
		.m0_writedata            (bbs_slave_s0_agent_m0_writedata),                 //  output,   width = 64,                .writedata
		.m0_write                (bbs_slave_s0_agent_m0_write),                     //  output,    width = 1,                .write
		.rp_endofpacket          (bbs_slave_s0_agent_rp_endofpacket),               //  output,    width = 1,              rp.endofpacket
		.rp_ready                (bbs_slave_s0_agent_rp_ready),                     //   input,    width = 1,                .ready
		.rp_valid                (bbs_slave_s0_agent_rp_valid),                     //  output,    width = 1,                .valid
		.rp_data                 (bbs_slave_s0_agent_rp_data),                      //  output,  width = 167,                .data
		.rp_startofpacket        (bbs_slave_s0_agent_rp_startofpacket),             //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                           //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                           //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                            //   input,  width = 167,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                   //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                     //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                         //   input,    width = 8,                .channel
		.rf_sink_ready           (bbs_slave_s0_agent_rsp_fifo_out_ready),           //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (bbs_slave_s0_agent_rsp_fifo_out_valid),           //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (bbs_slave_s0_agent_rsp_fifo_out_startofpacket),   //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (bbs_slave_s0_agent_rsp_fifo_out_endofpacket),     //   input,    width = 1,                .endofpacket
		.rf_sink_data            (bbs_slave_s0_agent_rsp_fifo_out_data),            //   input,  width = 168,                .data
		.rf_source_ready         (bbs_slave_s0_agent_rf_source_ready),              //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (bbs_slave_s0_agent_rf_source_valid),              //  output,    width = 1,                .valid
		.rf_source_startofpacket (bbs_slave_s0_agent_rf_source_startofpacket),      //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (bbs_slave_s0_agent_rf_source_endofpacket),        //  output,    width = 1,                .endofpacket
		.rf_source_data          (bbs_slave_s0_agent_rf_source_data),               //  output,  width = 168,                .data
		.rdata_fifo_sink_ready   (bbs_slave_s0_agent_rdata_fifo_src_ready),         //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (bbs_slave_s0_agent_rdata_fifo_src_valid),         //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (bbs_slave_s0_agent_rdata_fifo_src_data),          //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (bbs_slave_s0_agent_rdata_fifo_src_ready),         //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bbs_slave_s0_agent_rdata_fifo_src_valid),         //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (bbs_slave_s0_agent_rdata_fifo_src_data),          //  output,   width = 66,                .data
		.m0_response             (2'b00),                                           // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                            // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                             // (terminated),                               
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (168),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) bbs_slave_s0_agent_rsp_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (bbs_slave_s0_agent_rf_source_data),                                 //   input,  width = 168,        in.data
		.in_valid          (bbs_slave_s0_agent_rf_source_valid),                                //   input,    width = 1,          .valid
		.in_ready          (bbs_slave_s0_agent_rf_source_ready),                                //  output,    width = 1,          .ready
		.in_startofpacket  (bbs_slave_s0_agent_rf_source_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (bbs_slave_s0_agent_rf_source_endofpacket),                          //   input,    width = 1,          .endofpacket
		.out_data          (bbs_slave_s0_agent_rsp_fifo_out_data),                              //  output,  width = 168,       out.data
		.out_valid         (bbs_slave_s0_agent_rsp_fifo_out_valid),                             //  output,    width = 1,          .valid
		.out_ready         (bbs_slave_s0_agent_rsp_fifo_out_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket (bbs_slave_s0_agent_rsp_fifo_out_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (bbs_slave_s0_agent_rsp_fifo_out_endofpacket),                       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	avmm_ic_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_POISON_H              (116),
		.PKT_POISON_L              (116),
		.PKT_DATACHK_H             (117),
		.PKT_DATACHK_L             (117),
		.PKT_SAI_H                 (121),
		.PKT_SAI_L                 (121),
		.PKT_ADDRCHK_H             (120),
		.PKT_ADDRCHK_L             (119),
		.PKT_USER_DATA_H           (118),
		.PKT_USER_DATA_L           (118),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) ccl_csb2wire_csr_s0_agent (
		.clk                     (interconnect_clock_in_out_clk_clk),                       //   input,    width = 1,             clk.clk
		.reset                   (ccl_master_m0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1,       clk_reset.reset
		.m0_address              (ccl_csb2wire_csr_s0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (ccl_csb2wire_csr_s0_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (ccl_csb2wire_csr_s0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ccl_csb2wire_csr_s0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (ccl_csb2wire_csr_s0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (ccl_csb2wire_csr_s0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ccl_csb2wire_csr_s0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (ccl_csb2wire_csr_s0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (ccl_csb2wire_csr_s0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (ccl_csb2wire_csr_s0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (ccl_csb2wire_csr_s0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (ccl_csb2wire_csr_s0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ccl_csb2wire_csr_s0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (ccl_csb2wire_csr_s0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (ccl_csb2wire_csr_s0_agent_rp_data),                       //  output,  width = 131,                .data
		.rp_startofpacket        (ccl_csb2wire_csr_s0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (ccl_csb2wire_csr_s0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (ccl_csb2wire_csr_s0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (ccl_csb2wire_csr_s0_burst_adapter_source0_data),          //   input,  width = 131,                .data
		.cp_startofpacket        (ccl_csb2wire_csr_s0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (ccl_csb2wire_csr_s0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (ccl_csb2wire_csr_s0_burst_adapter_source0_channel),       //   input,    width = 8,                .channel
		.rf_sink_ready           (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_data),             //   input,  width = 132,                .data
		.rf_source_ready         (ccl_csb2wire_csr_s0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ccl_csb2wire_csr_s0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (ccl_csb2wire_csr_s0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ccl_csb2wire_csr_s0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (ccl_csb2wire_csr_s0_agent_rf_source_data),                //  output,  width = 132,                .data
		.rdata_fifo_sink_ready   (ccl_csb2wire_csr_s0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ccl_csb2wire_csr_s0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ccl_csb2wire_csr_s0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ccl_csb2wire_csr_s0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ccl_csb2wire_csr_s0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ccl_csb2wire_csr_s0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                   // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                    // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                     // (terminated),                               
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) ccl_csb2wire_csr_s0_agent_rsp_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (ccl_csb2wire_csr_s0_agent_rf_source_data),                          //   input,  width = 132,        in.data
		.in_valid          (ccl_csb2wire_csr_s0_agent_rf_source_valid),                         //   input,    width = 1,          .valid
		.in_ready          (ccl_csb2wire_csr_s0_agent_rf_source_ready),                         //  output,    width = 1,          .ready
		.in_startofpacket  (ccl_csb2wire_csr_s0_agent_rf_source_startofpacket),                 //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ccl_csb2wire_csr_s0_agent_rf_source_endofpacket),                   //   input,    width = 1,          .endofpacket
		.out_data          (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_data),                       //  output,  width = 132,       out.data
		.out_valid         (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_valid),                      //  output,    width = 1,          .valid
		.out_ready         (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_ready),                      //   input,    width = 1,          .ready
		.out_startofpacket (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_startofpacket),              //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ccl_csb2wire_csr_s0_agent_rsp_fifo_out_endofpacket),                //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) ccl_csb2wire_csr_s0_agent_rdata_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (ccl_csb2wire_csr_s0_agent_rdata_fifo_src_data),                     //   input,  width = 34,        in.data
		.in_valid          (ccl_csb2wire_csr_s0_agent_rdata_fifo_src_valid),                    //   input,   width = 1,          .valid
		.in_ready          (ccl_csb2wire_csr_s0_agent_rdata_fifo_src_ready),                    //  output,   width = 1,          .ready
		.out_data          (ccl_csb2wire_csr_s0_agent_rdata_fifo_out_data),                     //  output,  width = 34,       out.data
		.out_valid         (ccl_csb2wire_csr_s0_agent_rdata_fifo_out_valid),                    //  output,   width = 1,          .valid
		.out_ready         (ccl_csb2wire_csr_s0_agent_rdata_fifo_out_ready),                    //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	avmm_ic_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_POISON_H              (116),
		.PKT_POISON_L              (116),
		.PKT_DATACHK_H             (117),
		.PKT_DATACHK_L             (117),
		.PKT_SAI_H                 (121),
		.PKT_SAI_L                 (121),
		.PKT_ADDRCHK_H             (120),
		.PKT_ADDRCHK_L             (119),
		.PKT_USER_DATA_H           (118),
		.PKT_USER_DATA_L           (118),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) ccl_slave_s0_agent (
		.clk                     (interconnect_clock_in_out_clk_clk),                //   input,    width = 1,             clk.clk
		.reset                   (ccl_master_m0_reset_reset_bridge_in_reset_reset),  //   input,    width = 1,       clk_reset.reset
		.m0_address              (ccl_slave_s0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (ccl_slave_s0_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (ccl_slave_s0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ccl_slave_s0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (ccl_slave_s0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (ccl_slave_s0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ccl_slave_s0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (ccl_slave_s0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (ccl_slave_s0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (ccl_slave_s0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (ccl_slave_s0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (ccl_slave_s0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ccl_slave_s0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (ccl_slave_s0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (ccl_slave_s0_agent_rp_data),                       //  output,  width = 131,                .data
		.rp_startofpacket        (ccl_slave_s0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (ccl_slave_s0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (ccl_slave_s0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (ccl_slave_s0_burst_adapter_source0_data),          //   input,  width = 131,                .data
		.cp_startofpacket        (ccl_slave_s0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (ccl_slave_s0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (ccl_slave_s0_burst_adapter_source0_channel),       //   input,    width = 8,                .channel
		.rf_sink_ready           (ccl_slave_s0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ccl_slave_s0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ccl_slave_s0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ccl_slave_s0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ccl_slave_s0_agent_rsp_fifo_out_data),             //   input,  width = 132,                .data
		.rf_source_ready         (ccl_slave_s0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ccl_slave_s0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (ccl_slave_s0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ccl_slave_s0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (ccl_slave_s0_agent_rf_source_data),                //  output,  width = 132,                .data
		.rdata_fifo_sink_ready   (ccl_slave_s0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ccl_slave_s0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ccl_slave_s0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ccl_slave_s0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ccl_slave_s0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ccl_slave_s0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                            // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                             // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                              // (terminated),                               
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) ccl_slave_s0_agent_rsp_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (ccl_slave_s0_agent_rf_source_data),                                 //   input,  width = 132,        in.data
		.in_valid          (ccl_slave_s0_agent_rf_source_valid),                                //   input,    width = 1,          .valid
		.in_ready          (ccl_slave_s0_agent_rf_source_ready),                                //  output,    width = 1,          .ready
		.in_startofpacket  (ccl_slave_s0_agent_rf_source_startofpacket),                        //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ccl_slave_s0_agent_rf_source_endofpacket),                          //   input,    width = 1,          .endofpacket
		.out_data          (ccl_slave_s0_agent_rsp_fifo_out_data),                              //  output,  width = 132,       out.data
		.out_valid         (ccl_slave_s0_agent_rsp_fifo_out_valid),                             //  output,    width = 1,          .valid
		.out_ready         (ccl_slave_s0_agent_rsp_fifo_out_ready),                             //   input,    width = 1,          .ready
		.out_startofpacket (ccl_slave_s0_agent_rsp_fifo_out_startofpacket),                     //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ccl_slave_s0_agent_rsp_fifo_out_endofpacket),                       //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (16),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) ccl_slave_s0_agent_rdata_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (ccl_slave_s0_agent_rdata_fifo_src_data),                            //   input,  width = 34,        in.data
		.in_valid          (ccl_slave_s0_agent_rdata_fifo_src_valid),                           //   input,   width = 1,          .valid
		.in_ready          (ccl_slave_s0_agent_rdata_fifo_src_ready),                           //  output,   width = 1,          .ready
		.out_data          (ccl_slave_s0_agent_rdata_fifo_out_data),                            //  output,  width = 34,       out.data
		.out_valid         (ccl_slave_s0_agent_rdata_fifo_out_valid),                           //  output,   width = 1,          .valid
		.out_ready         (ccl_slave_s0_agent_rdata_fifo_out_ready),                           //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	avmm_ic_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (142),
		.PKT_ORI_BURST_SIZE_L      (140),
		.PKT_RESPONSE_STATUS_H     (139),
		.PKT_RESPONSE_STATUS_L     (138),
		.PKT_BURST_SIZE_H          (117),
		.PKT_BURST_SIZE_L          (115),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (122),
		.PKT_PROTECTION_H          (133),
		.PKT_PROTECTION_L          (131),
		.PKT_BURSTWRAP_H           (114),
		.PKT_BURSTWRAP_L           (114),
		.PKT_BYTE_CNT_H            (113),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (126),
		.PKT_SRC_ID_L              (124),
		.PKT_DEST_ID_H             (129),
		.PKT_DEST_ID_L             (127),
		.PKT_POISON_H              (152),
		.PKT_POISON_L              (152),
		.PKT_DATACHK_H             (153),
		.PKT_DATACHK_L             (153),
		.PKT_SAI_H                 (157),
		.PKT_SAI_L                 (157),
		.PKT_ADDRCHK_H             (156),
		.PKT_ADDRCHK_L             (155),
		.PKT_USER_DATA_H           (154),
		.PKT_USER_DATA_L           (154),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (167),
		.AVS_BURSTCOUNT_W          (4),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) ccv_afu_s0_agent (
		.clk                     (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,             clk.clk
		.reset                   (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (ccv_afu_s0_agent_m0_address),                     //  output,   width = 32,              m0.address
		.m0_burstcount           (ccv_afu_s0_agent_m0_burstcount),                  //  output,    width = 4,                .burstcount
		.m0_byteenable           (ccv_afu_s0_agent_m0_byteenable),                  //  output,    width = 8,                .byteenable
		.m0_debugaccess          (ccv_afu_s0_agent_m0_debugaccess),                 //  output,    width = 1,                .debugaccess
		.m0_lock                 (ccv_afu_s0_agent_m0_lock),                        //  output,    width = 1,                .lock
		.m0_readdata             (ccv_afu_s0_agent_m0_readdata),                    //   input,   width = 64,                .readdata
		.m0_readdatavalid        (ccv_afu_s0_agent_m0_readdatavalid),               //   input,    width = 1,                .readdatavalid
		.m0_read                 (ccv_afu_s0_agent_m0_read),                        //  output,    width = 1,                .read
		.m0_waitrequest          (ccv_afu_s0_agent_m0_waitrequest),                 //   input,    width = 1,                .waitrequest
		.m0_writedata            (ccv_afu_s0_agent_m0_writedata),                   //  output,   width = 64,                .writedata
		.m0_write                (ccv_afu_s0_agent_m0_write),                       //  output,    width = 1,                .write
		.rp_endofpacket          (ccv_afu_s0_agent_rp_endofpacket),                 //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ccv_afu_s0_agent_rp_ready),                       //   input,    width = 1,                .ready
		.rp_valid                (ccv_afu_s0_agent_rp_valid),                       //  output,    width = 1,                .valid
		.rp_data                 (ccv_afu_s0_agent_rp_data),                        //  output,  width = 167,                .data
		.rp_startofpacket        (ccv_afu_s0_agent_rp_startofpacket),               //  output,    width = 1,                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                           //  output,    width = 1,              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                           //   input,    width = 1,                .valid
		.cp_data                 (cmd_mux_004_src_data),                            //   input,  width = 167,                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                   //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                     //   input,    width = 1,                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                         //   input,    width = 8,                .channel
		.rf_sink_ready           (ccv_afu_s0_agent_rsp_fifo_out_ready),             //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ccv_afu_s0_agent_rsp_fifo_out_valid),             //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ccv_afu_s0_agent_rsp_fifo_out_startofpacket),     //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ccv_afu_s0_agent_rsp_fifo_out_endofpacket),       //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ccv_afu_s0_agent_rsp_fifo_out_data),              //   input,  width = 168,                .data
		.rf_source_ready         (ccv_afu_s0_agent_rf_source_ready),                //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ccv_afu_s0_agent_rf_source_valid),                //  output,    width = 1,                .valid
		.rf_source_startofpacket (ccv_afu_s0_agent_rf_source_startofpacket),        //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ccv_afu_s0_agent_rf_source_endofpacket),          //  output,    width = 1,                .endofpacket
		.rf_source_data          (ccv_afu_s0_agent_rf_source_data),                 //  output,  width = 168,                .data
		.rdata_fifo_sink_ready   (ccv_afu_s0_agent_rdata_fifo_src_ready),           //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ccv_afu_s0_agent_rdata_fifo_src_valid),           //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ccv_afu_s0_agent_rdata_fifo_src_data),            //   input,   width = 66,                .data
		.rdata_fifo_src_ready    (ccv_afu_s0_agent_rdata_fifo_src_ready),           //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ccv_afu_s0_agent_rdata_fifo_src_valid),           //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ccv_afu_s0_agent_rdata_fifo_src_data),            //  output,   width = 66,                .data
		.m0_response             (2'b00),                                           // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                            // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                             // (terminated),                               
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (168),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) ccv_afu_s0_agent_rsp_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (ccv_afu_s0_agent_rf_source_data),                                   //   input,  width = 168,        in.data
		.in_valid          (ccv_afu_s0_agent_rf_source_valid),                                  //   input,    width = 1,          .valid
		.in_ready          (ccv_afu_s0_agent_rf_source_ready),                                  //  output,    width = 1,          .ready
		.in_startofpacket  (ccv_afu_s0_agent_rf_source_startofpacket),                          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ccv_afu_s0_agent_rf_source_endofpacket),                            //   input,    width = 1,          .endofpacket
		.out_data          (ccv_afu_s0_agent_rsp_fifo_out_data),                                //  output,  width = 168,       out.data
		.out_valid         (ccv_afu_s0_agent_rsp_fifo_out_valid),                               //  output,    width = 1,          .valid
		.out_ready         (ccv_afu_s0_agent_rsp_fifo_out_ready),                               //   input,    width = 1,          .ready
		.out_startofpacket (ccv_afu_s0_agent_rsp_fifo_out_startofpacket),                       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ccv_afu_s0_agent_rsp_fifo_out_endofpacket),                         //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	avmm_ic_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (106),
		.PKT_ORI_BURST_SIZE_L      (104),
		.PKT_RESPONSE_STATUS_H     (103),
		.PKT_RESPONSE_STATUS_L     (102),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (86),
		.PKT_PROTECTION_H          (97),
		.PKT_PROTECTION_L          (95),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (88),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (91),
		.PKT_POISON_H              (116),
		.PKT_POISON_L              (116),
		.PKT_DATACHK_H             (117),
		.PKT_DATACHK_L             (117),
		.PKT_SAI_H                 (121),
		.PKT_SAI_L                 (121),
		.PKT_ADDRCHK_H             (120),
		.PKT_ADDRCHK_L             (119),
		.PKT_USER_DATA_H           (118),
		.PKT_USER_DATA_L           (118),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (131),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) cmb2avst_slave_s0_agent (
		.clk                     (interconnect_clock_in_out_clk_clk),                     //   input,    width = 1,             clk.clk
		.reset                   (ccl_master_m0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,       clk_reset.reset
		.m0_address              (cmb2avst_slave_s0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (cmb2avst_slave_s0_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (cmb2avst_slave_s0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (cmb2avst_slave_s0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (cmb2avst_slave_s0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (cmb2avst_slave_s0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (cmb2avst_slave_s0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (cmb2avst_slave_s0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (cmb2avst_slave_s0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (cmb2avst_slave_s0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (cmb2avst_slave_s0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (cmb2avst_slave_s0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (cmb2avst_slave_s0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (cmb2avst_slave_s0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (cmb2avst_slave_s0_agent_rp_data),                       //  output,  width = 131,                .data
		.rp_startofpacket        (cmb2avst_slave_s0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (cmb2avst_slave_s0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (cmb2avst_slave_s0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (cmb2avst_slave_s0_burst_adapter_source0_data),          //   input,  width = 131,                .data
		.cp_startofpacket        (cmb2avst_slave_s0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (cmb2avst_slave_s0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (cmb2avst_slave_s0_burst_adapter_source0_channel),       //   input,    width = 8,                .channel
		.rf_sink_ready           (cmb2avst_slave_s0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (cmb2avst_slave_s0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (cmb2avst_slave_s0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (cmb2avst_slave_s0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (cmb2avst_slave_s0_agent_rsp_fifo_out_data),             //   input,  width = 132,                .data
		.rf_source_ready         (cmb2avst_slave_s0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (cmb2avst_slave_s0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (cmb2avst_slave_s0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (cmb2avst_slave_s0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (cmb2avst_slave_s0_agent_rf_source_data),                //  output,  width = 132,                .data
		.rdata_fifo_sink_ready   (cmb2avst_slave_s0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cmb2avst_slave_s0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (cmb2avst_slave_s0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (cmb2avst_slave_s0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cmb2avst_slave_s0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (cmb2avst_slave_s0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (132),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) cmb2avst_slave_s0_agent_rsp_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (cmb2avst_slave_s0_agent_rf_source_data),                            //   input,  width = 132,        in.data
		.in_valid          (cmb2avst_slave_s0_agent_rf_source_valid),                           //   input,    width = 1,          .valid
		.in_ready          (cmb2avst_slave_s0_agent_rf_source_ready),                           //  output,    width = 1,          .ready
		.in_startofpacket  (cmb2avst_slave_s0_agent_rf_source_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (cmb2avst_slave_s0_agent_rf_source_endofpacket),                     //   input,    width = 1,          .endofpacket
		.out_data          (cmb2avst_slave_s0_agent_rsp_fifo_out_data),                         //  output,  width = 132,       out.data
		.out_valid         (cmb2avst_slave_s0_agent_rsp_fifo_out_valid),                        //  output,    width = 1,          .valid
		.out_ready         (cmb2avst_slave_s0_agent_rsp_fifo_out_ready),                        //   input,    width = 1,          .ready
		.out_startofpacket (cmb2avst_slave_s0_agent_rsp_fifo_out_startofpacket),                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (cmb2avst_slave_s0_agent_rsp_fifo_out_endofpacket),                  //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) cmb2avst_slave_s0_agent_rdata_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (cmb2avst_slave_s0_agent_rdata_fifo_src_data),                       //   input,  width = 34,        in.data
		.in_valid          (cmb2avst_slave_s0_agent_rdata_fifo_src_valid),                      //   input,   width = 1,          .valid
		.in_ready          (cmb2avst_slave_s0_agent_rdata_fifo_src_ready),                      //  output,   width = 1,          .ready
		.out_data          (cmb2avst_slave_s0_agent_rdata_fifo_out_data),                       //  output,  width = 34,       out.data
		.out_valid         (cmb2avst_slave_s0_agent_rdata_fifo_out_valid),                      //  output,   width = 1,          .valid
		.out_ready         (cmb2avst_slave_s0_agent_rdata_fifo_out_ready),                      //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	avmm_ic_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (59),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (61),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (64),
		.PKT_POISON_H              (89),
		.PKT_POISON_L              (89),
		.PKT_DATACHK_H             (90),
		.PKT_DATACHK_L             (90),
		.PKT_SAI_H                 (94),
		.PKT_SAI_L                 (94),
		.PKT_ADDRCHK_H             (93),
		.PKT_ADDRCHK_L             (92),
		.PKT_USER_DATA_H           (91),
		.PKT_USER_DATA_L           (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) hip_recfg_slave_s0_agent (
		.clk                     (interconnect_clock_in_out_clk_clk),                      //   input,    width = 1,             clk.clk
		.reset                   (ccl_master_m0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1,       clk_reset.reset
		.m0_address              (hip_recfg_slave_s0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (hip_recfg_slave_s0_agent_m0_burstcount),                 //  output,    width = 1,                .burstcount
		.m0_byteenable           (hip_recfg_slave_s0_agent_m0_byteenable),                 //  output,    width = 1,                .byteenable
		.m0_debugaccess          (hip_recfg_slave_s0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (hip_recfg_slave_s0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (hip_recfg_slave_s0_agent_m0_readdata),                   //   input,    width = 8,                .readdata
		.m0_readdatavalid        (hip_recfg_slave_s0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (hip_recfg_slave_s0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (hip_recfg_slave_s0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (hip_recfg_slave_s0_agent_m0_writedata),                  //  output,    width = 8,                .writedata
		.m0_write                (hip_recfg_slave_s0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (hip_recfg_slave_s0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (hip_recfg_slave_s0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (hip_recfg_slave_s0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (hip_recfg_slave_s0_agent_rp_data),                       //  output,  width = 104,                .data
		.rp_startofpacket        (hip_recfg_slave_s0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (hip_recfg_slave_s0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (hip_recfg_slave_s0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (hip_recfg_slave_s0_burst_adapter_source0_data),          //   input,  width = 104,                .data
		.cp_startofpacket        (hip_recfg_slave_s0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (hip_recfg_slave_s0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (hip_recfg_slave_s0_burst_adapter_source0_channel),       //   input,    width = 8,                .channel
		.rf_sink_ready           (hip_recfg_slave_s0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (hip_recfg_slave_s0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (hip_recfg_slave_s0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (hip_recfg_slave_s0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (hip_recfg_slave_s0_agent_rsp_fifo_out_data),             //   input,  width = 105,                .data
		.rf_source_ready         (hip_recfg_slave_s0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (hip_recfg_slave_s0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (hip_recfg_slave_s0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (hip_recfg_slave_s0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (hip_recfg_slave_s0_agent_rf_source_data),                //  output,  width = 105,                .data
		.rdata_fifo_sink_ready   (hip_recfg_slave_s0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hip_recfg_slave_s0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (hip_recfg_slave_s0_agent_rdata_fifo_out_data),           //   input,   width = 10,                .data
		.rdata_fifo_src_ready    (hip_recfg_slave_s0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hip_recfg_slave_s0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (hip_recfg_slave_s0_agent_rdata_fifo_src_data),           //  output,   width = 10,                .data
		.m0_response             (2'b00),                                                  // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                   // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                    // (terminated),                               
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) hip_recfg_slave_s0_agent_rsp_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (hip_recfg_slave_s0_agent_rf_source_data),                           //   input,  width = 105,        in.data
		.in_valid          (hip_recfg_slave_s0_agent_rf_source_valid),                          //   input,    width = 1,          .valid
		.in_ready          (hip_recfg_slave_s0_agent_rf_source_ready),                          //  output,    width = 1,          .ready
		.in_startofpacket  (hip_recfg_slave_s0_agent_rf_source_startofpacket),                  //   input,    width = 1,          .startofpacket
		.in_endofpacket    (hip_recfg_slave_s0_agent_rf_source_endofpacket),                    //   input,    width = 1,          .endofpacket
		.out_data          (hip_recfg_slave_s0_agent_rsp_fifo_out_data),                        //  output,  width = 105,       out.data
		.out_valid         (hip_recfg_slave_s0_agent_rsp_fifo_out_valid),                       //  output,    width = 1,          .valid
		.out_ready         (hip_recfg_slave_s0_agent_rsp_fifo_out_ready),                       //   input,    width = 1,          .ready
		.out_startofpacket (hip_recfg_slave_s0_agent_rsp_fifo_out_startofpacket),               //  output,    width = 1,          .startofpacket
		.out_endofpacket   (hip_recfg_slave_s0_agent_rsp_fifo_out_endofpacket),                 //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (16),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) hip_recfg_slave_s0_agent_rdata_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (hip_recfg_slave_s0_agent_rdata_fifo_src_data),                      //   input,  width = 10,        in.data
		.in_valid          (hip_recfg_slave_s0_agent_rdata_fifo_src_valid),                     //   input,   width = 1,          .valid
		.in_ready          (hip_recfg_slave_s0_agent_rdata_fifo_src_ready),                     //  output,   width = 1,          .ready
		.out_data          (hip_recfg_slave_s0_agent_rdata_fifo_out_data),                      //  output,  width = 10,       out.data
		.out_valid         (hip_recfg_slave_s0_agent_rdata_fifo_out_valid),                     //  output,   width = 1,          .valid
		.out_ready         (hip_recfg_slave_s0_agent_rdata_fifo_out_ready),                     //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	avmm_ic_altera_merlin_slave_agent_1921_b6r3djy #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (59),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (63),
		.PKT_SRC_ID_L              (61),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (64),
		.PKT_POISON_H              (89),
		.PKT_POISON_L              (89),
		.PKT_DATACHK_H             (90),
		.PKT_DATACHK_L             (90),
		.PKT_SAI_H                 (94),
		.PKT_SAI_L                 (94),
		.PKT_ADDRCHK_H             (93),
		.PKT_ADDRCHK_L             (92),
		.PKT_USER_DATA_H           (91),
		.PKT_USER_DATA_L           (91),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (104),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.USE_MEMORY_BLOCKS         (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1),
		.USE_PKT_DATACHK           (0),
		.ROLE_BASED_USER           (0)
	) usr_avmm_slave_s0_agent (
		.clk                     (interconnect_clock_in_out_clk_clk),                     //   input,    width = 1,             clk.clk
		.reset                   (ccl_master_m0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1,       clk_reset.reset
		.m0_address              (usr_avmm_slave_s0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (usr_avmm_slave_s0_agent_m0_burstcount),                 //  output,    width = 1,                .burstcount
		.m0_byteenable           (usr_avmm_slave_s0_agent_m0_byteenable),                 //  output,    width = 1,                .byteenable
		.m0_debugaccess          (usr_avmm_slave_s0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (usr_avmm_slave_s0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (usr_avmm_slave_s0_agent_m0_readdata),                   //   input,    width = 8,                .readdata
		.m0_readdatavalid        (usr_avmm_slave_s0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (usr_avmm_slave_s0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (usr_avmm_slave_s0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (usr_avmm_slave_s0_agent_m0_writedata),                  //  output,    width = 8,                .writedata
		.m0_write                (usr_avmm_slave_s0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (usr_avmm_slave_s0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (usr_avmm_slave_s0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (usr_avmm_slave_s0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (usr_avmm_slave_s0_agent_rp_data),                       //  output,  width = 104,                .data
		.rp_startofpacket        (usr_avmm_slave_s0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (usr_avmm_slave_s0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (usr_avmm_slave_s0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (usr_avmm_slave_s0_burst_adapter_source0_data),          //   input,  width = 104,                .data
		.cp_startofpacket        (usr_avmm_slave_s0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (usr_avmm_slave_s0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (usr_avmm_slave_s0_burst_adapter_source0_channel),       //   input,    width = 8,                .channel
		.rf_sink_ready           (usr_avmm_slave_s0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (usr_avmm_slave_s0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (usr_avmm_slave_s0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (usr_avmm_slave_s0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (usr_avmm_slave_s0_agent_rsp_fifo_out_data),             //   input,  width = 105,                .data
		.rf_source_ready         (usr_avmm_slave_s0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (usr_avmm_slave_s0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (usr_avmm_slave_s0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (usr_avmm_slave_s0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (usr_avmm_slave_s0_agent_rf_source_data),                //  output,  width = 105,                .data
		.rdata_fifo_sink_ready   (usr_avmm_slave_s0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (usr_avmm_slave_s0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (usr_avmm_slave_s0_agent_rdata_fifo_out_data),           //   input,   width = 10,                .data
		.rdata_fifo_src_ready    (usr_avmm_slave_s0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (usr_avmm_slave_s0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (usr_avmm_slave_s0_agent_rdata_fifo_src_data),           //  output,   width = 10,                .data
		.m0_response             (2'b00),                                                 // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                               
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (105),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) usr_avmm_slave_s0_agent_rsp_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (usr_avmm_slave_s0_agent_rf_source_data),                            //   input,  width = 105,        in.data
		.in_valid          (usr_avmm_slave_s0_agent_rf_source_valid),                           //   input,    width = 1,          .valid
		.in_ready          (usr_avmm_slave_s0_agent_rf_source_ready),                           //  output,    width = 1,          .ready
		.in_startofpacket  (usr_avmm_slave_s0_agent_rf_source_startofpacket),                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (usr_avmm_slave_s0_agent_rf_source_endofpacket),                     //   input,    width = 1,          .endofpacket
		.out_data          (usr_avmm_slave_s0_agent_rsp_fifo_out_data),                         //  output,  width = 105,       out.data
		.out_valid         (usr_avmm_slave_s0_agent_rsp_fifo_out_valid),                        //  output,    width = 1,          .valid
		.out_ready         (usr_avmm_slave_s0_agent_rsp_fifo_out_ready),                        //   input,    width = 1,          .ready
		.out_startofpacket (usr_avmm_slave_s0_agent_rsp_fifo_out_startofpacket),                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (usr_avmm_slave_s0_agent_rsp_fifo_out_endofpacket),                  //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated),                         
		.csr_read          (1'b0),                                                              // (terminated),                         
		.csr_write         (1'b0),                                                              // (terminated),                         
		.csr_readdata      (),                                                                  // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                         
		.almost_full_data  (),                                                                  // (terminated),                         
		.almost_empty_data (),                                                                  // (terminated),                         
		.in_empty          (1'b0),                                                              // (terminated),                         
		.out_empty         (),                                                                  // (terminated),                         
		.in_error          (1'b0),                                                              // (terminated),                         
		.out_error         (),                                                                  // (terminated),                         
		.in_channel        (1'b0),                                                              // (terminated),                         
		.out_channel       ()                                                                   // (terminated),                         
	);

	avmm_ic_altera_avalon_sc_fifo_1932_w27kryi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.MEM_TYPE            ("M20K"),
		.SYNC_RESET          (1)
	) usr_avmm_slave_s0_agent_rdata_fifo (
		.clk               (interconnect_clock_in_out_clk_clk),                                 //   input,   width = 1,       clk.clk
		.reset             (afu_slave_s0_agent_rsp_fifo_clk_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (usr_avmm_slave_s0_agent_rdata_fifo_src_data),                       //   input,  width = 10,        in.data
		.in_valid          (usr_avmm_slave_s0_agent_rdata_fifo_src_valid),                      //   input,   width = 1,          .valid
		.in_ready          (usr_avmm_slave_s0_agent_rdata_fifo_src_ready),                      //  output,   width = 1,          .ready
		.out_data          (usr_avmm_slave_s0_agent_rdata_fifo_out_data),                       //  output,  width = 10,       out.data
		.out_valid         (usr_avmm_slave_s0_agent_rdata_fifo_out_valid),                      //  output,   width = 1,          .valid
		.out_ready         (usr_avmm_slave_s0_agent_rdata_fifo_out_ready),                      //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                             // (terminated),                        
		.csr_read          (1'b0),                                                              // (terminated),                        
		.csr_write         (1'b0),                                                              // (terminated),                        
		.csr_readdata      (),                                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated),                        
		.almost_full_data  (),                                                                  // (terminated),                        
		.almost_empty_data (),                                                                  // (terminated),                        
		.in_startofpacket  (1'b0),                                                              // (terminated),                        
		.in_endofpacket    (1'b0),                                                              // (terminated),                        
		.out_startofpacket (),                                                                  // (terminated),                        
		.out_endofpacket   (),                                                                  // (terminated),                        
		.in_empty          (1'b0),                                                              // (terminated),                        
		.out_empty         (),                                                                  // (terminated),                        
		.in_error          (1'b0),                                                              // (terminated),                        
		.out_error         (),                                                                  // (terminated),                        
		.in_channel        (1'b0),                                                              // (terminated),                        
		.out_channel       ()                                                                   // (terminated),                        
	);

	avmm_ic_altera_merlin_router_1921_fvgieia router (
		.sink_ready         (ccl_master_m0_agent_cp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (ccl_master_m0_agent_cp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (ccl_master_m0_agent_cp_data),                     //   input,  width = 167,          .data
		.sink_startofpacket (ccl_master_m0_agent_cp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ccl_master_m0_agent_cp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                 //  output,  width = 167,          .data
		.src_channel        (router_src_channel),                              //  output,    width = 8,          .channel
		.src_startofpacket  (router_src_startofpacket),                        //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_ysqtmdy router_001 (
		.sink_ready         (usr_access_master_m0_agent_cp_ready),             //  output,    width = 1,      sink.ready
		.sink_valid         (usr_access_master_m0_agent_cp_valid),             //   input,    width = 1,          .valid
		.sink_data          (usr_access_master_m0_agent_cp_data),              //   input,  width = 131,          .data
		.sink_startofpacket (usr_access_master_m0_agent_cp_startofpacket),     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (usr_access_master_m0_agent_cp_endofpacket),       //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                             //  output,  width = 131,          .data
		.src_channel        (router_001_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_vff64mq router_002 (
		.sink_ready         (debug_master_m0_agent_cp_ready),                  //  output,    width = 1,      sink.ready
		.sink_valid         (debug_master_m0_agent_cp_valid),                  //   input,    width = 1,          .valid
		.sink_data          (debug_master_m0_agent_cp_data),                   //   input,  width = 131,          .data
		.sink_startofpacket (debug_master_m0_agent_cp_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (debug_master_m0_agent_cp_endofpacket),            //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                             //  output,  width = 131,          .data
		.src_channel        (router_002_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_foouj4a router_003 (
		.sink_ready         (ccl_mirror_master_m0_agent_cp_ready),             //  output,    width = 1,      sink.ready
		.sink_valid         (ccl_mirror_master_m0_agent_cp_valid),             //   input,    width = 1,          .valid
		.sink_data          (ccl_mirror_master_m0_agent_cp_data),              //   input,  width = 131,          .data
		.sink_startofpacket (ccl_mirror_master_m0_agent_cp_startofpacket),     //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ccl_mirror_master_m0_agent_cp_endofpacket),       //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                             //  output,  width = 131,          .data
		.src_channel        (router_003_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_n7g2zey router_004 (
		.sink_ready         (afu_slave_s0_agent_rp_ready),                     //  output,    width = 1,      sink.ready
		.sink_valid         (afu_slave_s0_agent_rp_valid),                     //   input,    width = 1,          .valid
		.sink_data          (afu_slave_s0_agent_rp_data),                      //   input,  width = 167,          .data
		.sink_startofpacket (afu_slave_s0_agent_rp_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (afu_slave_s0_agent_rp_endofpacket),               //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                             //  output,  width = 167,          .data
		.src_channel        (router_004_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_lnhtona router_005 (
		.sink_ready         (bbs_slave_s0_agent_rp_ready),                     //  output,    width = 1,      sink.ready
		.sink_valid         (bbs_slave_s0_agent_rp_valid),                     //   input,    width = 1,          .valid
		.sink_data          (bbs_slave_s0_agent_rp_data),                      //   input,  width = 167,          .data
		.sink_startofpacket (bbs_slave_s0_agent_rp_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (bbs_slave_s0_agent_rp_endofpacket),               //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                             //  output,  width = 167,          .data
		.src_channel        (router_005_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_md4aalq router_006 (
		.sink_ready         (ccl_csb2wire_csr_s0_agent_rp_ready),              //  output,    width = 1,      sink.ready
		.sink_valid         (ccl_csb2wire_csr_s0_agent_rp_valid),              //   input,    width = 1,          .valid
		.sink_data          (ccl_csb2wire_csr_s0_agent_rp_data),               //   input,  width = 131,          .data
		.sink_startofpacket (ccl_csb2wire_csr_s0_agent_rp_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ccl_csb2wire_csr_s0_agent_rp_endofpacket),        //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                             //  output,  width = 131,          .data
		.src_channel        (router_006_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_cxpp3dq router_007 (
		.sink_ready         (ccl_slave_s0_agent_rp_ready),                     //  output,    width = 1,      sink.ready
		.sink_valid         (ccl_slave_s0_agent_rp_valid),                     //   input,    width = 1,          .valid
		.sink_data          (ccl_slave_s0_agent_rp_data),                      //   input,  width = 131,          .data
		.sink_startofpacket (ccl_slave_s0_agent_rp_startofpacket),             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ccl_slave_s0_agent_rp_endofpacket),               //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                             //  output,  width = 131,          .data
		.src_channel        (router_007_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_lnhtona router_008 (
		.sink_ready         (ccv_afu_s0_agent_rp_ready),                       //  output,    width = 1,      sink.ready
		.sink_valid         (ccv_afu_s0_agent_rp_valid),                       //   input,    width = 1,          .valid
		.sink_data          (ccv_afu_s0_agent_rp_data),                        //   input,  width = 167,          .data
		.sink_startofpacket (ccv_afu_s0_agent_rp_startofpacket),               //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ccv_afu_s0_agent_rp_endofpacket),                 //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_008_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_008_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_008_src_data),                             //  output,  width = 167,          .data
		.src_channel        (router_008_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_008_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_x7sfdzq router_009 (
		.sink_ready         (cmb2avst_slave_s0_agent_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (cmb2avst_slave_s0_agent_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (cmb2avst_slave_s0_agent_rp_data),                 //   input,  width = 131,          .data
		.sink_startofpacket (cmb2avst_slave_s0_agent_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (cmb2avst_slave_s0_agent_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_009_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_009_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_009_src_data),                             //  output,  width = 131,          .data
		.src_channel        (router_009_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_009_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_27gel2a router_010 (
		.sink_ready         (hip_recfg_slave_s0_agent_rp_ready),               //  output,    width = 1,      sink.ready
		.sink_valid         (hip_recfg_slave_s0_agent_rp_valid),               //   input,    width = 1,          .valid
		.sink_data          (hip_recfg_slave_s0_agent_rp_data),                //   input,  width = 104,          .data
		.sink_startofpacket (hip_recfg_slave_s0_agent_rp_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (hip_recfg_slave_s0_agent_rp_endofpacket),         //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_010_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_010_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_010_src_data),                             //  output,  width = 104,          .data
		.src_channel        (router_010_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_010_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_router_1921_d3hx5yi router_011 (
		.sink_ready         (usr_avmm_slave_s0_agent_rp_ready),                //  output,    width = 1,      sink.ready
		.sink_valid         (usr_avmm_slave_s0_agent_rp_valid),                //   input,    width = 1,          .valid
		.sink_data          (usr_avmm_slave_s0_agent_rp_data),                 //   input,  width = 104,          .data
		.sink_startofpacket (usr_avmm_slave_s0_agent_rp_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (usr_avmm_slave_s0_agent_rp_endofpacket),          //   input,    width = 1,          .endofpacket
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_011_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_011_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_011_src_data),                             //  output,  width = 104,          .data
		.src_channel        (router_011_src_channel),                          //  output,    width = 8,          .channel
		.src_startofpacket  (router_011_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_traffic_limiter_1921_cu5sxyq #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (129),
		.PKT_DEST_ID_L                        (127),
		.PKT_SRC_ID_H                         (126),
		.PKT_SRC_ID_L                         (124),
		.PKT_BYTE_CNT_H                       (113),
		.PKT_BYTE_CNT_L                       (110),
		.PKT_BYTEEN_H                         (71),
		.PKT_BYTEEN_L                         (64),
		.PKT_TRANS_POSTED                     (105),
		.PKT_TRANS_WRITE                      (106),
		.PKT_TRANS_SEQ_H                      (166),
		.PKT_TRANS_SEQ_L                      (160),
		.MAX_OUTSTANDING_RESPONSES            (11),
		.PIPELINED                            (0),
		.ST_DATA_W                            (167),
		.ST_CHANNEL_W                         (8),
		.VALID_WIDTH                          (8),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (0),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) ccl_master_m0_limiter (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                 //   input,  width = 167,          .data
		.cmd_sink_channel       (router_src_channel),                              //   input,    width = 8,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                        //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                          //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (ccl_master_m0_limiter_cmd_src_ready),             //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (ccl_master_m0_limiter_cmd_src_data),              //  output,  width = 167,          .data
		.cmd_src_channel        (ccl_master_m0_limiter_cmd_src_channel),           //  output,    width = 8,          .channel
		.cmd_src_startofpacket  (ccl_master_m0_limiter_cmd_src_startofpacket),     //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (ccl_master_m0_limiter_cmd_src_endofpacket),       //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                               //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                               //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                             //   input,    width = 8,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                //   input,  width = 167,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (ccl_master_m0_limiter_rsp_src_ready),             //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (ccl_master_m0_limiter_rsp_src_valid),             //  output,    width = 1,          .valid
		.rsp_src_data           (ccl_master_m0_limiter_rsp_src_data),              //  output,  width = 167,          .data
		.rsp_src_channel        (ccl_master_m0_limiter_rsp_src_channel),           //  output,    width = 8,          .channel
		.rsp_src_startofpacket  (ccl_master_m0_limiter_rsp_src_startofpacket),     //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (ccl_master_m0_limiter_rsp_src_endofpacket),       //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (ccl_master_m0_limiter_cmd_valid_data)             //  output,    width = 8, cmd_valid.data
	);

	avmm_ic_altera_merlin_traffic_limiter_1921_cu5sxyq #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (93),
		.PKT_DEST_ID_L                        (91),
		.PKT_SRC_ID_H                         (90),
		.PKT_SRC_ID_L                         (88),
		.PKT_BYTE_CNT_H                       (77),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.PKT_TRANS_SEQ_H                      (130),
		.PKT_TRANS_SEQ_L                      (124),
		.MAX_OUTSTANDING_RESPONSES            (11),
		.PIPELINED                            (0),
		.ST_DATA_W                            (131),
		.ST_CHANNEL_W                         (8),
		.VALID_WIDTH                          (8),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (0),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) usr_access_master_m0_limiter (
		.clk                    (interconnect_clock_in_out_clk_clk),                  //   input,    width = 1,       clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                               //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                               //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                                //   input,  width = 131,          .data
		.cmd_sink_channel       (router_001_src_channel),                             //   input,    width = 8,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (usr_access_master_m0_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (usr_access_master_m0_limiter_cmd_src_data),          //  output,  width = 131,          .data
		.cmd_src_channel        (usr_access_master_m0_limiter_cmd_src_channel),       //  output,    width = 8,          .channel
		.cmd_src_startofpacket  (usr_access_master_m0_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (usr_access_master_m0_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                              //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                              //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                            //   input,    width = 8,          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                               //   input,  width = 131,          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (usr_access_master_m0_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (usr_access_master_m0_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (usr_access_master_m0_limiter_rsp_src_data),          //  output,  width = 131,          .data
		.rsp_src_channel        (usr_access_master_m0_limiter_rsp_src_channel),       //  output,    width = 8,          .channel
		.rsp_src_startofpacket  (usr_access_master_m0_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (usr_access_master_m0_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (usr_access_master_m0_limiter_cmd_valid_data)         //  output,    width = 8, cmd_valid.data
	);

	avmm_ic_altera_merlin_traffic_limiter_1921_cu5sxyq #(
		.SYNC_RESET                           (1),
		.PKT_DEST_ID_H                        (93),
		.PKT_DEST_ID_L                        (91),
		.PKT_SRC_ID_H                         (90),
		.PKT_SRC_ID_L                         (88),
		.PKT_BYTE_CNT_H                       (77),
		.PKT_BYTE_CNT_L                       (74),
		.PKT_BYTEEN_H                         (35),
		.PKT_BYTEEN_L                         (32),
		.PKT_TRANS_POSTED                     (69),
		.PKT_TRANS_WRITE                      (70),
		.PKT_TRANS_SEQ_H                      (130),
		.PKT_TRANS_SEQ_L                      (124),
		.MAX_OUTSTANDING_RESPONSES            (11),
		.PIPELINED                            (0),
		.ST_DATA_W                            (131),
		.ST_CHANNEL_W                         (8),
		.VALID_WIDTH                          (8),
		.ENFORCE_ORDER                        (1),
		.PREVENT_HAZARDS                      (0),
		.SUPPORTS_POSTED_WRITES               (1),
		.SUPPORTS_NONPOSTED_WRITES            (0),
		.REORDER                              (0),
		.ENABLE_CONCURRENT_SUBORDINATE_ACCESS (0),
		.NO_REPEATED_IDS_BETWEEN_SUBORDINATES (0),
		.ENABLE_OOO                           (0)
	) debug_master_m0_limiter (
		.clk                    (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset                  (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                            //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                            //   input,    width = 1,          .valid
		.cmd_sink_data          (router_002_src_data),                             //   input,  width = 131,          .data
		.cmd_sink_channel       (router_002_src_channel),                          //   input,    width = 8,          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (debug_master_m0_limiter_cmd_src_ready),           //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (debug_master_m0_limiter_cmd_src_data),            //  output,  width = 131,          .data
		.cmd_src_channel        (debug_master_m0_limiter_cmd_src_channel),         //  output,    width = 8,          .channel
		.cmd_src_startofpacket  (debug_master_m0_limiter_cmd_src_startofpacket),   //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (debug_master_m0_limiter_cmd_src_endofpacket),     //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                           //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                           //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                         //   input,    width = 8,          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                            //   input,  width = 131,          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                   //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                     //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (debug_master_m0_limiter_rsp_src_ready),           //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (debug_master_m0_limiter_rsp_src_valid),           //  output,    width = 1,          .valid
		.rsp_src_data           (debug_master_m0_limiter_rsp_src_data),            //  output,  width = 131,          .data
		.rsp_src_channel        (debug_master_m0_limiter_rsp_src_channel),         //  output,    width = 8,          .channel
		.rsp_src_startofpacket  (debug_master_m0_limiter_rsp_src_startofpacket),   //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (debug_master_m0_limiter_rsp_src_endofpacket),     //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (debug_master_m0_limiter_cmd_valid_data)           //  output,    width = 8, cmd_valid.data
	);

	avmm_ic_altera_merlin_burst_adapter_1932_lnlmyma #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) ccl_csb2wire_csr_s0_burst_adapter (
		.clk                   (interconnect_clock_in_out_clk_clk),                       //   input,    width = 1,       cr0.clk
		.reset                 (ccl_master_m0_reset_reset_bridge_in_reset_reset),         //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                   //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                    //   input,  width = 131,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                 //   input,    width = 8,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                   //  output,    width = 1,          .ready
		.source0_valid         (ccl_csb2wire_csr_s0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (ccl_csb2wire_csr_s0_burst_adapter_source0_data),          //  output,  width = 131,          .data
		.source0_channel       (ccl_csb2wire_csr_s0_burst_adapter_source0_channel),       //  output,    width = 8,          .channel
		.source0_startofpacket (ccl_csb2wire_csr_s0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (ccl_csb2wire_csr_s0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (ccl_csb2wire_csr_s0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	avmm_ic_altera_merlin_burst_adapter_1932_lnlmyma #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) ccl_slave_s0_burst_adapter (
		.clk                   (interconnect_clock_in_out_clk_clk),                //   input,    width = 1,       cr0.clk
		.reset                 (ccl_master_m0_reset_reset_bridge_in_reset_reset),  //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                            //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                             //   input,  width = 131,          .data
		.sink0_channel         (cmd_mux_003_src_channel),                          //   input,    width = 8,          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                            //  output,    width = 1,          .ready
		.source0_valid         (ccl_slave_s0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (ccl_slave_s0_burst_adapter_source0_data),          //  output,  width = 131,          .data
		.source0_channel       (ccl_slave_s0_burst_adapter_source0_channel),       //  output,    width = 8,          .channel
		.source0_startofpacket (ccl_slave_s0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (ccl_slave_s0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (ccl_slave_s0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	avmm_ic_altera_merlin_burst_adapter_1932_lnlmyma #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (86),
		.PKT_BYTE_CNT_H            (77),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (81),
		.PKT_BURST_SIZE_L          (79),
		.PKT_BURST_TYPE_H          (83),
		.PKT_BURST_TYPE_L          (82),
		.PKT_BURSTWRAP_H           (78),
		.PKT_BURSTWRAP_L           (78),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (131),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (78),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) cmb2avst_slave_s0_burst_adapter (
		.clk                   (interconnect_clock_in_out_clk_clk),                     //   input,    width = 1,       cr0.clk
		.reset                 (ccl_master_m0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                 //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                  //   input,  width = 131,          .data
		.sink0_channel         (cmd_mux_005_src_channel),                               //   input,    width = 8,          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                 //  output,    width = 1,          .ready
		.source0_valid         (cmb2avst_slave_s0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (cmb2avst_slave_s0_burst_adapter_source0_data),          //  output,  width = 131,          .data
		.source0_channel       (cmb2avst_slave_s0_burst_adapter_source0_channel),       //  output,    width = 8,          .channel
		.source0_startofpacket (cmb2avst_slave_s0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (cmb2avst_slave_s0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (cmb2avst_slave_s0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	avmm_ic_altera_merlin_burst_adapter_1932_yejngea #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (59),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_BURST_TYPE_H          (56),
		.PKT_BURST_TYPE_L          (55),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (51),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) hip_recfg_slave_s0_burst_adapter (
		.clk                   (interconnect_clock_in_out_clk_clk),                      //   input,    width = 1,       cr0.clk
		.reset                 (ccl_master_m0_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                  //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                   //   input,  width = 104,          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                //   input,    width = 8,          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                  //  output,    width = 1,          .ready
		.source0_valid         (hip_recfg_slave_s0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (hip_recfg_slave_s0_burst_adapter_source0_data),          //  output,  width = 104,          .data
		.source0_channel       (hip_recfg_slave_s0_burst_adapter_source0_channel),       //  output,    width = 8,          .channel
		.source0_startofpacket (hip_recfg_slave_s0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (hip_recfg_slave_s0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (hip_recfg_slave_s0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	avmm_ic_altera_merlin_burst_adapter_1932_yejngea #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (59),
		.PKT_BYTE_CNT_H            (50),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (54),
		.PKT_BURST_SIZE_L          (52),
		.PKT_BURST_TYPE_H          (56),
		.PKT_BURST_TYPE_L          (55),
		.PKT_BURSTWRAP_H           (51),
		.PKT_BURSTWRAP_L           (51),
		.PKT_SAI_H                 (89),
		.PKT_SAI_L                 (89),
		.ROLE_BASED_USER           (0),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.PKT_EOP_OOO               (89),
		.PKT_SOP_OOO               (90),
		.ENABLE_OOO                (0),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (8),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (51),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (1)
	) usr_avmm_slave_s0_burst_adapter (
		.clk                   (interconnect_clock_in_out_clk_clk),                     //   input,    width = 1,       cr0.clk
		.reset                 (ccl_master_m0_reset_reset_bridge_in_reset_reset),       //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                 //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                  //   input,  width = 104,          .data
		.sink0_channel         (cmd_mux_007_src_channel),                               //   input,    width = 8,          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                         //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                           //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                 //  output,    width = 1,          .ready
		.source0_valid         (usr_avmm_slave_s0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (usr_avmm_slave_s0_burst_adapter_source0_data),          //  output,  width = 104,          .data
		.source0_channel       (usr_avmm_slave_s0_burst_adapter_source0_channel),       //  output,    width = 8,          .channel
		.source0_startofpacket (usr_avmm_slave_s0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (usr_avmm_slave_s0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (usr_avmm_slave_s0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	avmm_ic_altera_merlin_demultiplexer_1921_lgdnz5y cmd_demux (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,        clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (ccl_master_m0_limiter_cmd_src_ready),             //  output,    width = 1,       sink.ready
		.sink_channel       (ccl_master_m0_limiter_cmd_src_channel),           //   input,    width = 8,           .channel
		.sink_data          (ccl_master_m0_limiter_cmd_src_data),              //   input,  width = 167,           .data
		.sink_startofpacket (ccl_master_m0_limiter_cmd_src_startofpacket),     //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (ccl_master_m0_limiter_cmd_src_endofpacket),       //   input,    width = 1,           .endofpacket
		.sink_valid         (ccl_master_m0_limiter_cmd_valid_data),            //   input,    width = 8, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                            //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                            //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                             //  output,  width = 167,           .data
		.src0_channel       (cmd_demux_src0_channel),                          //  output,    width = 8,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                    //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                      //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                            //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                            //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                             //  output,  width = 167,           .data
		.src1_channel       (cmd_demux_src1_channel),                          //  output,    width = 8,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                    //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                      //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                            //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                            //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                             //  output,  width = 167,           .data
		.src2_channel       (cmd_demux_src2_channel),                          //  output,    width = 8,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                    //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                      //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                            //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                            //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_src3_data),                             //  output,  width = 167,           .data
		.src3_channel       (cmd_demux_src3_channel),                          //  output,    width = 8,           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                    //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                      //  output,    width = 1,           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                            //   input,    width = 1,       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                            //  output,    width = 1,           .valid
		.src4_data          (cmd_demux_src4_data),                             //  output,  width = 167,           .data
		.src4_channel       (cmd_demux_src4_channel),                          //  output,    width = 8,           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                    //  output,    width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                      //  output,    width = 1,           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                            //   input,    width = 1,       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                            //  output,    width = 1,           .valid
		.src5_data          (cmd_demux_src5_data),                             //  output,  width = 167,           .data
		.src5_channel       (cmd_demux_src5_channel),                          //  output,    width = 8,           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                    //  output,    width = 1,           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                      //  output,    width = 1,           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                            //   input,    width = 1,       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                            //  output,    width = 1,           .valid
		.src6_data          (cmd_demux_src6_data),                             //  output,  width = 167,           .data
		.src6_channel       (cmd_demux_src6_channel),                          //  output,    width = 8,           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                    //  output,    width = 1,           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket)                       //  output,    width = 1,           .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_2ew5qei cmd_demux_001 (
		.clk                (interconnect_clock_in_out_clk_clk),                  //   input,    width = 1,        clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset),    //   input,    width = 1,  clk_reset.reset
		.sink_ready         (usr_access_master_m0_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel       (usr_access_master_m0_limiter_cmd_src_channel),       //   input,    width = 8,           .channel
		.sink_data          (usr_access_master_m0_limiter_cmd_src_data),          //   input,  width = 131,           .data
		.sink_startofpacket (usr_access_master_m0_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (usr_access_master_m0_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid         (usr_access_master_m0_limiter_cmd_valid_data),        //   input,    width = 8, sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                           //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                           //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_001_src0_data),                            //  output,  width = 131,           .data
		.src0_channel       (cmd_demux_001_src0_channel),                         //  output,    width = 8,           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                           //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                           //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_001_src1_data),                            //  output,  width = 131,           .data
		.src1_channel       (cmd_demux_001_src1_channel),                         //  output,    width = 8,           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                           //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                           //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_001_src2_data),                            //  output,  width = 131,           .data
		.src2_channel       (cmd_demux_001_src2_channel),                         //  output,    width = 8,           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                           //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                           //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_001_src3_data),                            //  output,  width = 131,           .data
		.src3_channel       (cmd_demux_001_src3_channel),                         //  output,    width = 8,           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                           //   input,    width = 1,       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                           //  output,    width = 1,           .valid
		.src4_data          (cmd_demux_001_src4_data),                            //  output,  width = 131,           .data
		.src4_channel       (cmd_demux_001_src4_channel),                         //  output,    width = 8,           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                     //  output,    width = 1,           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                           //   input,    width = 1,       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                           //  output,    width = 1,           .valid
		.src5_data          (cmd_demux_001_src5_data),                            //  output,  width = 131,           .data
		.src5_channel       (cmd_demux_001_src5_channel),                         //  output,    width = 8,           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                   //  output,    width = 1,           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket)                      //  output,    width = 1,           .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_2ew5qei cmd_demux_002 (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,        clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (debug_master_m0_limiter_cmd_src_ready),           //  output,    width = 1,       sink.ready
		.sink_channel       (debug_master_m0_limiter_cmd_src_channel),         //   input,    width = 8,           .channel
		.sink_data          (debug_master_m0_limiter_cmd_src_data),            //   input,  width = 131,           .data
		.sink_startofpacket (debug_master_m0_limiter_cmd_src_startofpacket),   //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (debug_master_m0_limiter_cmd_src_endofpacket),     //   input,    width = 1,           .endofpacket
		.sink_valid         (debug_master_m0_limiter_cmd_valid_data),          //   input,    width = 8, sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                        //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                        //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_002_src0_data),                         //  output,  width = 131,           .data
		.src0_channel       (cmd_demux_002_src0_channel),                      //  output,    width = 8,           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                  //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                        //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                        //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_002_src1_data),                         //  output,  width = 131,           .data
		.src1_channel       (cmd_demux_002_src1_channel),                      //  output,    width = 8,           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                  //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                        //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                        //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_002_src2_data),                         //  output,  width = 131,           .data
		.src2_channel       (cmd_demux_002_src2_channel),                      //  output,    width = 8,           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                  //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                        //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                        //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_002_src3_data),                         //  output,  width = 131,           .data
		.src3_channel       (cmd_demux_002_src3_channel),                      //  output,    width = 8,           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                  //  output,    width = 1,           .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                        //   input,    width = 1,       src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                        //  output,    width = 1,           .valid
		.src4_data          (cmd_demux_002_src4_data),                         //  output,  width = 131,           .data
		.src4_channel       (cmd_demux_002_src4_channel),                      //  output,    width = 8,           .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                //  output,    width = 1,           .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket),                  //  output,    width = 1,           .endofpacket
		.src5_ready         (cmd_demux_002_src5_ready),                        //   input,    width = 1,       src5.ready
		.src5_valid         (cmd_demux_002_src5_valid),                        //  output,    width = 1,           .valid
		.src5_data          (cmd_demux_002_src5_data),                         //  output,  width = 131,           .data
		.src5_channel       (cmd_demux_002_src5_channel),                      //  output,    width = 8,           .channel
		.src5_startofpacket (cmd_demux_002_src5_startofpacket),                //  output,    width = 1,           .startofpacket
		.src5_endofpacket   (cmd_demux_002_src5_endofpacket)                   //  output,    width = 1,           .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_dehjxyq cmd_demux_003 (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                          //   input,    width = 8,          .channel
		.sink_data          (router_003_src_data),                             //   input,  width = 131,          .data
		.sink_startofpacket (router_003_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_003_src0_data),                         //  output,  width = 131,          .data
		.src0_channel       (cmd_demux_003_src0_channel),                      //  output,    width = 8,          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_5bodgci cmd_mux (
		.clk                 (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                         //  output,  width = 167,          .data
		.src_channel         (cmd_mux_src_channel),                                                      //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                   //   input,    width = 8,          .channel
		.sink0_data          (cmd_demux_src0_data),                                                      //   input,  width = 167,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink1_data          (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_data),          //   input,  width = 167,          .data
		.sink1_startofpacket (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_3ig5day cmd_mux_001 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                     //  output,  width = 167,          .data
		.src_channel         (cmd_mux_001_src_channel),                                                  //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                                   //   input,    width = 8,          .channel
		.sink0_data          (cmd_demux_src1_data),                                                      //   input,  width = 167,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink1_data          (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_data),          //   input,  width = 167,          .data
		.sink1_startofpacket (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink2_ready         (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_ready),              //  output,    width = 1,     sink2.ready
		.sink2_valid         (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_valid),              //   input,    width = 1,          .valid
		.sink2_channel       (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_channel),            //   input,    width = 8,          .channel
		.sink2_data          (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_data),               //   input,  width = 167,          .data
		.sink2_startofpacket (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_kerhpbi cmd_mux_002 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                                     //  output,  width = 131,          .data
		.src_channel         (cmd_mux_002_src_channel),                                                  //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink0_data          (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_data),          //   input,  width = 131,          .data
		.sink0_startofpacket (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),                                               //   input,    width = 8,          .channel
		.sink1_data          (cmd_demux_002_src1_data),                                                  //   input,  width = 131,          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)                                            //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_rqzhvbi cmd_mux_003 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                             //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                             //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                              //  output,  width = 131,          .data
		.src_channel         (cmd_mux_003_src_channel),                                           //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                     //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                       //  output,    width = 1,          .endofpacket
		.sink0_ready         (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink0_data          (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_data),          //   input,  width = 131,          .data
		.sink0_startofpacket (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                                          //  output,    width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                                          //   input,    width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                                        //   input,    width = 8,          .channel
		.sink1_data          (cmd_demux_001_src2_data),                                           //   input,  width = 131,          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.sink2_ready         (cmd_demux_002_src2_ready),                                          //  output,    width = 1,     sink2.ready
		.sink2_valid         (cmd_demux_002_src2_valid),                                          //   input,    width = 1,          .valid
		.sink2_channel       (cmd_demux_002_src2_channel),                                        //   input,    width = 8,          .channel
		.sink2_data          (cmd_demux_002_src2_data),                                           //   input,  width = 131,          .data
		.sink2_startofpacket (cmd_demux_002_src2_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src2_endofpacket)                                     //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_3ig5day cmd_mux_004 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                                   //  output,  width = 167,          .data
		.src_channel         (cmd_mux_004_src_channel),                                                //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                                   //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                                   //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                                 //   input,    width = 8,          .channel
		.sink0_data          (cmd_demux_src4_data),                                                    //   input,  width = 167,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.sink1_ready         (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink1_data          (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_data),          //   input,  width = 167,          .data
		.sink1_startofpacket (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink2_ready         (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_ready),              //  output,    width = 1,     sink2.ready
		.sink2_valid         (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_valid),              //   input,    width = 1,          .valid
		.sink2_channel       (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_channel),            //   input,    width = 8,          .channel
		.sink2_data          (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_data),               //   input,  width = 167,          .data
		.sink2_startofpacket (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_us3esby cmd_mux_005 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                                  //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                                  //  output,    width = 1,          .valid
		.src_data            (cmd_mux_005_src_data),                                                   //  output,  width = 131,          .data
		.src_channel         (cmd_mux_005_src_channel),                                                //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                          //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                            //  output,    width = 1,          .endofpacket
		.sink0_ready         (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink0_data          (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_data),          //   input,  width = 131,          .data
		.sink0_startofpacket (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_sjywvea cmd_mux_006 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                                          //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                                          //  output,    width = 1,          .valid
		.src_data            (cmd_mux_006_src_data),                                                           //  output,  width = 104,          .data
		.src_channel         (cmd_mux_006_src_channel),                                                        //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready),                //  output,    width = 1,     sink0.ready
		.sink0_valid         (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid),                //   input,    width = 1,          .valid
		.sink0_channel       (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel),              //   input,    width = 8,          .channel
		.sink0_data          (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data),                 //   input,  width = 104,          .data
		.sink0_startofpacket (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket),          //   input,    width = 1,          .endofpacket
		.sink1_ready         (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink1.ready
		.sink1_valid         (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink1_channel       (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink1_data          (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data),          //   input,  width = 104,          .data
		.sink1_startofpacket (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink2_ready         (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready),              //  output,    width = 1,     sink2.ready
		.sink2_valid         (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid),              //   input,    width = 1,          .valid
		.sink2_channel       (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel),            //   input,    width = 8,          .channel
		.sink2_data          (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data),               //   input,  width = 104,          .data
		.sink2_startofpacket (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket),        //   input,    width = 1,          .endofpacket
		.sink3_ready         (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink3.ready
		.sink3_valid         (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink3_channel       (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink3_data          (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data),          //   input,  width = 104,          .data
		.sink3_startofpacket (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_tzr2s4i cmd_mux_007 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                                         //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                                         //  output,    width = 1,          .valid
		.src_data            (cmd_mux_007_src_data),                                                          //  output,  width = 104,          .data
		.src_channel         (cmd_mux_007_src_channel),                                                       //  output,    width = 8,          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                                 //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                                   //  output,    width = 1,          .endofpacket
		.sink0_ready         (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink0_data          (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_data),          //   input,  width = 104,          .data
		.sink0_startofpacket (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink1_ready         (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_ready),              //  output,    width = 1,     sink1.ready
		.sink1_valid         (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_valid),              //   input,    width = 1,          .valid
		.sink1_channel       (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_channel),            //   input,    width = 8,          .channel
		.sink1_data          (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_data),               //   input,  width = 104,          .data
		.sink1_startofpacket (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_startofpacket),      //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_endofpacket)         //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_q5qvq7a rsp_demux (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                          //   input,    width = 8,          .channel
		.sink_data          (router_004_src_data),                             //   input,  width = 167,          .data
		.sink_startofpacket (router_004_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                            //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                            //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                             //  output,  width = 167,          .data
		.src0_channel       (rsp_demux_src0_channel),                          //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                      //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                            //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                            //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                             //  output,  width = 167,          .data
		.src1_channel       (rsp_demux_src1_channel),                          //  output,    width = 8,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_xarkd4y rsp_demux_001 (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                          //   input,    width = 8,          .channel
		.sink_data          (router_005_src_data),                             //   input,  width = 167,          .data
		.sink_startofpacket (router_005_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                         //  output,  width = 167,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                      //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                        //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                        //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                         //  output,  width = 167,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                      //  output,    width = 8,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                        //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                        //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_001_src2_data),                         //  output,  width = 167,          .data
		.src2_channel       (rsp_demux_001_src2_channel),                      //  output,    width = 8,          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_56wif6q rsp_demux_002 (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                          //   input,    width = 8,          .channel
		.sink_data          (router_006_src_data),                             //   input,  width = 131,          .data
		.sink_startofpacket (router_006_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                         //  output,  width = 131,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                      //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                        //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                        //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_002_src1_data),                         //  output,  width = 131,          .data
		.src1_channel       (rsp_demux_002_src1_channel),                      //  output,    width = 8,          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_ht7zjni rsp_demux_003 (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                          //   input,    width = 8,          .channel
		.sink_data          (router_007_src_data),                             //   input,  width = 131,          .data
		.sink_startofpacket (router_007_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                         //  output,  width = 131,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                      //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                        //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                        //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_003_src1_data),                         //  output,  width = 131,          .data
		.src1_channel       (rsp_demux_003_src1_channel),                      //  output,    width = 8,          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                        //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                        //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_003_src2_data),                         //  output,  width = 131,          .data
		.src2_channel       (rsp_demux_003_src2_channel),                      //  output,    width = 8,          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_xarkd4y rsp_demux_004 (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_008_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_008_src_channel),                          //   input,    width = 8,          .channel
		.sink_data          (router_008_src_data),                             //   input,  width = 167,          .data
		.sink_startofpacket (router_008_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_008_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                         //  output,  width = 167,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                      //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                        //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                        //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_004_src1_data),                         //  output,  width = 167,          .data
		.src1_channel       (rsp_demux_004_src1_channel),                      //  output,    width = 8,          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                        //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                        //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_004_src2_data),                         //  output,  width = 167,          .data
		.src2_channel       (rsp_demux_004_src2_channel),                      //  output,    width = 8,          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_dehjxyq rsp_demux_005 (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_009_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_009_src_channel),                          //   input,    width = 8,          .channel
		.sink_data          (router_009_src_data),                             //   input,  width = 131,          .data
		.sink_startofpacket (router_009_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_009_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_005_src0_data),                         //  output,  width = 131,          .data
		.src0_channel       (rsp_demux_005_src0_channel),                      //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_gutkciq rsp_demux_006 (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_010_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_010_src_channel),                          //   input,    width = 8,          .channel
		.sink_data          (router_010_src_data),                             //   input,  width = 104,          .data
		.sink_startofpacket (router_010_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_010_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_006_src0_data),                         //  output,  width = 104,          .data
		.src0_channel       (rsp_demux_006_src0_channel),                      //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                        //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                        //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_006_src1_data),                         //  output,  width = 104,          .data
		.src1_channel       (rsp_demux_006_src1_channel),                      //  output,    width = 8,          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                        //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                        //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_006_src2_data),                         //  output,  width = 104,          .data
		.src2_channel       (rsp_demux_006_src2_channel),                      //  output,    width = 8,          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),                //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src3_ready         (rsp_demux_006_src3_ready),                        //   input,    width = 1,      src3.ready
		.src3_valid         (rsp_demux_006_src3_valid),                        //  output,    width = 1,          .valid
		.src3_data          (rsp_demux_006_src3_data),                         //  output,  width = 104,          .data
		.src3_channel       (rsp_demux_006_src3_channel),                      //  output,    width = 8,          .channel
		.src3_startofpacket (rsp_demux_006_src3_startofpacket),                //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (rsp_demux_006_src3_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_demultiplexer_1921_c5t7b3i rsp_demux_007 (
		.clk                (interconnect_clock_in_out_clk_clk),               //   input,    width = 1,       clk.clk
		.reset              (ccl_master_m0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_011_src_ready),                            //  output,    width = 1,      sink.ready
		.sink_channel       (router_011_src_channel),                          //   input,    width = 8,          .channel
		.sink_data          (router_011_src_data),                             //   input,  width = 104,          .data
		.sink_startofpacket (router_011_src_startofpacket),                    //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                      //   input,    width = 1,          .endofpacket
		.sink_valid         (router_011_src_valid),                            //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                        //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                        //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_007_src0_data),                         //  output,  width = 104,          .data
		.src0_channel       (rsp_demux_007_src0_channel),                      //  output,    width = 8,          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                  //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                        //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                        //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_007_src1_data),                         //  output,  width = 104,          .data
		.src1_channel       (rsp_demux_007_src1_channel),                      //  output,    width = 8,          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_zkct7ni rsp_mux (
		.clk                 (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                         //  output,  width = 167,          .data
		.src_channel         (rsp_mux_src_channel),                                                      //  output,    width = 8,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                   //   input,    width = 8,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                      //   input,  width = 167,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                 //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                               //   input,    width = 8,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                  //   input,  width = 167,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink2_ready         (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink2.ready
		.sink2_valid         (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink2_channel       (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink2_data          (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_data),          //   input,  width = 167,          .data
		.sink2_startofpacket (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink3_ready         (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_ready),                //  output,    width = 1,     sink3.ready
		.sink3_valid         (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_valid),                //   input,    width = 1,          .valid
		.sink3_channel       (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_channel),              //   input,    width = 8,          .channel
		.sink3_data          (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_data),                 //   input,  width = 167,          .data
		.sink3_startofpacket (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket),        //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket),          //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                 //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                 //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                               //   input,    width = 8,          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                  //   input,  width = 167,          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.sink5_ready         (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_ready),           //  output,    width = 1,     sink5.ready
		.sink5_valid         (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_valid),           //   input,    width = 1,          .valid
		.sink5_channel       (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_channel),         //   input,    width = 8,          .channel
		.sink5_data          (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_data),            //   input,  width = 167,          .data
		.sink5_startofpacket (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket),   //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket),     //   input,    width = 1,          .endofpacket
		.sink6_ready         (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_ready),          //  output,    width = 1,     sink6.ready
		.sink6_valid         (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_valid),          //   input,    width = 1,          .valid
		.sink6_channel       (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_channel),        //   input,    width = 8,          .channel
		.sink6_data          (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_data),           //   input,  width = 167,          .data
		.sink6_startofpacket (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink6_endofpacket   (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket)     //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_kiex5bq rsp_mux_001 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                                           //  output,  width = 131,          .data
		.src_channel         (rsp_mux_001_src_channel),                                                        //  output,    width = 8,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),               //  output,    width = 1,     sink0.ready
		.sink0_valid         (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),               //   input,    width = 1,          .valid
		.sink0_channel       (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),             //   input,    width = 8,          .channel
		.sink0_data          (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),                //   input,  width = 131,          .data
		.sink0_startofpacket (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket),         //   input,    width = 1,          .endofpacket
		.sink1_ready         (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),               //  output,    width = 1,     sink1.ready
		.sink1_valid         (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),               //   input,    width = 1,          .valid
		.sink1_channel       (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),             //   input,    width = 8,          .channel
		.sink1_data          (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),                //   input,  width = 131,          .data
		.sink1_startofpacket (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket),         //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_003_src1_ready),                                                       //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_003_src1_valid),                                                       //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_003_src1_channel),                                                     //   input,    width = 8,          .channel
		.sink2_data          (rsp_demux_003_src1_data),                                                        //   input,  width = 131,          .data
		.sink2_startofpacket (rsp_demux_003_src1_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src1_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.sink3_ready         (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),                 //   input,    width = 1,          .valid
		.sink3_channel       (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),               //   input,    width = 8,          .channel
		.sink3_data          (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),                  //   input,  width = 131,          .data
		.sink3_startofpacket (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket),           //   input,    width = 1,          .endofpacket
		.sink4_ready         (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink4.ready
		.sink4_valid         (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink4_channel       (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink4_data          (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),          //   input,  width = 131,          .data
		.sink4_startofpacket (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink5_ready         (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),          //  output,    width = 1,     sink5.ready
		.sink5_valid         (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),          //   input,    width = 1,          .valid
		.sink5_channel       (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),        //   input,    width = 8,          .channel
		.sink5_data          (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),           //   input,  width = 131,          .data
		.sink5_startofpacket (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket)     //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_kiex5bq rsp_mux_002 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                                                      //  output,  width = 131,          .data
		.src_channel         (rsp_mux_002_src_channel),                                                   //  output,    width = 8,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                               //  output,    width = 1,          .endofpacket
		.sink0_ready         (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_ready),               //  output,    width = 1,     sink0.ready
		.sink0_valid         (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_valid),               //   input,    width = 1,          .valid
		.sink0_channel       (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_channel),             //   input,    width = 8,          .channel
		.sink0_data          (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_data),                //   input,  width = 131,          .data
		.sink0_startofpacket (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket),       //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket),         //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                                                  //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                                                  //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                                                //   input,    width = 8,          .channel
		.sink1_data          (rsp_demux_002_src1_data),                                                   //   input,  width = 131,          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_003_src2_ready),                                                  //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_003_src2_valid),                                                  //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_003_src2_channel),                                                //   input,    width = 8,          .channel
		.sink2_data          (rsp_demux_003_src2_data),                                                   //   input,  width = 131,          .data
		.sink2_startofpacket (rsp_demux_003_src2_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src2_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.sink3_ready         (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_ready),                 //  output,    width = 1,     sink3.ready
		.sink3_valid         (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_valid),                 //   input,    width = 1,          .valid
		.sink3_channel       (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_channel),               //   input,    width = 8,          .channel
		.sink3_data          (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_data),                  //   input,  width = 131,          .data
		.sink3_startofpacket (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket),           //   input,    width = 1,          .endofpacket
		.sink4_ready         (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink4.ready
		.sink4_valid         (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink4_channel       (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink4_data          (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_data),          //   input,  width = 131,          .data
		.sink4_startofpacket (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket),   //   input,    width = 1,          .endofpacket
		.sink5_ready         (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_ready),          //  output,    width = 1,     sink5.ready
		.sink5_valid         (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_valid),          //   input,    width = 1,          .valid
		.sink5_channel       (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_channel),        //   input,    width = 8,          .channel
		.sink5_data          (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_data),           //   input,  width = 131,          .data
		.sink5_startofpacket (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket),  //   input,    width = 1,          .startofpacket
		.sink5_endofpacket   (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket)     //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_multiplexer_1922_y5jtq6y rsp_mux_003 (
		.clk                 (interconnect_clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset               (ccl_master_m0_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_003_src_data),                                                           //  output,  width = 131,          .data
		.src_channel         (rsp_mux_003_src_channel),                                                        //  output,    width = 8,          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_ready),         //  output,    width = 1,     sink0.ready
		.sink0_valid         (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_valid),         //   input,    width = 1,          .valid
		.sink0_channel       (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_channel),       //   input,    width = 8,          .channel
		.sink0_data          (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_data),          //   input,  width = 131,          .data
		.sink0_startofpacket (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_startofpacket), //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_endofpacket)    //   input,    width = 1,          .endofpacket
	);

	avmm_ic_altera_merlin_width_adapter_1940_aeojcea #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src2_valid),                                                     //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src2_channel),                                                   //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_src2_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src2_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src2_ready),                                                     //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src2_data),                                                      //   input,  width = 167,          .data
		.out_endofpacket      (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ccl_master_m0_to_ccl_csb2wire_csr_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_aeojcea #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src3_valid),                                              //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src3_channel),                                            //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_src3_startofpacket),                                      //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src3_endofpacket),                                        //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src3_ready),                                              //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src3_data),                                               //   input,  width = 167,          .data
		.out_endofpacket      (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ccl_master_m0_to_ccl_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_aeojcea #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src5_valid),                                                   //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src5_channel),                                                 //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_src5_startofpacket),                                           //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src5_endofpacket),                                             //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src5_ready),                                                   //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src5_data),                                                    //   input,  width = 167,          .data
		.out_endofpacket      (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ccl_master_m0_to_cmb2avst_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_w463o2y #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (50),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (54),
		.OUT_PKT_BURST_SIZE_L          (52),
		.OUT_PKT_RESPONSE_STATUS_H     (76),
		.OUT_PKT_RESPONSE_STATUS_L     (75),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (56),
		.OUT_PKT_BURST_TYPE_L          (55),
		.OUT_PKT_ORI_BURST_SIZE_L      (77),
		.OUT_PKT_ORI_BURST_SIZE_H      (79),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (95),
		.OUT_PKT_SOP_OOO               (96),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_src6_valid),                                                    //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_src6_channel),                                                  //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_src6_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_src6_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_src6_ready),                                                    //  output,    width = 1,          .ready
		.in_data              (cmd_demux_src6_data),                                                     //   input,  width = 167,          .data
		.out_endofpacket      (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 104,          .data
		.out_channel          (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ccl_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_6psetwq #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (158),
		.OUT_PKT_SOP_OOO               (159),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                               //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src0_data),                                                  //   input,  width = 131,          .data
		.out_endofpacket      (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 167,          .data
		.out_channel          (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (usr_access_master_m0_to_afu_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_6psetwq #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (158),
		.OUT_PKT_SOP_OOO               (159),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                               //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src1_data),                                                  //   input,  width = 131,          .data
		.out_endofpacket      (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 167,          .data
		.out_channel          (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (usr_access_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_6psetwq #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (158),
		.OUT_PKT_SOP_OOO               (159),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src3_valid),                                               //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src3_channel),                                             //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_001_src3_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src3_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src3_ready),                                               //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src3_data),                                                //   input,  width = 131,          .data
		.out_endofpacket      (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_data),          //  output,  width = 167,          .data
		.out_channel          (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (usr_access_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_in2yvvy #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (50),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (54),
		.OUT_PKT_BURST_SIZE_L          (52),
		.OUT_PKT_RESPONSE_STATUS_H     (76),
		.OUT_PKT_RESPONSE_STATUS_L     (75),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (56),
		.OUT_PKT_BURST_TYPE_L          (55),
		.OUT_PKT_ORI_BURST_SIZE_L      (77),
		.OUT_PKT_ORI_BURST_SIZE_H      (79),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (95),
		.OUT_PKT_SOP_OOO               (96),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src4_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src4_channel),                                                     //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_001_src4_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src4_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src4_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src4_data),                                                        //   input,  width = 131,          .data
		.out_endofpacket      (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 104,          .data
		.out_channel          (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (usr_access_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_in2yvvy #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (50),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (54),
		.OUT_PKT_BURST_SIZE_L          (52),
		.OUT_PKT_RESPONSE_STATUS_H     (76),
		.OUT_PKT_RESPONSE_STATUS_L     (75),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (56),
		.OUT_PKT_BURST_TYPE_L          (55),
		.OUT_PKT_ORI_BURST_SIZE_L      (77),
		.OUT_PKT_ORI_BURST_SIZE_H      (79),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (95),
		.OUT_PKT_SOP_OOO               (96),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_001_src5_valid),                                                      //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_001_src5_channel),                                                    //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_001_src5_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_001_src5_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_001_src5_ready),                                                      //  output,    width = 1,          .ready
		.in_data              (cmd_demux_001_src5_data),                                                       //   input,  width = 131,          .data
		.out_endofpacket      (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 104,          .data
		.out_channel          (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (usr_access_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_6psetwq #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (158),
		.OUT_PKT_SOP_OOO               (159),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) debug_master_m0_to_bbs_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_002_src0_valid),                                            //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_002_src0_channel),                                          //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_002_src0_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_002_src0_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_002_src0_ready),                                            //  output,    width = 1,          .ready
		.in_data              (cmd_demux_002_src0_data),                                             //   input,  width = 131,          .data
		.out_endofpacket      (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 167,          .data
		.out_channel          (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (debug_master_m0_to_bbs_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_6psetwq #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (158),
		.OUT_PKT_SOP_OOO               (159),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) debug_master_m0_to_ccv_afu_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_002_src3_valid),                                          //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_002_src3_channel),                                        //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_002_src3_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_002_src3_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_002_src3_ready),                                          //  output,    width = 1,          .ready
		.in_data              (cmd_demux_002_src3_data),                                           //   input,  width = 131,          .data
		.out_endofpacket      (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_data),          //  output,  width = 167,          .data
		.out_channel          (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (debug_master_m0_to_ccv_afu_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_in2yvvy #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (50),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (54),
		.OUT_PKT_BURST_SIZE_L          (52),
		.OUT_PKT_RESPONSE_STATUS_H     (76),
		.OUT_PKT_RESPONSE_STATUS_L     (75),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (56),
		.OUT_PKT_BURST_TYPE_L          (55),
		.OUT_PKT_ORI_BURST_SIZE_L      (77),
		.OUT_PKT_ORI_BURST_SIZE_H      (79),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (95),
		.OUT_PKT_SOP_OOO               (96),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_002_src4_valid),                                                  //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_002_src4_channel),                                                //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_002_src4_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_002_src4_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_002_src4_ready),                                                  //  output,    width = 1,          .ready
		.in_data              (cmd_demux_002_src4_data),                                                   //   input,  width = 131,          .data
		.out_endofpacket      (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 104,          .data
		.out_channel          (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (debug_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_in2yvvy #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (50),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (54),
		.OUT_PKT_BURST_SIZE_L          (52),
		.OUT_PKT_RESPONSE_STATUS_H     (76),
		.OUT_PKT_RESPONSE_STATUS_L     (75),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (56),
		.OUT_PKT_BURST_TYPE_L          (55),
		.OUT_PKT_ORI_BURST_SIZE_L      (77),
		.OUT_PKT_ORI_BURST_SIZE_H      (79),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (95),
		.OUT_PKT_SOP_OOO               (96),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_002_src5_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_002_src5_channel),                                               //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_002_src5_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_002_src5_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_002_src5_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (cmd_demux_002_src5_data),                                                  //   input,  width = 131,          .data
		.out_endofpacket      (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 104,          .data
		.out_channel          (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (debug_master_m0_to_usr_avmm_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_in2yvvy #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (50),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (54),
		.OUT_PKT_BURST_SIZE_L          (52),
		.OUT_PKT_RESPONSE_STATUS_H     (76),
		.OUT_PKT_RESPONSE_STATUS_L     (75),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (56),
		.OUT_PKT_BURST_TYPE_L          (55),
		.OUT_PKT_ORI_BURST_SIZE_L      (77),
		.OUT_PKT_ORI_BURST_SIZE_H      (79),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (95),
		.OUT_PKT_SOP_OOO               (96),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.in_valid             (cmd_demux_003_src0_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (cmd_demux_003_src0_channel),                                                     //   input,    width = 8,          .channel
		.in_startofpacket     (cmd_demux_003_src0_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (cmd_demux_003_src0_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (cmd_demux_003_src0_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (cmd_demux_003_src0_data),                                                        //   input,  width = 131,          .data
		.out_endofpacket      (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_data),          //  output,  width = 104,          .data
		.out_channel          (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ccl_mirror_master_m0_to_hip_recfg_slave_s0_cmd_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_aeojcea #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                     //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                   //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                     //  output,    width = 1,          .ready
		.in_data              (rsp_demux_src1_data),                                                      //   input,  width = 167,          .data
		.out_endofpacket      (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (afu_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_aeojcea #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_001_src1_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_001_src1_channel),                                               //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_001_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_001_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_001_src1_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (rsp_demux_001_src1_data),                                                  //   input,  width = 167,          .data
		.out_endofpacket      (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (bbs_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_aeojcea #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) bbs_slave_s0_to_debug_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                   //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_001_src2_valid),                                            //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_001_src2_channel),                                          //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_001_src2_startofpacket),                                    //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_001_src2_endofpacket),                                      //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_001_src2_ready),                                            //  output,    width = 1,          .ready
		.in_data              (rsp_demux_001_src2_data),                                             //   input,  width = 167,          .data
		.out_endofpacket      (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (bbs_slave_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                               // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_6psetwq #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (158),
		.OUT_PKT_SOP_OOO               (159),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_002_src0_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_002_src0_channel),                                               //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_002_src0_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_002_src0_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_002_src0_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (rsp_demux_002_src0_data),                                                  //   input,  width = 131,          .data
		.out_endofpacket      (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_data),          //  output,  width = 167,          .data
		.out_channel          (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ccl_csb2wire_csr_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_6psetwq #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (158),
		.OUT_PKT_SOP_OOO               (159),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                          //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                        //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                          //  output,    width = 1,          .ready
		.in_data              (rsp_demux_003_src0_data),                                           //   input,  width = 131,          .data
		.out_endofpacket      (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_data),          //  output,  width = 167,          .data
		.out_channel          (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ccl_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_aeojcea #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_004_src1_valid),                                               //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_004_src1_channel),                                             //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_004_src1_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_004_src1_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_004_src1_ready),                                               //  output,    width = 1,          .ready
		.in_data              (rsp_demux_004_src1_data),                                                //   input,  width = 167,          .data
		.out_endofpacket      (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ccv_afu_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_aeojcea #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (113),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (114),
		.IN_PKT_BURSTWRAP_L            (114),
		.IN_PKT_BURST_SIZE_H           (117),
		.IN_PKT_BURST_SIZE_L           (115),
		.IN_PKT_RESPONSE_STATUS_H      (139),
		.IN_PKT_RESPONSE_STATUS_L      (138),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (119),
		.IN_PKT_BURST_TYPE_L           (118),
		.IN_PKT_ORI_BURST_SIZE_L       (140),
		.IN_PKT_ORI_BURST_SIZE_H       (142),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (167),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) ccv_afu_s0_to_debug_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                 //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                   //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_004_src2_valid),                                          //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_004_src2_channel),                                        //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_004_src2_startofpacket),                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_004_src2_endofpacket),                                    //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_004_src2_ready),                                          //  output,    width = 1,          .ready
		.in_data              (rsp_demux_004_src2_data),                                           //   input,  width = 167,          .data
		.out_endofpacket      (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (ccv_afu_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_6psetwq #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (77),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (78),
		.IN_PKT_BURSTWRAP_L            (78),
		.IN_PKT_BURST_SIZE_H           (81),
		.IN_PKT_BURST_SIZE_L           (79),
		.IN_PKT_RESPONSE_STATUS_H      (103),
		.IN_PKT_RESPONSE_STATUS_L      (102),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (83),
		.IN_PKT_BURST_TYPE_L           (82),
		.IN_PKT_ORI_BURST_SIZE_L       (104),
		.IN_PKT_ORI_BURST_SIZE_H       (106),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (131),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (158),
		.OUT_PKT_SOP_OOO               (159),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                        //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_005_src0_valid),                                               //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_005_src0_channel),                                             //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_005_src0_startofpacket),                                       //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_005_src0_endofpacket),                                         //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_005_src0_ready),                                               //  output,    width = 1,          .ready
		.in_data              (rsp_demux_005_src0_data),                                                //   input,  width = 131,          .data
		.out_endofpacket      (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_data),          //  output,  width = 167,          .data
		.out_channel          (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (cmb2avst_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_doqgrsq #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (50),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (51),
		.IN_PKT_BURSTWRAP_L            (51),
		.IN_PKT_BURST_SIZE_H           (54),
		.IN_PKT_BURST_SIZE_L           (52),
		.IN_PKT_RESPONSE_STATUS_H      (76),
		.IN_PKT_RESPONSE_STATUS_L      (75),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (56),
		.IN_PKT_BURST_TYPE_L           (55),
		.IN_PKT_ORI_BURST_SIZE_L       (77),
		.IN_PKT_ORI_BURST_SIZE_H       (79),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (113),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (117),
		.OUT_PKT_BURST_SIZE_L          (115),
		.OUT_PKT_RESPONSE_STATUS_H     (139),
		.OUT_PKT_RESPONSE_STATUS_L     (138),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (119),
		.OUT_PKT_BURST_TYPE_L          (118),
		.OUT_PKT_ORI_BURST_SIZE_L      (140),
		.OUT_PKT_ORI_BURST_SIZE_H      (142),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (158),
		.OUT_PKT_SOP_OOO               (159),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (167),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                       //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                         //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_006_src0_valid),                                                //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_006_src0_channel),                                              //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_006_src0_startofpacket),                                        //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_006_src0_endofpacket),                                          //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_006_src0_ready),                                                //  output,    width = 1,          .ready
		.in_data              (rsp_demux_006_src0_data),                                                 //   input,  width = 104,          .data
		.out_endofpacket      (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_data),          //  output,  width = 167,          .data
		.out_channel          (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (hip_recfg_slave_s0_to_ccl_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                   // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_z5rnbhq #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (50),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (51),
		.IN_PKT_BURSTWRAP_L            (51),
		.IN_PKT_BURST_SIZE_H           (54),
		.IN_PKT_BURST_SIZE_L           (52),
		.IN_PKT_RESPONSE_STATUS_H      (76),
		.IN_PKT_RESPONSE_STATUS_L      (75),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (56),
		.IN_PKT_BURST_TYPE_L           (55),
		.IN_PKT_ORI_BURST_SIZE_L       (77),
		.IN_PKT_ORI_BURST_SIZE_H       (79),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_006_src1_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_006_src1_channel),                                                     //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_006_src1_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_006_src1_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_006_src1_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (rsp_demux_006_src1_data),                                                        //   input,  width = 104,          .data
		.out_endofpacket      (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (hip_recfg_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_z5rnbhq #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (50),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (51),
		.IN_PKT_BURSTWRAP_L            (51),
		.IN_PKT_BURST_SIZE_H           (54),
		.IN_PKT_BURST_SIZE_L           (52),
		.IN_PKT_RESPONSE_STATUS_H      (76),
		.IN_PKT_RESPONSE_STATUS_L      (75),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (56),
		.IN_PKT_BURST_TYPE_L           (55),
		.IN_PKT_ORI_BURST_SIZE_L       (77),
		.IN_PKT_ORI_BURST_SIZE_H       (79),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                         //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                           //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_006_src2_valid),                                                  //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_006_src2_channel),                                                //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_006_src2_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_006_src2_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_006_src2_ready),                                                  //  output,    width = 1,          .ready
		.in_data              (rsp_demux_006_src2_data),                                                   //   input,  width = 104,          .data
		.out_endofpacket      (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (hip_recfg_slave_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                     // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_z5rnbhq #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (50),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (51),
		.IN_PKT_BURSTWRAP_L            (51),
		.IN_PKT_BURST_SIZE_H           (54),
		.IN_PKT_BURST_SIZE_L           (52),
		.IN_PKT_RESPONSE_STATUS_H      (76),
		.IN_PKT_RESPONSE_STATUS_L      (75),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (56),
		.IN_PKT_BURST_TYPE_L           (55),
		.IN_PKT_ORI_BURST_SIZE_L       (77),
		.IN_PKT_ORI_BURST_SIZE_H       (79),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                              //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                                //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_006_src3_valid),                                                       //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_006_src3_channel),                                                     //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_006_src3_startofpacket),                                               //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_006_src3_endofpacket),                                                 //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_006_src3_ready),                                                       //  output,    width = 1,          .ready
		.in_data              (rsp_demux_006_src3_data),                                                        //   input,  width = 104,          .data
		.out_endofpacket      (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (hip_recfg_slave_s0_to_ccl_mirror_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_z5rnbhq #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (50),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (51),
		.IN_PKT_BURSTWRAP_L            (51),
		.IN_PKT_BURST_SIZE_H           (54),
		.IN_PKT_BURST_SIZE_L           (52),
		.IN_PKT_RESPONSE_STATUS_H      (76),
		.IN_PKT_RESPONSE_STATUS_L      (75),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (56),
		.IN_PKT_BURST_TYPE_L           (55),
		.IN_PKT_ORI_BURST_SIZE_L       (77),
		.IN_PKT_ORI_BURST_SIZE_H       (79),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                             //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_007_src0_valid),                                                      //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_007_src0_channel),                                                    //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_007_src0_startofpacket),                                              //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_007_src0_endofpacket),                                                //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_007_src0_ready),                                                      //  output,    width = 1,          .ready
		.in_data              (rsp_demux_007_src0_data),                                                       //   input,  width = 104,          .data
		.out_endofpacket      (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (usr_avmm_slave_s0_to_usr_access_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                         // (terminated),                         
	);

	avmm_ic_altera_merlin_width_adapter_1940_z5rnbhq #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (50),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (51),
		.IN_PKT_BURSTWRAP_L            (51),
		.IN_PKT_BURST_SIZE_H           (54),
		.IN_PKT_BURST_SIZE_L           (52),
		.IN_PKT_RESPONSE_STATUS_H      (76),
		.IN_PKT_RESPONSE_STATUS_L      (75),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (56),
		.IN_PKT_BURST_TYPE_L           (55),
		.IN_PKT_ORI_BURST_SIZE_L       (77),
		.IN_PKT_ORI_BURST_SIZE_H       (79),
		.IN_PKT_POISON_H               (76),
		.IN_PKT_POISON_L               (76),
		.IN_PKT_DATACHK_H              (80),
		.IN_PKT_DATACHK_L              (77),
		.IN_PKT_ADDRCHK_H              (84),
		.IN_PKT_ADDRCHK_L              (81),
		.IN_PKT_SAI_H                  (88),
		.IN_PKT_SAI_L                  (85),
		.IN_PKT_USER_DATA_H            (89),
		.IN_PKT_USER_DATA_L            (89),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (77),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (81),
		.OUT_PKT_BURST_SIZE_L          (79),
		.OUT_PKT_RESPONSE_STATUS_H     (103),
		.OUT_PKT_RESPONSE_STATUS_L     (102),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (83),
		.OUT_PKT_BURST_TYPE_L          (82),
		.OUT_PKT_ORI_BURST_SIZE_L      (104),
		.OUT_PKT_ORI_BURST_SIZE_H      (106),
		.OUT_PKT_POISON_H              (74),
		.OUT_PKT_POISON_L              (74),
		.OUT_PKT_DATACHK_H             (78),
		.OUT_PKT_DATACHK_L             (75),
		.OUT_PKT_ADDRCHK_H             (82),
		.OUT_PKT_ADDRCHK_L             (79),
		.OUT_PKT_SAI_H                 (86),
		.OUT_PKT_SAI_L                 (83),
		.OUT_PKT_EOP_OOO               (122),
		.OUT_PKT_SOP_OOO               (123),
		.OUT_PKT_USER_DATA_H           (89),
		.OUT_PKT_USER_DATA_L           (89),
		.ENABLE_OOO                    (0),
		.OUT_ST_DATA_W                 (131),
		.ST_CHANNEL_W                  (8),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.ROLE_BASED_USER               (0),
		.BITSPERBYTE                   (0),
		.SYNC_RESET                    (1)
	) usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter (
		.clk                  (interconnect_clock_in_out_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                (ccl_master_m0_reset_reset_bridge_in_reset_reset),                          //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_demux_007_src1_valid),                                                 //   input,    width = 1,      sink.valid
		.in_channel           (rsp_demux_007_src1_channel),                                               //   input,    width = 8,          .channel
		.in_startofpacket     (rsp_demux_007_src1_startofpacket),                                         //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_demux_007_src1_endofpacket),                                           //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_demux_007_src1_ready),                                                 //  output,    width = 1,          .ready
		.in_data              (rsp_demux_007_src1_data),                                                  //   input,  width = 104,          .data
		.out_endofpacket      (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_endofpacket),   //  output,    width = 1,       src.endofpacket
		.out_data             (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_data),          //  output,  width = 131,          .data
		.out_channel          (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_channel),       //  output,    width = 8,          .channel
		.out_valid            (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_valid),         //  output,    width = 1,          .valid
		.out_ready            (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_ready),         //   input,    width = 1,          .ready
		.out_startofpacket    (usr_avmm_slave_s0_to_debug_master_m0_rsp_width_adapter_src_startofpacket), //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated),                         
	);

endmodule
