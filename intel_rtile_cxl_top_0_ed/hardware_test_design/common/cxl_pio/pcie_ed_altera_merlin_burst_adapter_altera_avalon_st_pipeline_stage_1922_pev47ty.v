// (C) 2001-2024 Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files from any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License Subscription 
// Agreement, Intel FPGA IP License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Intel and sold by 
// Intel or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


//Legal Notice: (C)2023 Altera Corporation. All rights reserved.  Your
//use of Altera Corporation's design tools, logic functions and other
//software and tools, and its AMPP partner logic functions, and any
//output files any of the foregoing (including device programming or
//simulation files), and any associated documentation or information are
//expressly subject to the terms and conditions of the Altera Program
//License Subscription Agreement or other applicable license agreement,
//including, without limitation, that your use is for the sole purpose
//of programming logic devices manufactured by Altera and sold by Altera
//or its authorized distributors.  Please refer to the applicable
//agreement for further details.
// pcie_ed_altera_merlin_burst_adapter_altera_avalon_st_pipeline_stage_1922_pev47ty.v

// Generated using ACDS version 22.1 174

`timescale 1 ps / 1 ps
module pcie_ed_altera_merlin_burst_adapter_altera_avalon_st_pipeline_stage_1922_pev47ty #(
		parameter SYMBOLS_PER_BEAT = 1,
		parameter BITS_PER_SYMBOL  = 1267,
		parameter USE_PACKETS      = 1,
		parameter USE_EMPTY        = 0,
		parameter EMPTY_WIDTH      = 0,
		parameter CHANNEL_WIDTH    = 1,
		parameter PACKET_WIDTH     = 2,
		parameter ERROR_WIDTH      = 0,
		parameter PIPELINE_READY   = 1,
		parameter SYNC_RESET       = 1
	) (
		input  wire          clk,               //       cr0.clk
		input  wire          reset,             // cr0_reset.reset
		output wire          in_ready,          //     sink0.ready
		input  wire          in_valid,          //          .valid
		input  wire          in_startofpacket,  //          .startofpacket
		input  wire          in_endofpacket,    //          .endofpacket
		input  wire [1266:0] in_data,           //          .data
		input  wire [0:0]    in_channel,        //          .channel
		input  wire          out_ready,         //   source0.ready
		output wire          out_valid,         //          .valid
		output wire          out_startofpacket, //          .startofpacket
		output wire          out_endofpacket,   //          .endofpacket
		output wire [1266:0] out_data,          //          .data
		output wire [0:0]    out_channel        //          .channel
	);

	pcie_ed_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (SYMBOLS_PER_BEAT),
		.BITS_PER_SYMBOL  (BITS_PER_SYMBOL),
		.USE_PACKETS      (USE_PACKETS),
		.USE_EMPTY        (USE_EMPTY),
		.EMPTY_WIDTH      (EMPTY_WIDTH),
		.CHANNEL_WIDTH    (CHANNEL_WIDTH),
		.PACKET_WIDTH     (PACKET_WIDTH),
		.ERROR_WIDTH      (ERROR_WIDTH),
		.PIPELINE_READY   (PIPELINE_READY),
		.SYNC_RESET       (SYNC_RESET)
	) my_altera_avalon_st_pipeline_stage (
		.clk               (clk),               //   input,     width = 1,       cr0.clk
		.reset             (reset),             //   input,     width = 1, cr0_reset.reset
		.in_ready          (in_ready),          //  output,     width = 1,     sink0.ready
		.in_valid          (in_valid),          //   input,     width = 1,          .valid
		.in_startofpacket  (in_startofpacket),  //   input,     width = 1,          .startofpacket
		.in_endofpacket    (in_endofpacket),    //   input,     width = 1,          .endofpacket
		.in_data           (in_data),           //   input,  width = 1267,          .data
		.in_channel        (in_channel),        //   input,     width = 1,          .channel
		.out_ready         (out_ready),         //   input,     width = 1,   source0.ready
		.out_valid         (out_valid),         //  output,     width = 1,          .valid
		.out_startofpacket (out_startofpacket), //  output,     width = 1,          .startofpacket
		.out_endofpacket   (out_endofpacket),   //  output,     width = 1,          .endofpacket
		.out_data          (out_data),          //  output,  width = 1267,          .data
		.out_channel       (out_channel),       //  output,     width = 1,          .channel
		.in_empty          (1'b0),              // (terminated),                          
		.out_empty         (),                  // (terminated),                          
		.out_error         (),                  // (terminated),                          
		.in_error          (1'b0)               // (terminated),                          
	);

endmodule
`ifdef QUESTA_INTEL_OEM
`pragma questa_oem_00 "DcjSv4cazWNFeTq2LDzhR8VVA2vsU+D2FLr5cau2M2bJ+ymOMJzu0j4X+D7sDofwwnGT3dC9uPfUfqUyT+1JDqgoqF4+Hm1+DbOqZuomBxMc/3ubRV7jR7LhS90CAIiftZSupMkt7Z6NB7tsmbvAu3Uqtxlo+Ag4QRIgi49yVFsS2wB30qw4GeL5di6t6OjbvWcjLtKHJMZ/Vew3QCsc9aW8Cap9TcP/4lTkJB8MFThCqwCS2m1sw9YKroNIt2lKcM2O4xFevFwhtVRh5U1evS59rCW7qaxrVgd7snPjNDfLDwTRzrx4TUyuOS8/J0+tbSPv+RAAo8tAfaHusLasg8cj7sTyvf2VKIm7YukjfmGKFIWqHuaPuxr/40B75fXuhXoxbLJoS1Nx3vvQEDhel0mmkt6jiVrssB/UzdT0FkdpeVQCPjyEAa9hPOUal3mIPUQQD0LFB9NULZ2lsRHtGG2ESA9Ye6dyoQ6Ks6nj++rkiiPjV4gbIm1m8s393PzEfTEXHukdaXpbrRX0Vs1A56heRRwKQAbehQqG+hMOkwYqyKl1GlujOGG/F/FGxy+hNH05YKorfY2RcR6qKNNt0gKRP3wwoPlqtZEZvBqMnyItYCpc5bM/Y4Qanlh4ZNwi6jEqIbwzFYoZ9s3ExeEiCJOmstKlKyx4nPppqXX6XUn0CyGhuglJj7deNduzuqVF45pyhU+jNwyD5goYtNw28jrQCEkS4qm0RzaON45n2jNZL8P906mtBdiHPNWGhlbs3F41i55IjhMKK5pQBnyRF/7daFPj99FcznpRuFokbIXqhz2qu/skUg5tC07kkudLNQB+BllLdkfHAitp8jWcMSLjE8tsIHjZF5bCi013sHUOQGcTl7uLS4Pxc3/WyxfC9HbE8IHK4vWDvOgRtAR6Wp6UrFEtPnYbPBbJN/MEYw6plTEH5cCdQOQ4Tfb615ATCy+DcOPFuBSAhfcfBFCQLGlv330h/htuGr38OghDGO1ej04lO0TRcUAJBw4UFl5Z"
`endif